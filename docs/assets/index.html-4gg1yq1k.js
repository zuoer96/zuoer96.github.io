import{_ as s,c as e,a as n,o as r}from"./app-D9na5qdx.js";const i="/docs/images/image-20211216202120194.png",p="/docs/images/image-20211216202148291.png",t="/docs/images/image-20211216203359454.png",o="/docs/images/image-20211216202607872.png",c="/docs/images/image-20211216202624442.png",l="/docs/images/image-20211216202644806.png",h="/docs/images/image-20211216205106735.png",d="/docs/images/image-20211216205818810.png",g="/docs/images/image-20211216202657992.png",m="/docs/images/image-20211216202741467.png",u={};function b(v,a){return r(),e("div",null,a[0]||(a[0]=[n(`<p>请在此处补充摘要</p><p>架构师这个是有国际标准（ISO/IEC 42010）可查的。</p><h1 id="架构师概述" tabindex="-1"><a class="header-anchor" href="#架构师概述"><span>架构师概述</span></a></h1><h2 id="架构师分类" tabindex="-1"><a class="header-anchor" href="#架构师分类"><span><strong>架构师分类</strong></span></a></h2><h3 id="微软划分模式" tabindex="-1"><a class="header-anchor" href="#微软划分模式"><span>微软划分模式</span></a></h3><ul><li>企业架构师<strong>EA</strong>(Enterprise Architect)</li></ul><p>EA决定整个公司的技术路线和技术发展方向。</p><blockquote><p>盖茨给自己的Title就是首席软件架构师，网易丁磊也喜欢这么称呼自己，实际上就是EA角色。</p></blockquote><ul><li>基础结构架构师<strong>IA</strong>(Infrastructure Architect)</li></ul><p>IA的工作就是提炼和优化技术方面积累和沉淀形成的基础性的、公共的、可复用的框架和组件，这些都是一个技术型公司传承下来的最宝贵的财富之一。</p><ul><li>特定技术架构<strong>TSA</strong>(Technology-Specific Architect)</li></ul><p>TSA主要从事类似安全架构、存储架构等专项技术的规划和设计工作.</p><ul><li>解决方案架构师<strong>SA</strong> (Solution Architect)</li></ul><p>SA工作则专于解决方案的规划和设计。</p><blockquote><p>ps:大公司分得细，小公司不讲究，架构师多数是是IA+TSA+SA，一人包打天下，所以说大公司出专才，小公司出全才。</p></blockquote><h3 id="另一种划分模式" tabindex="-1"><a class="header-anchor" href="#另一种划分模式"><span>另一种划分模式</span></a></h3><ul><li><strong>软件架构师（TSA+IA</strong>）</li></ul><p>这也是程序员最容易突破，最可能走上的一条道路，比如JAVA架构师、DotNet架构师、LAPM架构师等等。</p><ul><li>系统架构师（SA+TSA）</li></ul><p>更着力于综合运用已有的产品和技术，来实现客户期望的需求。系统架构师要求通晓软、硬件两方面的知识，所以它的知识体系相对庞杂。</p><h2 id="架构师职责" tabindex="-1"><a class="header-anchor" href="#架构师职责"><span>架构师职责</span></a></h2><blockquote><p>要知道架构师都在做什么</p></blockquote><p>架构师需要参与项目开发的<strong>全部过程</strong>，包括需求分析、架构设计、系统实现、集成、测试和部署各个阶段，负责在整个项目中对技术活动和技术说明进行指导和协调。</p><p>架构师主要职责有4条</p><p><strong>1、确认需求</strong></p><p>在项目开发过程中，架构师是在需求规格说明书完成后介入的，需求规格说明书必须得到架构师的认可。</p><p>​ <mark>架构师需要和分析人员反复交流</mark>，以保证自己完整并准确地理解用户需求。</p><p><strong>2、系统分解</strong></p><p>依据用户需求，架构师将系统整体分解为更小的子系统和组件，从而形成不同的逻辑层或服务。随后，架构师会确定各层的接口，层与层相互之间的关系。架构师不仅要对整个系统分层，进行“纵向”分解，还要对同一逻辑层分块，进行“横向”分解。</p><p>软件架构师的功力基本体现于此，这是一项相对复杂的工作。</p><p><strong>3、技术选型</strong></p><p>架构师通过对系统的一系列的分解，最终形成了软件的整体架构。技术选择主要取决于软件架构。</p><p>Web Server运行在Windows上还是Linux上？数据库采用MSSql、Oracle还是Mysql？需要不需要采用MVC或者Spring等轻量级的框架？前端采用富客户端还是瘦客户端方式？类似的工作，都需要在这个阶段提出，并进行评估。</p><p>架构师对产品和技术的选型仅仅限于评估，没有决定权，最终的决定权归项目经理。架构师提出的技术方案为项目经理提供了重要的参考信息，项目经理会从项目预算、人力资源、时间进度等实际情况进行权衡，最终进行确认。</p><p><strong>4、制定技术规格说明</strong></p><p>架构师在项目开发过程中，是技术权威。他需要协调所有的开发人员，与开发人员一直保持沟通，始终保证开发者依照它的架构意图去实现各项功能。</p><p>架构师与开发者沟通的最重要的形式是技术规格说明书，它可以是UML视图、Word文档，Visio文件等各种表现形式。通过架构师提供的技术规格说明书，保证开发者可以从不同角度去观察、理解各自承担的子系统或者模块。</p><p>架构师不仅要保持与开发者的沟通，也需要与项目经理、需求分析员，甚至与最终用户保持沟通。所以，对于架构师来讲，不仅有技术方面的要求，还有人际交流方面的要求。</p><h2 id="架构师的误区" tabindex="-1"><a class="header-anchor" href="#架构师的误区"><span><strong>架构师的误区</strong></span></a></h2><p><strong>1、架构师就是<a href="https://www.zhihu.com/search?q=%E9%A1%B9%E7%9B%AE%E7%BB%8F%E7%90%86&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A38780884%7D" target="_blank" rel="noopener noreferrer">项目经理</a></strong></p><p>架构师不是项目经理。项目经理侧重于预算控制、时间进度控制、人员管理、与外部联系和协调等等工作，具备管理职能。一般小型项目中，常见项目经理兼架构师。</p><p><strong>2、架构师负责需求分析</strong></p><p>架构师不是<a href="https://www.zhihu.com/search?q=%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E5%91%98&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A38780884%7D" target="_blank" rel="noopener noreferrer">需求分析员</a>。需求分析人员的工作是收集需求和分析需求，并与最终用户、产品经理保持联系。架构师只对最终的需求审核和确认，提出需求不清和不完整的部分，他会跟需求分析员时刻保持联系。架构师是技术专家，不是业务专家。</p><p><strong>3、架构师从来不写代码</strong></p><p>这是一个尚存争论的问题。目前有两种观点：</p><p>观点1：架构师不写代码，写代码纯体力活，架构师写代码大材小用。架构师把UML的各种视图交给开发人员，如果有不明确的地方，可以与架构师随时沟通。</p><p>观点2：<strong>架构师本来自于程序员，只是比程序员站的层面更高，比程序员唯一多的是经验和知识，所以架构师也免不了写代码。</strong></p><p>我个人觉得这两种说法是与架构师的出身和所处的环境有关。</p><p>架构师首先是一个技术角色，所以一定是来自于技术人员这个群体，比如系统架构师，多是来自于运维人员，可能本身代码写得并不多，或者说写不出来很漂亮的代码。软件架构师多是来自于程序员，有着程序员的血统和情怀，所以在项目开发过程中，可能会写一些核心代码。我们的理想是架构师不用写代码，但事实上有时候过于理想。架构师写不写代码，可能取决于公司的规模、文化、开发人员的素质等现实情况。另外，架构师也不是跟程序员界限分得那么清楚，按照能力也有高中低之分，写不写代码不是区分两者的根本标准。</p><h2 id="架构师的基本素质" tabindex="-1"><a class="header-anchor" href="#架构师的基本素质"><span>架构师的基本素质</span></a></h2><h3 id="沟通能力☆☆☆☆☆" tabindex="-1"><a class="header-anchor" href="#沟通能力☆☆☆☆☆"><span><strong>沟通能力</strong>☆☆☆☆☆</span></a></h3><p>​ 为了提高效率，架构师必须赢得团队成员、项目经理、客户或用户认同，这就需要架构师具有较强的沟通能力。沟通能力是人类最普遍性的素质要求，技术人员好像容易忽略，<strong>想成为架构师就不能忽略</strong>。非常重要！</p><h3 id="领导能力" tabindex="-1"><a class="header-anchor" href="#领导能力"><span><strong><a href="https://www.zhihu.com/search?q=%E9%A2%86%E5%AF%BC%E8%83%BD%E5%8A%9B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A38780884%7D" target="_blank" rel="noopener noreferrer">领导能力</a></strong></span></a></h3><p>架构师能够推动整个团队的技术进展，能在压力下作出关键性的决策，并将其贯彻到底。架构师如何来保证这种执行力？这就需要架构师具有领导能力。</p><p>架构师的领导能力的取得跟项目经理不太一样。项目经理主要负责解决<a href="https://www.zhihu.com/search?q=%E8%A1%8C%E6%94%BF%E7%AE%A1%E7%90%86&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A38780884%7D" target="_blank" rel="noopener noreferrer">行政管理</a>，这种能力与技术关系不大，他有人权和财权，再扯上一张“领导”的虎皮，采用“胡萝卜加大棒”的方式，基本上可以保证执行力。架构师在项目里面可能更多地使用非正式的领导力，也就是我们常说的<strong>影响力，<strong>里面包括</strong>个人魅力、技术能力、知识传递</strong>等等。</p><h3 id="抽象思维和分析能力" tabindex="-1"><a class="header-anchor" href="#抽象思维和分析能力"><span><strong>抽象思维和分析能力</strong></span></a></h3><p>​ 架构师必须具备抽象思维和分析的能力，这是你进行系统分析和系统分解的基本素质。只有具备这样的能力，架构师才能看清系统的整体，掌控全局，这也是架构师<a href="https://www.zhihu.com/search?q=%E5%A4%A7%E5%B1%80%E8%A7%82&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A38780884%7D" target="_blank" rel="noopener noreferrer">大局观</a>的形成基础。你如何具备这种能力呢？</p><p>​ 一是来自于经验，二是来自于学习。</p><p>​ 架构师不仅要具备在问题领域上的经验，也需要具备在软件工程领域内的经验。也就是说，架构师必须能够准确得理解需求，然后用软件工程的思想，把需求转化和分解成可用计算机语言实现的程度。经验的积累是需要一个时间过程的，这个过程谁也帮不了你，是需要你去经历的。但是，如果你有意识地去培养，不断吸取前人的经验的话，还是可以缩短这个周期的。</p><h3 id="技术深度和广度" tabindex="-1"><a class="header-anchor" href="#技术深度和广度"><span><strong>技术深度和广度</strong></span></a></h3><p>​ 架构师最好精通1-2个技术，具备这种技术能力可以更加深入的理解有关架构的工作原理，也可以拉近和开发人员的距离，并形成团队中的<strong>影响力</strong>。</p><p>架构师的技术<strong>知识广度</strong>也很重要，需要了解尽可能多的技术，所谓见多识广，只有这样，才可能综合各种技术，选择更加适合项目的解决方案。有的人说，架构师技术广度的要求高于技术深度的要求，这是很有道理的。</p><blockquote><p>总而言之，一句话：架构师是项目团队中的技术权威。</p></blockquote><h2 id="架构师要做的工作-运维角度" tabindex="-1"><a class="header-anchor" href="#架构师要做的工作-运维角度"><span>架构师要做的工作(运维角度)</span></a></h2><p>1.需要搭建高可用的框架，比如就拿最简单的搭建数据库服务来说，得考虑如果一台MySQL服务器宕了，如何保证业务切换到另外一台机器上。</p><p>2.需要考虑高并发的因素，从这个点展开，架构师至少需要会用nginx，mycat，netty，redis之类的工具，以及考虑搭建实现负载均衡的集群。</p><p>3.需要把设计好的架构部署上线，或者哪怕上线动作是由运维来做，但架构师至少要知道如何把<a href="https://www.zhihu.com/search?q=nginx%E9%9B%86%E7%BE%A4&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A101086202%7D" target="_blank" rel="noopener noreferrer">nginx集群</a>等组件部署上线的活，由此架构师需要了解必须的linux命令和脚本，以及了解jenkins之类的部署工具。</p><p>4.上述技能不是简单会用即可，如果在开发部署和运行过程中由问题，架构师得负责解决。这就要求架构师不能仅仅靠看视频知道如何搭建系统，更得具备针对netty等组件的debug能力，还得能通过看日志，知道集群的运作情况，如果集群出了问题，还得知道如何快速解决。</p><p>5.不能仅仅关注技术，更得结合业务，把诸如抢红包之类的需求通过架构实现，这就要求架构师得知道各种组件的优劣，以此能选型并设计方案。</p><p>​ 做久了CRUD，有的时候公司封装的太好了。体验不到架构。从运维角度入手架构可能是个不错的选择。</p><ul><li><p>比如先从<a href="https://www.zhihu.com/search?q=ant%E8%84%9A%E6%9C%AC&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A101086202%7D" target="_blank" rel="noopener noreferrer">ant脚本</a>，jenkins脚本和linux shell脚本入手，能知道系统的部署方式，以及熟悉必备的linux调试技能。</p></li><li><p>通过观察nginx或dubbo或zookeeper配置文件，了解各组件的运作方式，并能通过这些了解高并发高可用系统里负载均衡和失效转移等配置方式。</p></li><li><p>可以观察线上相关的日志，了解系统部署的情况，以及从架构层面了解诸多组件间的关联。</p></li></ul><p>​ 在上述步骤里提到的<a href="https://www.zhihu.com/search?q=%E8%84%9A%E6%9C%AC&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A101086202%7D" target="_blank" rel="noopener noreferrer">脚本</a>和日志，在平时工作中只要上点心，应该可以看到，或者我们可以和运维人员多交流请教，上述组件部署和配置的知识也不难知道</p><p>从运维角度或许更容易理解像下面这样的题目。毕竟是实操过的。</p><ul><li><p>如何部署nginx（或其它组件），从而实现高可用？</p></li><li><p>Redis集群里，<a href="https://www.zhihu.com/search?q=%E5%AE%B9%E7%81%BE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A101086202%7D" target="_blank" rel="noopener noreferrer">容灾</a>一般是怎么做的？</p></li><li><p>Kafka<a href="https://www.zhihu.com/search?q=%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A101086202%7D" target="_blank" rel="noopener noreferrer">消息队列</a>里，如何实现消息重复？如何确保消息不被重复消费？</p></li><li><p>或者是问底层的问题，比如说下netty里的读写索引工作方式。</p></li></ul><h2 id="理想中的架构师" tabindex="-1"><a class="header-anchor" href="#理想中的架构师"><span>理想中的架构师</span></a></h2><p>​ 只不过一个头衔而已，架构师最重要的一个技能是团队缺什么他可以补什么，对外可以写PPT吹牛逼，对内可以培训员工开发技术栈、运维技术栈、测试技术栈，网络技术栈。(针对外包公司)公司前期重心在网络和机房构建和中间件各个服务上，独立充当运维角色，开发运维比例7:3左右；公司前转中的过渡期，内网稳定，项目偏少，带人驻场开发，快速反馈bug快速解决bug，客户沟通交流；公司中期的发展，开始抓团队的代码质量问题，提高公司开发效率，更多的时候充当测试角色，用自己的经验告诉开发人员，怎么样的代码容易碰到什么样的坑，要如何避免这样的坑和内部员工的培训，不仅让员工只会curd，更应该让他们去思考，自己用的数据结构是一个怎么样的存在，和一些网络知识，起码碰到connection reset by peer和空报文知道是谁的问题。公司慢慢发展开，随着项目增多，便只负责前期规划项目，交付技术方案，具体团队遇到问题再负责协助解决，如果没有问题，划水啊，开心，快乐</p><p>​ 上可九天揽月，下可五洋捉鳖。要懂产品，要会画图，沟通高效，擅长抽象，文档靠谱，代码牛P，技术通透，熟悉底层，基础牢固，调bug一流，算法不弱</p><h1 id="岗位需求和行业分析" tabindex="-1"><a class="header-anchor" href="#岗位需求和行业分析"><span>岗位需求和行业分析</span></a></h1><h2 id="职业发展" tabindex="-1"><a class="header-anchor" href="#职业发展"><span>职业发展</span></a></h2><h3 id="title-与-能力" tabindex="-1"><a class="header-anchor" href="#title-与-能力"><span>title 与 能力</span></a></h3><p>⼤⼚ vs 中⼩企业</p><p>title相对较虚，能⼒为实</p><blockquote><p>只要你能力足够，title这玩意完全可以自己造，比如：我在上家做核心研发。</p></blockquote><h3 id="行业现状" tabindex="-1"><a class="header-anchor" href="#行业现状"><span>行业现状</span></a></h3><p>研发经理 vs 架构师</p><p>在boss直聘/携程等检索：3-5年，java架构师，对比java经理，观察技术要求和薪资情况,可以发现实际企业的一些情况。</p><blockquote><p>研发经理偏管理,架构师职业发展更好,后劲足</p></blockquote><h3 id="架构师怎么定义" tabindex="-1"><a class="header-anchor" href="#架构师怎么定义"><span>架构师怎么定义</span></a></h3><p>岗位⽐较模糊，一般都俗称填坑的，哪里不行顶上去。</p><h2 id="岗位招聘案例" tabindex="-1"><a class="header-anchor" href="#岗位招聘案例"><span>岗位招聘案例</span></a></h2><h3 id="java架构师" tabindex="-1"><a class="header-anchor" href="#java架构师"><span>java架构师</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>JAVA架构师 40-70K·15薪</span></span>
<span class="line"><span>职位描述</span></span>
<span class="line"><span>1、参与相关产品需求讨论,评审和软件设计；</span></span>
<span class="line"><span>2、按照项⽬计划，按时提交⾼质量代码，完成开发任务；</span></span>
<span class="line"><span>3、规范⽂档的编写、维护，以及其他与项⽬相关⼯作；</span></span>
<span class="line"><span>4、参与个⼈征信、企业征信以及数据类核⼼业务系统架构设计及优化。</span></span>
<span class="line"><span>任职资格：</span></span>
<span class="line"><span>1、本科以上学历，计算机或相关专业；3年以上java实际项⽬开发以及架构设计经验；</span></span>
<span class="line"><span>2、有扎实的Java基础，Java多线程、并发；熟悉主流开源应⽤框架，如Spring、iBatis、XML、JSON、Maven等</span></span>
<span class="line"><span>开发技术；</span></span>
<span class="line"><span>3、熟悉设计模式、OOA/OOD；熟悉关系型数据库MySQL Oracle等，SQL优化；熟悉Memcached、MongoDB、Redis</span></span>
<span class="line"><span>等；</span></span>
<span class="line"><span>4、熟悉分布式系统的设计和应⽤，熟悉分布式、缓存、消息、负载均衡等机制和实现；</span></span>
<span class="line"><span>5、有⻛控产品类/数据采集类系统架构设计以及开发经验者优先。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="中间件架构师" tabindex="-1"><a class="header-anchor" href="#中间件架构师"><span>中间件架构师</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>中间件架构师 30-60K·16薪</span></span>
<span class="line"><span>职位描述</span></span>
<span class="line"><span>负责云中间件（API⽹关，服务框架、MQ等）的设计，核⼼代码开发，系统稳定性开发，性能优化等⼯作；</span></span>
<span class="line"><span>根据云计算平台的业务需求，完成云中间件产品的架构设计和优化⼯作；</span></span>
<span class="line"><span>帮忙业务⽅解决技术难题，⽤技术推动业务发展。</span></span>
<span class="line"><span>熟练掌握c++或者java/go并发编程 ，熟悉⾼并发，分布式通信，存储等相关技术；</span></span>
<span class="line"><span>任职资格：</span></span>
<span class="line"><span>本科以上学历，3年以上相关⼯作经验；</span></span>
<span class="line"><span>熟悉Linux操作系统、熟悉开源的中间件软件；</span></span>
<span class="line"><span>熟悉消息中间件，RPC框架，API⽹关，数据层，性能优化等相关技术经验者优先；</span></span>
<span class="line"><span>具有⾼并发相关⼯作经验优先；</span></span>
<span class="line"><span>熟悉Spring Cloud，有spring cloud相关开发及优化经验者优先；</span></span>
<span class="line"><span>熟悉service mesh，有istio和envoy开发经验者优先；</span></span>
<span class="line"><span>熟悉gRPC/thrift框架，有gRPC/thrift框架相关开发及优化经验者优先；</span></span>
<span class="line"><span>熟悉开源消息队列RabbitMQ/RocketMQ框架，有相关开发经验者优先。</span></span>
<span class="line"><span>备注：有容器k8s背景的优先，但是要求还是熟悉微服务，service mesh，spring cloud，消息队列这些中间件⽅</span></span>
<span class="line"><span>向的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="系统架构师" tabindex="-1"><a class="header-anchor" href="#系统架构师"><span>系统架构师</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>直播PaaS 系统架构师 20-40K·15薪</span></span>
<span class="line"><span>职位描述</span></span>
<span class="line"><span>1、负责直播CDN PaaS集成的开发，包括需求分析、架构设计、部署设计等⼯作；</span></span>
<span class="line"><span>2、负责头部客户业务架构梳理⼯作，针对客户整体的平台建设提供咨询、规划；</span></span>
<span class="line"><span>3、需在⼯作中具备咨询架构师能⼒，掌握但不限于⽹络、计算、存储、IaaS、PaaS等领域咨询能⼒；</span></span>
<span class="line"><span>4、跨团队整合资源，联同前台业务、职能部⻔和中后台产品/研发团队，⾼质量推进项⽬管理⼯作，共同达到项⽬⽬</span></span>
<span class="line"><span>标。</span></span>
<span class="line"><span>职位要求</span></span>
<span class="line"><span>1、熟悉直播CDN基本原理及部署架构；</span></span>
<span class="line"><span>2、有扎实的编程能⼒，有优秀的设计和代码品位；</span></span>
<span class="line"><span>3、有很好的系统分析设计能⼒，能够根据客户需以及系统架构，设计合理的技术⽅案并落地执⾏；</span></span>
<span class="line"><span>4、有较强的客户服务意识，良好的沟通和协调能⼒能⼒，具备较强的⼤项⽬管理能⼒；</span></span>
<span class="line"><span>5、具备较强的学习能⼒和⾃驱⼒，具备创新性思维和深度思考能⼒；</span></span>
<span class="line"><span>6、了解容器/VM虚拟化技术、Kubernetes、Mesos、Yarn、Docker等项⽬。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在线教育 ⽀付系统、结算系统、确认收⼊体系、⼤规模统计</p><p>⾦融系统 分布式通讯框架改造、配置中⼼、⽹关、权限认证、资源保护 电商中台 部署发布体系、监控体系、中台系统规划（中台 - 去中台⽹格化 -_-!)</p><h2 id="怎么做" tabindex="-1"><a class="header-anchor" href="#怎么做"><span>怎么做</span></a></h2><h3 id="清晰的技术栈" tabindex="-1"><a class="header-anchor" href="#清晰的技术栈"><span>清晰的技术栈</span></a></h3><p>⼤纲体系 - 横向维度 架构演进课 - 纵向维度 要亲⾃动⼿梳理 - 个体差异，融会贯通，知⼰知彼</p><h3 id="工具" tabindex="-1"><a class="header-anchor" href="#工具"><span>⼯具</span></a></h3><p>⼀切皆是⼯具，多多益善 学会再忘掉，构建索引 语⾔本身：集合、线程、甚⾄其他语⾔ lua，shell，python 框架：spring、springboot、dubbo、netty 设计⼯具：pd，uml 版本管理：git 项⽬管理：maven，gradle 中间件: redis，mq，mongo ……</p><h3 id="设计能力" tabindex="-1"><a class="header-anchor" href="#设计能力"><span>设计能⼒</span></a></h3><p>设计模式 - 简单直⽩，但不要脱离应⽤ 来⾃常⽤框架的设计 - 艰苦⽽漫⻓ ⾃⼰尝试思索和改进 - 费脑细胞</p><h3 id="架构思维" tabindex="-1"><a class="header-anchor" href="#架构思维"><span>架构思维</span></a></h3><p>⽇常的经验积累和总结 知⾏合⼀，做之前，先考虑意义 原⽣优于定制，约定⼤于配置 什么都是，最后会沦落到什么都不是 控制技术欲，不要瞎折腾 留下扩展，但不要想到100年后 没有最好的，只有最合适的 够⽤就好，玩的越花，⻛险越⼤ ⼤巧不⼯，简约最美</p><h3 id="圈子" tabindex="-1"><a class="header-anchor" href="#圈子"><span>圈⼦</span></a></h3><p>⼈脉很重要！</p><h3 id="迈出第一步" tabindex="-1"><a class="header-anchor" href="#迈出第一步"><span>迈出第⼀步</span></a></h3><p>先从0-1，再考虑100</p><h2 id="几个问题" tabindex="-1"><a class="header-anchor" href="#几个问题"><span>⼏个问题</span></a></h2><p><strong>3-5年，可以做架构吗？</strong> 初级架构师，中⼩企业作为切⼊点，有试错的资本 最好的时光 <strong>架构与资深开发的区别？</strong> 基础底⼦要求基本⼀致，⼯作内容有所偏差 <strong>⾮计算机专业可以吗？</strong> 可以！ <strong>对学历有没有要求？</strong> 有影响，⾮绝对 <strong>35岁是职业终点吗？</strong> 错！看职位，还在码砖的要警惕 3-5年是转型关键阶段，要开始着⼿布局。 从体⼒类⼯作⾛向设计类、管理类⼯作 ⽬标：让⼯作变的不可替代</p><h1 id="如何卷成百万架构师" tabindex="-1"><a class="header-anchor" href="#如何卷成百万架构师"><span>如何卷成百万架构师</span></a></h1><h2 id="架构师成长要素" tabindex="-1"><a class="header-anchor" href="#架构师成长要素"><span>架构师成长要素</span></a></h2><h3 id="思维决定路径" tabindex="-1"><a class="header-anchor" href="#思维决定路径"><span><strong>思维决定路径</strong></span></a></h3><ul><li>程序=逻辑+翻译+实现</li><li>架构=判断+取舍+创新</li></ul><h3 id="架构师的定位" tabindex="-1"><a class="header-anchor" href="#架构师的定位"><span><strong>架构师的定位</strong></span></a></h3><ul><li>架构师是<strong>业务</strong>和<strong>技术</strong>之前的桥梁</li><li>架构师不能只顾技术，不懂业务，很容易两头不讨好。</li><li>你做出来的东西要给别人说怎么用。比如你整合了activiti，要负责给下面的开发兄弟结合业务使用。</li></ul><h3 id="架构师能力模型" tabindex="-1"><a class="header-anchor" href="#架构师能力模型"><span><strong>架构师能力模型</strong></span></a></h3><p><img src="`+i+'" alt="image-20211216202120194"></p><p><strong>架构师也分层级</strong></p><p><img src="'+p+'" alt="image-20211216202148291"></p><h2 id="架构设计理论基础" tabindex="-1"><a class="header-anchor" href="#架构设计理论基础"><span>架构设计理论基础</span></a></h2><p><strong>什么是架构</strong></p><blockquote><p><strong>【软件架构（Software Architecture）】</strong></p><p>指软件系统的“基础结构”，创造这些基础结构的准则，以及对这些结构的描述。</p><p>​ -- 来自《维基百科》</p></blockquote><p><img src="'+t+'" alt="image-20211216203359454"></p><p><strong>为什么做架构设计？</strong></p><blockquote><p>As the <strong>size</strong> of software systems increases, the algorithms and data structures of the computation no longer constitute the major design problems. When systems are constructed from many components, the <strong>organization</strong> of the overall system—the software architecture—presents a new set of design problems.</p><p>​ ----卡内基·梅隆大学，Mary Shaw，David Garlan</p></blockquote><p>核心：随着系统规模的增长，数据结构和算法不再是主要问题，整个系统的结构成为首要问题</p><h2 id="架构设计方法论" tabindex="-1"><a class="header-anchor" href="#架构设计方法论"><span>架构设计方法论</span></a></h2><h3 id="指导方法" tabindex="-1"><a class="header-anchor" href="#指导方法"><span><strong>指导方法</strong></span></a></h3><p><img src="'+o+'" alt="image-20211216202607872"></p><h3 id="理想vs现实" tabindex="-1"><a class="header-anchor" href="#理想vs现实"><span><strong>理想VS现实</strong></span></a></h3><p><img src="'+c+'" alt="image-20211216202624442"></p><h3 id="架构设计原则" tabindex="-1"><a class="header-anchor" href="#架构设计原则"><span><strong>架构设计原则</strong></span></a></h3><p><img src="'+l+'" alt="image-20211216202644806"></p><p><img src="'+h+'" alt="image-20211216205106735"></p><p><img src="'+d+'" alt="image-20211216205818810"></p><p><strong>架构设计原则-合适</strong></p><p><img src="'+g+'" alt="image-20211216202657992"></p><p><strong>架构设计原则-简单</strong></p><p><img src="'+m+'" alt="image-20211216202741467"></p>',143)]))}const f=s(u,[["render",b]]),E=JSON.parse('{"path":"/chuxin/07_%E6%96%B9%E5%90%91/02_%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/02_%E6%9E%B6%E6%9E%84%E6%80%9D%E6%83%B3/","title":"【深入代码系列】手牵手一起学架构思想","lang":"zh-CN","frontmatter":{"typora-root-url":"../../../.vuepress/public","title":"【深入代码系列】手牵手一起学架构思想","id":"code-deep-framework-mind.html","tags":["方向","架构思想"],"categories":["编程"],"keywords":"语法,基础,Java,微服务,编程,数据存储","description":"技术一直在变，从单体到微服务，我们要对宏观的变化做到心中有数，才不会被趋势所抛弃。","date":"2024-11-13T11:44:52.000Z","createTime":"2025/08/23 15:49:32","permalink":"/chuxin/07_方向/02_系统设计/02_架构思想/","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【深入代码系列】手牵手一起学架构思想\\",\\"image\\":[\\"https://zuoer96.github.io/docs/docs/images/image-20211216202120194.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20211216202148291.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20211216203359454.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20211216202607872.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20211216202624442.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20211216202644806.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20211216205106735.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20211216205818810.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20211216202657992.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20211216202741467.png\\"],\\"datePublished\\":\\"2024-11-13T11:44:52.000Z\\",\\"dateModified\\":\\"2025-09-03T02:00:28.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://zuoer96.github.io/docs/docs/chuxin/07_%E6%96%B9%E5%90%91/02_%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/02_%E6%9E%B6%E6%9E%84%E6%80%9D%E6%83%B3/"}],["meta",{"property":"og:site_name","content":"编程备忘录"}],["meta",{"property":"og:title","content":"【深入代码系列】手牵手一起学架构思想"}],["meta",{"property":"og:description","content":"技术一直在变，从单体到微服务，我们要对宏观的变化做到心中有数，才不会被趋势所抛弃。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://zuoer96.github.io/docs/docs/images/image-20211216202120194.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-03T02:00:28.000Z"}],["meta",{"property":"article:tag","content":"架构思想"}],["meta",{"property":"article:tag","content":"方向"}],["meta",{"property":"article:published_time","content":"2024-11-13T11:44:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-03T02:00:28.000Z"}]]},"readingTime":{"minutes":19.1,"words":5731},"git":{"createdTime":1755938647000,"updatedTime":1756864828000,"contributors":[{"name":"zuoer96","username":"zuoer96","email":"31268184+zuoer96@users.noreply.github.com","commits":2,"avatar":"https://avatars.githubusercontent.com/zuoer96?v=4","url":"https://github.com/zuoer96"}]},"filePathRelative":"notes/00-方向/02_系统设计/02_架构思想.md","headers":[],"bulletin":true}');export{f as comp,E as data};
