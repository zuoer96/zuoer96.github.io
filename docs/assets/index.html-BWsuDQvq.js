import{_ as t,c as s,e as i,o as a}from"./app-CSZEpVl5.js";const l="/docs/images/image-20250416051723112.png",n={};function r(o,e){return a(),s("div",null,e[0]||(e[0]=[i('<h3 id="restful" tabindex="-1"><a class="header-anchor" href="#restful"><span>Restful</span></a></h3><p>我们的案例是基于当前最为主流的前后端分离模式进行开发。</p><p><img src="'+l+`" alt="image-20250416051723112"></p><p>在前后端分离的开发模式中，前后端开发人员都需要根据提前定义好的接口文档，来进行前后端功能的开发。</p><blockquote><p>后端开发人员：必须严格遵守提供的接口文档进行后端功能开发（保障开发的功能可以和前端对接）</p></blockquote><p>而在前后端进行交互的时候，我们需要基于当前主流的REST风格的API接口进行交互。</p><p><strong>什么是REST风格呢?</strong></p><ul><li>REST（Representational State Transfer），表述性状态转换，它是一种软件架构风格。</li></ul><p><strong>传统URL风格如下：</strong></p><div class="language-url line-numbers-mode" data-highlighter="shiki" data-ext="url" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-url"><span class="line"><span>http://localhost:8080/user/getById?id=1     GET：查询id为1的用户</span></span>
<span class="line"><span>http://localhost:8080/user/saveUser         POST：新增用户</span></span>
<span class="line"><span>http://localhost:8080/user/updateUser       POST：修改用户</span></span>
<span class="line"><span>http://localhost:8080/user/deleteUser?id=1  GET：删除id为1的用户</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到，原始的传统URL呢，定义比较复杂，而且将资源的访问行为对外暴露出来了。</p><p><strong>基于REST风格URL如下：</strong></p><div class="language-url line-numbers-mode" data-highlighter="shiki" data-ext="url" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-url"><span class="line"><span>http://localhost:8080/users/1  GET：查询id为1的用户</span></span>
<span class="line"><span>http://localhost:8080/users    POST：新增用户</span></span>
<span class="line"><span>http://localhost:8080/users    PUT：修改用户</span></span>
<span class="line"><span>http://localhost:8080/users/1  DELETE：删除id为1的用户</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中总结起来，就一句话：通过URL定位要操作的资源，通过HTTP动词(请求方式)来描述具体的操作。</p><blockquote><p>因为传统模式针对资源可能有不同的命名，考虑到项目会经过多人的维护，每个人的风格不一样，比如getById,可能会有人增加findById，这样一个<code>查询资源</code>就维护了2个接口。而按照restful风格的，就只会有一个接口。相当于通过约定形成一个对项目成长维护更好的风格。</p></blockquote><p>在REST风格的URL中，通过四种请求方式，来操作数据的增删改查。</p><ul><li>GET ： 查询</li><li>POST ：新增</li><li>PUT ：修改</li><li>DELETE ：删除</li></ul><p>我们看到如果是基于REST风格，定义URL，URL将会更加简洁、更加规范、更加优雅。</p><blockquote><p>注意事项：</p><ul><li>REST是风格，是约定方式，约定不是规定，可以打破</li><li>描述模块的功能通常使用复数，也就是加s的格式来描述，表示此类资源，而非单个资源。如：users、emps、books…</li></ul></blockquote>`,19)]))}const c=t(n,[["render",r]]),d=JSON.parse('{"path":"/chuxin/07_%E6%96%B9%E5%90%91/05_%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/04_Restful/","title":"【代码规范系列】restful代码风格","lang":"zh-CN","frontmatter":{"typora-root-url":"../../../.vuepress/public","title":"【代码规范系列】restful代码风格","id":"code-restful.html","tags":["方向","代码规范","restful"],"categories":["编程"],"keywords":"语法,基础,Java,微服务,编程,数据存储","description":"代码规范","date":"2025-04-16T05:16:28.000Z","createTime":"2025/08/23 15:49:32","permalink":"/chuxin/07_方向/05_代码规范/04_Restful/","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【代码规范系列】restful代码风格\\",\\"image\\":[\\"https://zuoer96.github.io/docs/docs/images/image-20250416051723112.png\\"],\\"datePublished\\":\\"2025-04-16T05:16:28.000Z\\",\\"dateModified\\":\\"2025-09-03T02:00:28.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://zuoer96.github.io/docs/docs/chuxin/07_%E6%96%B9%E5%90%91/05_%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/04_Restful/"}],["meta",{"property":"og:site_name","content":"编程备忘录"}],["meta",{"property":"og:title","content":"【代码规范系列】restful代码风格"}],["meta",{"property":"og:description","content":"代码规范"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://zuoer96.github.io/docs/docs/images/image-20250416051723112.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-03T02:00:28.000Z"}],["meta",{"property":"article:tag","content":"restful"}],["meta",{"property":"article:tag","content":"代码规范"}],["meta",{"property":"article:tag","content":"方向"}],["meta",{"property":"article:published_time","content":"2025-04-16T05:16:28.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-03T02:00:28.000Z"}]]},"readingTime":{"minutes":2.19,"words":658},"git":{"createdTime":1755938647000,"updatedTime":1756864828000,"contributors":[{"name":"zuoer96","username":"zuoer96","email":"31268184+zuoer96@users.noreply.github.com","commits":2,"avatar":"https://avatars.githubusercontent.com/zuoer96?v=4","url":"https://github.com/zuoer96"}]},"filePathRelative":"notes/00-方向/05_代码规范/04_Restful.md","headers":[],"bulletin":true}');export{c as comp,d as data};
