import{_ as i,c as a,e as n,o as l}from"./app-asHTIEiU.js";const h="/docs/images/image-20230928164130440.png",e="/docs/images/image-20230928164138957.png",p="/docs/images/image-20210322103040674.png",t="/docs/images/image-20220604163905645.png",k="/docs/images/image-20220604164221952.png",d="/docs/images/image-20220604164549468.png",r="/docs/images/image-20220604165145141.png",g="/docs/images/image-20220604165525384.png",c="/docs/images/image-20210322133820431.png",o="/docs/images/image-20210322135008844.png",y="/docs/images/image-20220605081910952.png",m="/docs/images/image-20220605082130838.png",A="/docs/images/image-20220605082248826.png",D="/docs/images/image-20220605082403503.png",u="/docs/images/image-20220605082528328.png",v="/docs/images/image-20220605082625624.png",B="/docs/images/image-20220605081532806.png",b="/docs/images/image-20220605083227428.png",C="/docs/images/image-20220605083513690.png",E="/docs/images/image-20220605083715043.png",f="/docs/images/image-20220605084247101.png",_="/docs/images/image-20220605084406430.png",x="/docs/images/image-20220605084450167.png",F="/docs/images/image-20220606182947329.png",j="/docs/images/image-20210322174708164.png",S="/docs/images/image-20230928164236853.png",X="/docs/images/image-20210322175549121.png",M="/docs/images/image-20210322175609021.png",G="/docs/images/image-20220606183542274.png",z="/docs/images/image-20210322172801851.png",q="/docs/images/image-20210322175628817.png",J="/docs/images/image-20210329105800328.png",T="/docs/images/image-20210329105546453.png",P="/docs/images/image-20220606183820312.png",O="/docs/images/image-20220606184302779.png",w="/docs/images/image-20220606184358909.png",K="/docs/images/image-20210329104743038.png",R="/docs/images/image-20220606184050633.png",L="/docs/images/image-20220606184820692.png",V="/docs/images/image-20220606184610285.png",I="/docs/images/image-20220606184637200.png",N="/docs/images/image-20220606184659735.png",H="/docs/images/image-20220606184716425.png",U="/docs/images/image-20210329114350327.png",W="/docs/images/image-20210329114932971.png",Z="/docs/images/image-20220606185129410.png",Y="/docs/images/image-20220606185153807.png",$="/docs/images/image-20220606185211781.png",Q="/docs/images/image-20220606185227953.png",ss="/docs/images/image-20210325135403075.png",is="/docs/images/image-20210329093556986.png",as="/docs/images/image-20210324101225120.png",ns="/docs/images/image-20210324103100187.png",ls="/docs/images/image-20210324104530470.png",hs="/docs/images/image-20210324105125093.png",es="/docs/images/image-20200421111048271.png",ps="/docs/images/image-20210325104219429.png",ts="/docs/images/image-20200421114248164.png",ks="/docs/images/image-20220830183650282.png",ds="/docs/images/image-20220830184731968.png",rs="/docs/images/image-20220830185043741.png",gs="/docs/images/image-20220830185209013.png",cs="/docs/images/image-20210325135056497.png",os="/docs/images/image-20210330111421370.png",ys="/docs/images/image-20210326141144524.png",ms="/docs/images/image-20210326141912946.png",As="/docs/images/image-20210326141956360.png",Ds="/docs/images/image-20210330111458021.png",us="/docs/images/image-20210330143017610.png",vs="/docs/images/image-20210326152043324.png",Bs="/docs/images/image-20210401175034807.png",bs="/docs/images/image-20230928164252806.png",Cs="/docs/images/image-20210331111333565.png",Es="/docs/images/image-20210330161050813.png",fs="/docs/images/image-20210330164000447.png",_s="/docs/images/image-20210331100234007.png",xs="/docs/images/image-20210331091443372.png",Fs="/docs/images/image-20220606075858080.png",js="/docs/images/image-20210331153504656.png",Ss="/docs/images/image-20210331160410760.png",Xs="/docs/images/image-20210331164644697.png",Ms="/docs/images/image-20230928164306371.png",Gs="/docs/images/image-20210331114434625.png",zs="/docs/images/image-20210331114645139.png",qs="/docs/images/image-20220830175025468.png",Js="/docs/images/image-20220830180020170.png",Ts="/docs/images/image-20220830175226283.png",Ps="/docs/images/image-20220830175317648.png",Os="/docs/images/image-20220830180208969.png",ws="/docs/images/image-20220830180550626.png",Ks="/docs/images/image-20220830181511968.png",Rs="/docs/images/image-20220830181222212.png",Ls="/docs/images/image-20220830182151723.png",Vs="/docs/images/image-20220830183048287.png",Is="/docs/images/image-20220830182708026.png",Ns="/docs/images/image-20220830182854330.png",Hs="/docs/images/image-20220830183016790.png",Us="/docs/images/image-20220605092936434.png",Ws="/docs/images/image-20220605093119151.png",Zs="/docs/images/image-20200429102816516.png",Ys="/docs/images/image-20220915201654499.png",$s="/docs/images/image-20220915201753250.png",Qs="/docs/images/image-20220915201850728.png",si="/docs/images/image-20200429235159875.png",ii="/docs/images/image-20200429235422031.png",ai="/docs/images/image-20200430001554975.png",ni="/docs/images/image-20200430001725601.png",li="/docs/images/image-20210406165830911.png",hi="/docs/images/image-20210406170434507.png",ei="/docs/images/image-20220915204744944.png",pi="/docs/images/image-20210406173628609.png",ti="/docs/images/image-20210406174157937.png",ki="/docs/images/image-20210407085100468.png",di="/docs/images/image-20220915205359020.png",ri="/docs/images/image-20210407084211962.png",gi="/docs/images/image-20220915205958150.png",ci="/docs/images/image-20210402154906657.png",oi="/docs/images/image-20210402160801656.png",yi="/docs/images/image-20220915210947125.png",mi="/docs/images/image-20230928164203175.png",Ai="/docs/images/image-20230928164148445.png",Di="/docs/images/image-20210407153159222.png",ui="/docs/images/image-20200506191455510.png",vi="/docs/images/image-20210407180815914.png",Bi="/docs/images/image-20210402114507424.png",bi="/docs/images/image-20220915212651198.png",Ci="/docs/images/image-20220915212341529.png",Ei="/docs/images/image-20220915212353523.png",fi="/docs/images/image-20220915212359521.png",_i="/docs/images/image-20220915212403718.png",xi="/docs/images/image-20220605090010628.png",Fi="/docs/images/image-20220605085953282.png",ji="/docs/images/image-20220605085929352.png",Si="/docs/images/image-20220605085843642.png",Xi="/docs/images/image-20220605085816651.png",Mi="/docs/images/image-20210408162538333.png",Gi="/docs/images/image-20210408163439858.png",zi="/docs/images/image-20210408163653183.png",qi="/docs/images/image-20210408163949306.png",Ji="/docs/images/image-20210408164152924.png",Ti="/docs/images/image-20210408172308650.png",Pi="/docs/images/image-20210408172408015.png",Oi="/docs/images/image-20210408172501063.png",wi="/docs/images/image-20210408172628499.png",Ki="/docs/images/image-20210408173001294.png",Ri="/docs/images/image-20210408173408882.png",Li="/docs/images/image-20210408173756291.png",Vi="/docs/images/image-20210408173912968.png",Ii="/docs/images/image-20210408180257479.png",Ni="/docs/images/image-20210408180340673.png",Hi="/docs/images/image-20210408180429177.png",Ui="/docs/images/image-20210408180505228.png",Wi="/docs/images/image-20210408180546815.png",Zi="/docs/images/image-20210408180621878.png",Yi="/docs/images/image-20210408180647712.png",$i="/docs/images/image-20210408180717968.png",Qi="/docs/images/image-20210408180822553.png",sa="/docs/images/image-20210408181044095.png",ia="/docs/images/image-20210408181203637.png",aa="/docs/images/image-20210408182302407.png",na="/docs/images/image-20210408182416738.png",la="/docs/images/image-20210408185109798.png",ha="/docs/images/image-20210408185136455.png",ea="/docs/images/image-20220606080320531.png",pa="/docs/images/image-20220606080750238.png",ta="/docs/images/image-20220606080928760.png",ka="/docs/images/image-20220606081229638.png",da="/docs/images/image-20220606081256030.png",ra="/docs/images/image-20220606081431416.png",ga="/docs/images/image-20220606081544716.png",ca="/docs/images/image-20220606081555781.png",oa="/docs/images/image-20220606081613952.png",ya="/docs/images/image-20220606081625438.png",ma="/docs/images/image-20220606081630749.png",Aa="/docs/images/image-20220606081638015.png",Da="/docs/images/image-20220606081654137.png",ua="/docs/images/image-20220606082300923.png",va="/docs/images/image-20220606082334018.png",Ba="/docs/images/image-20220606082346125.png",ba="/docs/images/image-20220606082620699.png",Ca="/docs/images/image-20220606082633311.png",Ea="/docs/images/image-20220830190141761.png",fa="/docs/images/image-20220830190632245.png",_a="/docs/images/image-20220606083423253.png",xa="/docs/images/image-20220830191111078.png",Fa="/docs/images/image-20220606083516498.png",ja="/docs/images/image-20220830191437756.png",Sa="/docs/images/image-20220830191504682.png",Xa="/docs/images/image-20220830192028935.png",Ma="/docs/images/image-20220606083624401.png",Ga="/docs/images/image-20220606083630876.png",za="/docs/images/image-20220606083638583.png",qa="/docs/images/image-20220606083649037.png",Ja="/docs/images/image-20220915195851918.png",Ta="/docs/images/image-20220915195903417.png",Pa="/docs/images/image-20220915195919563.png",Oa="/docs/images/image-20220915195953453.png",wa="/docs/images/image-20220915200019581.png",Ka="/docs/images/image-20220915200032331.png",Ra="/docs/images/image-20220915200052275.png",La="/docs/images/image-20220606083726599.png",Va="/docs/images/image-20220606084526922.png",Ia="/docs/images/image-20220606084502784.png",Na="/docs/images/image-20220606083837307.png",Ha="/docs/images/image-20220606083856748.png",Ua="/docs/images/image-20220915200227524.png",Wa="/docs/images/image-20220915200243057.png",Za="/docs/images/image-20220915200254116.png",Ya="/docs/images/image-20220606084817434.png",$a="/docs/images/image-20220606083946248.png",Qa="/docs/images/image-20220606083952669.png",sn="/docs/images/image-20220606084000260.png",an="/docs/images/image-20220606084037591.png",nn="/docs/images/image-20220606084732456.png",ln="/docs/images/image-20220606084714400.png",hn="/docs/images/image-20220606163743486.png",en="/docs/images/image-20220606165142149.png",pn="/docs/images/image-20220606165212147.png",tn="/docs/images/image-20230928164211501.png",kn="/docs/images/image-20220830192823115.png",dn="/docs/images/image-20220606170033631.png",rn="/docs/images/image-20220606170053073.png",gn="/docs/images/image-20220606170126633.png",cn="/docs/images/image-20220606170259604.png",on="/docs/images/image-20220606170318998.png",yn="/docs/images/image-20220606170342853.png",mn="/docs/images/image-20220606170405414.png",An="/docs/images/image-20220606170506060.png",Dn="/docs/images/image-20220606170644174.png",un="/docs/images/image-20220606170655137.png",vn="/docs/images/image-20220606170705947.png",Bn="/docs/images/image-20220606170738109.png",bn="/docs/images/image-20220606170751054.png",Cn="/docs/images/image-20220606170801125.png",En="/docs/images/image-20220606170822629.png",fn="/docs/images/image-20220606170838535.png",_n="/docs/images/image-20220915193819177.png",xn="/docs/images/image-20220606170913027.png",Fn="/docs/images/image-20220606171003239.png",jn="/docs/images/image-20220606171016873.png",Sn="/docs/images/image-20220606171030117.png",Xn="/docs/images/image-20220606171038705.png",Mn="/docs/images/image-20220606171049525.png",Gn="/docs/images/image-20220606171109911.png",zn="/docs/images/image-20220606171123052.png",qn="/docs/images/image-20220915214032806.png",Jn="/docs/images/image-20220915214236019.png",Tn="/docs/images/image-20220915214252993.png",Pn="/docs/images/image-20220915214302866.png",On="/docs/images/image-20220915214333870.png",wn="/docs/images/image-20220915214346775.png",Kn="/docs/images/image-20220915214405866.png",Rn="/docs/images/image-20220915214453339.png",Ln="/docs/images/image-20220915214833821.png",Vn="/docs/images/image-20220915214941286.png",In="/docs/images/image-20220915215118778.png",Nn="/docs/images/image-20220915215234078.png",Hn="/docs/images/image-20220915215315023.png",Un="/docs/images/image-20220915215326081.png",Wn="/docs/images/image-20220915215338170.png",Zn="/docs/images/image-20220915215342581.png",Yn="/docs/images/image-20220915215346952.png",$n="/docs/images/image-20220915215358344.png",Qn="/docs/images/image-20220915215402078.png",sl="/docs/images/image-20220915215406268.png",il="/docs/images/image-20220915215415667.png",al="/docs/images/image-20220915215424924.png",nl="/docs/images/image-20220915215439536.png",ll="/docs/images/image-20220915215448563.png",hl="/docs/images/image-20220915215454259.png",el="/docs/images/image-20220915215503575.png",pl="/docs/images/image-20220915215509298.png",tl="/docs/images/image-20220915215519057.png",kl="/docs/images/image-20220915215524845.png",dl="/docs/images/image-20220915215538130.png",rl="/docs/images/image-20220915215549376.png",gl="/docs/images/image-20220915215617009.png",cl="/docs/images/image-20220915215621819.png",ol="/docs/images/image-20220915220840055.png",yl="/docs/images/image-20220915215703916.png",ml="/docs/images/image-20220915215735978.png",Al="/docs/images/image-20220915215808314.png",Dl="/docs/images/image-20220915215843384.png",ul="/docs/images/image-20220915215932563.png",vl="/docs/images/image-20220915221641646.png",Bl="/docs/images/image-20220915221712247.png",bl="/docs/images/image-20220915221724999.png",Cl="/docs/images/image-20220915221735595.png",El="/docs/images/image-20220915221752545.png",fl="/docs/images/image-20220915221833571.png",_l="/docs/images/image-20220915221842901.png",xl="/docs/images/image-20220915221847115.png",Fl="/docs/images/image-20220915221928684.png",jl="/docs/images/image-20220915221932888.png",Sl="/docs/images/image-20220915223204417.png",Xl="/docs/images/image-20220915223337036.png",Ml="/docs/images/image-20220915223340666.png",Gl="/docs/images/image-20220915223510008.png",zl="/docs/images/image-20220915223725266.png",ql="/docs/images/image-20220915223833230.png",Jl="/docs/images/image-20220915223853427.png",Tl="/docs/images/image-20220915223857345.png",Pl="/docs/images/image-20220915223904353.png",Ol="/docs/images/image-20220915224152947.png",wl="/docs/images/image-20220915224157923.png",Kl="/docs/images/image-20220915224201382.png",Rl="/docs/images/image-20220915224243764.png",Ll="/docs/images/image-20220915224255030.png",Vl="/docs/images/image-20220915224426867.png",Il="/docs/images/image-20220915224441718.png",Nl="/docs/images/image-20220915224513988.png",Hl="/docs/images/image-20220915224528841.png",Ul="/docs/images/image-20220915224556272.png",Wl="/docs/images/image-20220915224637051.png",Zl="/docs/images/image-20220915224744560.png",Yl="/docs/images/image-20220915224812494.png",$l="/docs/images/image-20220915224856682.png",Ql="/docs/images/image-20220915224959101.png",sh={};function ih(ah,s){return l(),a("div",null,s[0]||(s[0]=[n(`<p>当然，可能重启大法解决一切😆 ，但是难保不会再出现这种问题。<s>知其错误也要知其why错误</s>。</p><p>CPU的负载为什么突然升高？</p><p>生产环境应用为什么突然卡住？</p><p>日志为什么没有输出？</p><p>程序对用户的请求为什么没有响应？</p><p>让我们走进JVM的内心世界。</p><h1 id="学习目标" tabindex="-1"><a class="header-anchor" href="#学习目标"><span>学习目标</span></a></h1><ul><li>能够说出java体系、知道什么是java虚拟机、运行原理</li><li>能够知道字节码的结构，包含哪些信息，怎么分布的</li><li>能够掌握jvm运行时数据区都是怎么划分的，各个部分会有什么异常</li><li>能够说出类的加载过程，每个阶段都做了什么事情</li><li>能够说明类的创建过程</li><li>能够说出垃圾回收策略、机制和原理 、垃圾回收三种算法的优劣</li><li>能够说出G1垃圾回收ygc和fullgc以及与JDK8垃圾回收器区别和共同点</li></ul><h1 id="_1、虚拟机概述" tabindex="-1"><a class="header-anchor" href="#_1、虚拟机概述"><span>1、虚拟机概述</span></a></h1><h2 id="_1-1-发展历程" tabindex="-1"><a class="header-anchor" href="#_1-1-发展历程"><span>1.1 发展历程</span></a></h2><h3 id="_1-1-1-java往事" tabindex="-1"><a class="header-anchor" href="#_1-1-1-java往事"><span>1.1.1 java往事</span></a></h3><p>​ Java诞生在一群懒惰、急躁而傲慢的程序天才之中。</p><p>​ 1990年12月，Sun的工程师Patrick Naughton被当时糟糕的Sun C++工具折磨的快疯了。他大声抱怨，并威胁要离开Sun转投当时在Steve Jobs领导之下的NeXT公司。领导层为了留住他，给他一个机会，启动了一个叫做Stealth（秘密行动）的项目。</p><p>​ 随着James Gosling等人的加入，这个项目更名为Green。其目标是使用C++为嵌入式设备开发一种新的基础平台技术，James Gosling本人负责开发一个编辑器。正如人们事后分析的那样，这位天才的程序员太懒惰，所以没有把C++学好，开发中碰了一头包。于是他决定开发一种新的编程语言。他把这种语言命名为C++++--，意思是C++ “加上一些好东西，减去一些坏东西”。显然这个糟糕的名字不可能长久，于是很快这种颇受同伴喜爱的小语言被命名为Oak。</p><p>​ 到了1992年9月，Oak语言连同Green OS和一些应用程序一起发布在称做Start 7的小设备上，有了第一次精彩的亮相。随后，Sun开了一家名为FirstPerson的公司，整个团队被转移到这家公司里研发机顶盒，以投标时代华纳公司的一个项目。这帮天才被技术狂热所鼓舞，开发出了一个高交互性的设备，结果没想到时代华纳公司和有线电视服务商并不愿意用户拥有那么大的控制权，从而在竞标之战中败给了SGI。</p><p>​ Sun无奈地关闭了FirstPerson，召回了整个团队，java的出路却没有因此而断送，随着互联网发展的涌动，java开始离开嵌入式小设备，往互联网倾斜。后Oak被命名为Java，回到了激情澎湃的IT产业，抓住互联网的大潮，从此一发不可收拾。</p><p>​ 剩下的事情，大家都知道了……</p><h3 id="_1-1-2-java版本迭代" tabindex="-1"><a class="header-anchor" href="#_1-1-2-java版本迭代"><span>1.1.2 java版本迭代</span></a></h3><ul><li>1991 年，James Gosling 博士发布产品 Oak（ 橡树），这是 Java 语言的前身。</li><li>1995 年，Oak 语言改名为 Java。</li><li>1996 年，JDK（Java开发所使用的工具包）1.0 发布，提供了纯解释执行的 Java 虚拟机实现,使用外挂进行JIT：Sun JDK 1.0 <strong>Classic VM。</strong></li><li>1997 年，JDK1.1 发布，代表技术有：JDBC、JavaBeans、内部类、反射。AWT、RMI</li><li>1998 年，JDK1.2 发布，Java 技术体系被拆分为 J2SE、J2EE、J2ME 三大体系。加入Swing Collections.<strong>Solaris Exact VM</strong>。JIT 解释器混合、Accurate Memory Management：精确内存管理，数据类型敏感、提升的GC性能</li><li>2000 年，JDK1.3 发布，默认的 Java 虚拟机由 Sun Classic VM 改为 <strong>HotSopt</strong>。加入JavaSound</li><li>2002 年，JDK1.4 发布，Java 真正走向成熟，代表技术有：正则表达式、NIO、IPV6、日志API、加密类库、Assert等。Classic VM退出历史舞台.</li><li>2004 年，JDK5.0 发布，对语法易用性做了很大改进，新增了泛型、枚举、装箱、枚举、可变长的参数、Foreach循环 等，代表技术有：并发包等。</li><li>2006 年，JDK6.0 发布，将 J2EE/J2SE/J2ME 的命名方式改为 Java SE 6、Java EE 6、Java ME 6。脚本语言支持、JDBC 4.0、Java编译器 API。</li><li>2009 年，Sun 公司因为经营不善被 Oracle 公司收购。</li><li>2011 年，JDK7 发布。延误项目推出到JDK8 、G1 (GC收集器)、动态语言增强 、64位系统中的压缩指针 、NIO 2.0</li><li>2013 年，JDK8（LTS） 发布，函数式编程，lamda表达式，语法增强 Java类型注解。</li><li>2017年，JDK9。模块化。</li><li>2018年，JDK 10，11（LTS）正式发布</li><li>2019年，JDK 12，13</li><li>2020年，JDK 14，15</li><li>2021年，JDK 16，17（LTS）</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>附：sun与微软的轶事</span></span>
<span class="line"><span>java诞生的1995年，正是微软在软件产业地位达到巅峰的时代。但是这个初出茅庐的毛头小子硬是引起了微软帝国的关注。所以96年微软就向sun申请了java认证。</span></span>
<span class="line"><span>微软的加持确实推动了人们对java的信心和兴趣。</span></span>
<span class="line"><span>但是好景不长，从1997年发布Visual J++的第一个版本开始，微软就开始在Java中掺入自己的私有扩展。这毫无疑问引起Sun的高度重视。</span></span>
<span class="line"><span>1997年10月，Sun向美国加州地方法院起诉微软公司违反两公司就微软使用Java技术所签定的合同，指控微软公司在自己的Java产品中做了“不恰当的修改”，违反了合同中承诺向用户提供Java兼容产品的条款。</span></span>
<span class="line"><span>这一官司一直打到了2001年1月双方达成和解。</span></span>
<span class="line"><span>到了2001年7月，微软公布新版的Windows XP将不再支持Sun的JVM，并且推出了.NET平台与Java分庭抗礼。</span></span>
<span class="line"><span>当然目前.net用的人少了，这是后话。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+h+'" alt="image-20230928164130440"></p><h3 id="_1-1-3-两种jdk" tabindex="-1"><a class="header-anchor" href="#_1-1-3-两种jdk"><span>1.1.3 两种jdk</span></a></h3><p>openjdk vs oraclejdk：</p><ol><li>Oracle JDK将更多地关注稳定性，它重视更多的企业级用户，而OpenJDK经常发布以支持其他特性，不太稳定。</li><li>Oracle JDK支持长期发布的更改（LTS），而Open JDK仅支持计划和完成下一个发行版。</li><li>Oracle JDK根据二进制代码许可协议获得许可，而OpenJDK根据GPL v2许可获得许可。</li><li>2019年1月之后发布的Oracle Java SE 8的公开更新将无法用于商业，但是，OpenJDK是完全开源的，可以自由使用。</li><li>Oracle JDK的构建过程基于OpenJDK，因此OpenJDK与Oracle JDK之间没有技术差异。</li><li>顶级公司正在使用Oracle JDK，Open JDK不太受欢迎。</li><li>Oracle JDK具有良好的GC选项和更好的渲染器，而OpenJDK具有更少的GC选项</li><li>在响应性和JVM性能方面，Oracle JDK提供了更好的性能。</li><li>Oracle JDK在运行JDK时不会产生任何问题，而OpenJDK有时会产生一些问题。</li><li>Oracle JDK将从其10.0.X版本将收费，用户必须付费或必须依赖OpenJDK才能使用其免费版本。</li><li>Oracle JDK完全由Oracle公司开发，而Open JDK项目由IBM，Apple，SAP AG，Redhat等顶级公司加入和合作。</li></ol><h3 id="_1-1-4-jvm大事记" tabindex="-1"><a class="header-anchor" href="#_1-1-4-jvm大事记"><span>1.1.4 jvm大事记</span></a></h3><p>使用最为广泛的JVM为HotSpot</p><ul><li>HotSpot 为Longview Technologies开发 被SUN收购</li><li>2006年 Java开源 并建立OpenJDK <ul><li>HotSpot 成为Sun JDK和OpenJDK中所带的虚拟机</li></ul></li><li>2008 年 Oracle收购BEA <ul><li>得到JRockit VM</li></ul></li><li>2010年Oracle 收购 Sun <ul><li>得到Hotspot</li></ul></li><li>Oracle宣布在JDK8时整合JRockit和Hotspot，优势互补 <ul><li>在Hotspot基础上，移植JRockit优秀特性</li></ul></li></ul><h2 id="_1-2-jvm体系" tabindex="-1"><a class="header-anchor" href="#_1-2-jvm体系"><span>1.2 JVM体系</span></a></h2><p><img src="'+e+'" alt="image-20230928164138957"></p><ul><li>JDK（Java Development Kit）是 Java语言的软件开发工具包，也是整个java开发的核心，它包含了JRE和开发工具包</li><li>JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）</li><li>JVM（Java Virtual Machine），Java虚拟机，它是运行在操作系统之上的，它与硬件没有直接的交互.<strong>JVM使用软件模拟Java 字节码的指令集</strong></li></ul><blockquote><p><strong>VMWare或者Visual Box都是使用软件模拟物理CPU的指令集</strong></p></blockquote><p>所谓“一次编码，随处运行“正是基于不同系统下的jvm帮你掩盖了系统之间接口的差异：</p><p><img src="'+p+`" alt="image-20210322103040674"></p><blockquote><p>总结</p><p>jdk是开发人员的工具包，它包含了java的运行环境和虚拟机，而一次编写到处运行就是基于jvm</p></blockquote><h2 id="_1-3-各种jvm虚拟机" tabindex="-1"><a class="header-anchor" href="#_1-3-各种jvm虚拟机"><span>1.3 各种JVM虚拟机</span></a></h2><h3 id="_1-3-1-清单" tabindex="-1"><a class="header-anchor" href="#_1-3-1-清单"><span>1.3.1 清单</span></a></h3><p><strong>1、KVM</strong></p><p>SUN发布</p><p>IOS Android前，广泛用于手机系统</p><p><strong>2、CDC/CLDC HotSpot</strong></p><p>手机、电子书、PDA等设备上建立统一的Java编程接口</p><p>J2ME的重要组成部分</p><p><strong>3、Apache Harmony</strong></p><p>兼容于JDK 1.5和JDK 1.6的Java程序运行平台</p><p>与Oracle关系恶劣 退出JCP ，Java社区的分裂</p><p>OpenJDK出现后，受到挑战 2011年 退役</p><p>没有大规模商用经历</p><p>对Android的发展有积极作用</p><p><strong>4、Sun Classic VM</strong></p><p>世界上第一款商用 Java 虚拟机。</p><p>1996年随着Java1.0的发布而发布，JDK1.4时完全被淘汰</p><p><strong>5、BEA JRockit</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>专注于服务端应用，号称是世界上最快的JVM</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ 后来被 Oracle收购；Oracle JRockit （原来的 Bea JRockit）</p><p><strong>6、IBM公司的 J9VM</strong></p><p>全称：IBM Technology for Java Virtual Machine，简称IT4J，内部代号：J9</p><p>是 IBM 自己开发的一款 JVM</p><p>市场定位于HotSpot接近，服务器端、桌面应用、嵌入式等多用途VM</p><p><strong>7、HotSpot VM（现在最常用）</strong></p><p>​ 它是Sun JDK和OpenJDK中所带的虚拟机，也是目前使用范围最广的Java虚拟机。</p><p><strong>8、其他</strong></p><p>（TaobaoJVM 、Graal VM、Azul VM、Liquid VM、）虚拟机</p><h3 id="_1-3-2-查看" tabindex="-1"><a class="header-anchor" href="#_1-3-2-查看"><span>1.3.2 查看</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>shawn@macpro:~ &gt; java -version</span></span>
<span class="line"><span>java version &quot;1.8.0_181&quot;</span></span>
<span class="line"><span>Java(TM) SE Runtime Environment (build 1.8.0_181-b13)</span></span>
<span class="line"><span>Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>hotspot虚拟机</li><li>Client VM是专门为快速启动和小内存(small footprints)而优化的，像GUI就很适合</li><li>Server VM是专门为高性能应用而优化的，如服务器应用</li><li>版本是基于tag为1.8.0_181</li></ul><h2 id="_1-4-规范" tabindex="-1"><a class="header-anchor" href="#_1-4-规范"><span>1.4 规范</span></a></h2><h3 id="java语言规范" tabindex="-1"><a class="header-anchor" href="#java语言规范"><span>Java语言规范</span></a></h3><blockquote><p>Java语言规范定义了什么是Java语言</p></blockquote><h4 id="语法定义" tabindex="-1"><a class="header-anchor" href="#语法定义"><span>语法定义</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">IfThenStatement</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Expression </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Statement </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ArgumentList</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Argument </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ArgumentList </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Argumen</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+'" alt="image-20220604163905645"></p><h4 id="词法结构" tabindex="-1"><a class="header-anchor" href="#词法结构"><span>词法结构</span></a></h4><ul><li><code>\\u</code> + 4个16进制数字 表示<code>UTF-16</code></li><li>行终结符：<code>CR</code>, <code>or LF</code>, <code>or CR LF</code>.</li><li>空白符 <ul><li>空格 <code>tab</code> <code>\\t</code> <code>换页</code> <code>\\f</code> 行终结符</li></ul></li><li>注释</li><li>标示符</li><li>关键字</li></ul><p><img src="'+k+'" alt="image-20220604164221952"></p><ul><li>Int <ul><li><code>0 2 0372 0xDada_Cafe 1996 0x00_FF__00_FF </code></li></ul></li><li>Long <ul><li><code>0l 0777L 0x100000000L 2_147_483_648L 0xC0B0L </code></li></ul></li><li>Float <ul><li><code>1e1f 2.f .3f 0f 3.14f 6.022137e+23f</code></li></ul></li><li>Double <ul><li><code>1e1 2. .3 0.0 3.14 1e-9d 1e137 </code></li></ul></li><li>操作 <ul><li><code>+= -= *= /= &amp;= |= ^= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</code></li></ul></li></ul><h4 id="变量-和-类型" tabindex="-1"><a class="header-anchor" href="#变量-和-类型"><span>变量 和 类型</span></a></h4><ul><li><p>元类型</p><ul><li>byte short int long float char</li></ul></li><li><p>变量初始值</p><ul><li><p>boolean false</p></li><li><p>char \\u0000</p></li></ul></li><li><p>泛型</p></li></ul><p><img src="'+d+'" alt="image-20220604164549468"></p><h4 id="其他规范" tabindex="-1"><a class="header-anchor" href="#其他规范"><span>其他规范</span></a></h4><ul><li>Java内存模型</li><li>类加载链接的过程</li><li>public static final abstract的定义</li><li>异常</li><li>数组的使用</li><li>...</li></ul><h3 id="jvm规范" tabindex="-1"><a class="header-anchor" href="#jvm规范"><span>JVM规范</span></a></h3><blockquote><p>JVM主要定义二进制class文件和JVM指令集等,java语言和jvm相对独立,只要实现了JVM规范的都可以用JVM执行,比如Groovy、Clojure 、Scala</p></blockquote><ul><li><p>Class文件类型</p></li><li><p>数字的内部表示和存储</p><ul><li><code>Byte -128 to 127 (-27 to 27 - 1) </code></li></ul></li><li><p>returnAddress 数据类型定义</p><ul><li>指向操作码的指针。不对应Java数据类型，不能在运行时修改。Finally实现需要</li></ul></li><li><p>定义PC</p></li><li><p>堆</p></li><li><p>栈</p></li><li><p>方法区</p></li><li><p>整数的表达：原反补码</p></li><li><p>Float的表示与定义</p></li></ul><p><img src="'+r+`" alt="image-20220604165145141"></p><ul><li>一些特殊的方法</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>&lt;clinit&gt; </span></span>
<span class="line"><span>&lt;init&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>VM指令集</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">– 类型转化 </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">l2i </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">– 出栈入栈操作 </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">aload astore </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">– 运算</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">iadd isub </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">– 流程控制 </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ifeq ifne </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">– 函数调用 </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">invokevirtual invokeinterface invokespecial invokestatic</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>JVM需要对Java Library 提供以下支持：</strong></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>- 反射 java.lang.reflect </span></span>
<span class="line"><span>- ClassLoader </span></span>
<span class="line"><span>- 初始化class和interface </span></span>
<span class="line"><span>- 安全相关 java.security </span></span>
<span class="line"><span>- 多线程 </span></span>
<span class="line"><span>- 弱引用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JVM的编译</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>- 源码到JVM指令的对应格式 </span></span>
<span class="line"><span>– Javap </span></span>
<span class="line"><span>– JVM反汇编的格式 </span></span>
<span class="line"><span>	&lt;index&gt; &lt;opcode&gt; [ &lt;operand1&gt; [ &lt;operand2&gt;... ]] [&lt;comment&gt;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+g+'" alt="image-20220604165525384"></p><h2 id="_1-5-jvm整体架构" tabindex="-1"><a class="header-anchor" href="#_1-5-jvm整体架构"><span>1.5 jvm整体架构</span></a></h2><h3 id="_1-5-1-java运行过程" tabindex="-1"><a class="header-anchor" href="#_1-5-1-java运行过程"><span>1.5.1 java运行过程</span></a></h3><p><img src="'+c+'" alt="image-20210322133820431"></p><p>1.源码编译：通过Java源码编译器将Java代码编译成JVM字节码（.class文件）</p><p>2.类加载：通过ClassLoader及其子类来完成JVM的类加载</p><p>3.类执行：字节码被装入内存，进入JVM虚拟机，被解释器解释执行</p><h3 id="_1-5-2-jvm模型" tabindex="-1"><a class="header-anchor" href="#_1-5-2-jvm模型"><span>1.5.2 jvm模型</span></a></h3><p><img src="'+o+'" alt="image-20210322135008844"></p><p>由上面的图可以看出，JVM虚拟机中主要是由三部分构成，分别是类加载子系统、运行时数据区、执行引擎。</p><blockquote><p><strong>类加载子系统</strong></p></blockquote><p>Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型。</p><blockquote><p><strong>运行时数据区</strong></p></blockquote><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。</p><p>这些区域有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而一直存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。</p><blockquote><p><strong>执行引擎</strong></p></blockquote><p>执行引擎用于执行JVM字节码指令，主要有两种方式，分别是解释执行和编译执行，区别在于，解释执行是在执行时翻译成虚拟机指令执行，而编译执行是在执行之前先进行编译再执行。</p><p>解释执行启动快，执行效率低。编译执行，启动慢，执行效率高。</p><p>垃圾回收器就是自动管理运行数据区的内存，将无用的内存占用进行清除，释放内存资源。</p><blockquote><p><strong>本地方法库、本地库接口</strong></p></blockquote><p>在jdk的底层中，有一些实现是需要调用本地方法完成的（使用c或c++写的方法），就是通过本地库接口调用完成的。比如：System.currentTimeMillis()方法。</p><blockquote><p>PC寄存器</p></blockquote><p>每个线程拥有一个PC寄存器，在线程创建时创建，指向下一条指令的地址，执行本地方法时，PC的值为undefined</p><blockquote><p>方法区</p></blockquote><p>保存装载的类信息</p><ul><li>类型的常量池</li><li>字段，方法信息</li><li>方法字节码</li></ul><p>通常和永久区(Perm)关联在一起</p><ul><li>JDK6时，String等常量信息置于方法</li><li>JDK7时，已经移动到了堆</li></ul><blockquote><p>Java堆</p></blockquote><ul><li>和程序开发密切相关</li><li>应用系统对象都保存在Java堆中</li><li>所有线程共享Java堆</li><li>对分代GC来说，堆也是分代的</li><li>GC的主要工作区间</li></ul><p><img src="'+y+'" alt="image-20220605081910952"></p><blockquote><p>Java栈</p></blockquote><ul><li><p>线程私有</p></li><li><p>栈由一系列帧组成（因此Java栈也叫做帧栈）</p></li><li><p>帧保存一个方法的局部变量、操作数栈、常量池指针</p></li><li><p>每一次方法调用创建一个帧，并压栈</p></li></ul><p><strong>局部变量表,包含参数和局部变量</strong></p><p><img src="'+m+'" alt="image-20220605082130838"></p><p><strong>函数调用组成帧栈</strong></p><p><img src="'+A+'" alt="image-20220605082248826"></p><p>这是一个帧,省略：操作数栈,返回地址等</p><p><strong>操作数栈</strong>：Java没有寄存器，所有参数传递使用操作数栈</p><p><img src="'+D+'" alt="image-20220605082403503"></p><p><strong>栈上分配</strong></p><ul><li>C++代码示例</li></ul><p><img src="'+u+'" alt="image-20220605082528328"></p><p>栈上分配不会出现内存泄露</p><p>运用到java中：</p><p><img src="'+v+'" alt="image-20220605082625624"></p><ul><li><p>小对象（一般几十个bytes），在没有逃逸的情况下，可以直接分配在栈上</p></li><li><p>直接分配在栈上，可以自动回收，减轻GC压力</p></li><li><p>大对象或者逃逸对象无法栈上分配</p></li></ul><h3 id="_1-5-3-jvm启动流程" tabindex="-1"><a class="header-anchor" href="#_1-5-3-jvm启动流程"><span>1.5.3 jvm启动流程</span></a></h3><p><img src="'+B+'" alt="image-20220605081532806"></p><h3 id="_1-5-4-堆栈方法区交互" tabindex="-1"><a class="header-anchor" href="#_1-5-4-堆栈方法区交互"><span>1.5.4 堆栈方法区交互</span></a></h3><p><img src="'+b+'" alt="image-20220605083227428"></p><h2 id="jvm基本结构" tabindex="-1"><a class="header-anchor" href="#jvm基本结构"><span>JVM基本结构</span></a></h2><h3 id="内存模型" tabindex="-1"><a class="header-anchor" href="#内存模型"><span>内存模型</span></a></h3><ul><li>每一个线程有一个工作内存和主存独立</li><li>工作内存存放主存中变量的值的拷贝</li></ul><p><img src="'+C+'" alt="image-20220605083513690"></p><p>当数据从主内存复制到工作存储时，必须出现两个动作：第一，由主内存执行的读（read）操作；第二，由工作内存执行的相应的load操作；当数据从工作内存拷贝到主内存时，也出现两个操作：第一个，由工作内存执行的存储（store）操作；第二，由主内存执行的相应的写（write）操作</p><p>每一个操作都是原子的，即执行期间不会被中断</p><p>对于普通变量，一个线程中更新的值，不能马上反应在其他变量中。如果需要在其他线程中立即可见，需要使用 <strong>volatile</strong> 关键字</p><p><img src="'+E+`" alt="image-20220605083715043"></p><h3 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile"><span>volatile</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> VolatileStopThread</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> volatile</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> boolean</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 没有volatile -server 运行 无法停止</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> stopMe</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        stop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Stop thread</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[])</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> throws</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> InterruptedException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        VolatileStopThread</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> t</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> VolatileStopThread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 不加volatile,这个线程只会在自己本地存储区域查看值，不能做到及时更新</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        t</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        t</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">stopMe</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>volatile 不能代替锁一般认为volatile 比锁性能好（不绝对）</p><p>选择使用volatile的条件是：语义是否满足应用</p><h3 id="可见性" tabindex="-1"><a class="header-anchor" href="#可见性"><span>可见性</span></a></h3><ul><li>一个线程修改了变量，其他线程可以立即知道</li></ul><h3 id="保证可见性的方法" tabindex="-1"><a class="header-anchor" href="#保证可见性的方法"><span>保证可见性的方法</span></a></h3><ul><li><p>volatile</p></li><li><p>synchronized （unlock之前，写变量值回主存）</p></li><li><p>final(一旦初始化完成，其他线程就可见)</p></li></ul><h3 id="有序性" tabindex="-1"><a class="header-anchor" href="#有序性"><span>有序性</span></a></h3><ul><li><p>在本线程内，操作都是有序的</p></li><li><p>在线程外观察，操作都是无序的。（指令重排 或 主内存同步延时）</p></li></ul><h3 id="指令重排" tabindex="-1"><a class="header-anchor" href="#指令重排"><span>指令重排</span></a></h3><ul><li>线程内串行语义</li></ul><p><img src="`+f+`" alt="image-20220605084247101"></p><ul><li>破坏线程间的有序性</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> OrderExample</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    boolean</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> flag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> writer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 线程A首先执行writer()方法</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        a </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                   </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        flag </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> reader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 线程B线程接着执行reader()方法</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">flag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">            int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  a </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 线程B在int i=a+1 是不一定能看到a已经被赋值为1.因为在writer中，两句话顺序可能打乱</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            ……</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+_+'" alt="image-20220605084406430"></p><ul><li>保证有序性的方法</li></ul><p><img src="'+x+`" alt="image-20220605084450167"></p><ul><li>指令重排基本原则</li></ul><p>程序顺序原则：一个线程内保证语义的串行性</p><p>volatile规则：volatile变量的写，先发生于读</p><p>锁规则：解锁(unlock)必然发生在随后的加锁(lock)前</p><p>传递性：A先于B，B先于C 那么A必然先于C</p><p>线程的start方法先于它的每一个动作</p><p>线程的所有操作先于线程的终结（Thread.join()）</p><p>线程的中断（interrupt()）先于被中断线程的代码</p><p>对象的构造函数执行结束先于finalize()方法</p><h3 id="解释运行" tabindex="-1"><a class="header-anchor" href="#解释运行"><span>解释运行</span></a></h3><ul><li><p>解释执行以解释方式运行字节码</p></li><li><p>解释执行的意思是：读一句执行一句</p></li></ul><h3 id="编译运行-jit" tabindex="-1"><a class="header-anchor" href="#编译运行-jit"><span>编译运行（JIT）</span></a></h3><ul><li><p>将字节码编译成机器码</p></li><li><p>直接执行机器码</p></li><li><p>运行时编译</p></li><li><p>编译后性能有数量级的提升</p></li></ul><h1 id="_2、类文件结构" tabindex="-1"><a class="header-anchor" href="#_2、类文件结构"><span>2、类文件结构</span></a></h1><p>了解jvm后续的一切动作，先从字节码开始。它是一切发生的源头。</p><h2 id="_2-1-测试案例" tabindex="-1"><a class="header-anchor" href="#_2-1-测试案例"><span>2.1 测试案例</span></a></h2><h3 id="_2-1-1-源代码" tabindex="-1"><a class="header-anchor" href="#_2-1-1-源代码"><span>2.1.1 源代码</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/*</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">* 基本类结构</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">* */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ClassStruct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">JVM</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 18</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-2-编译" tabindex="-1"><a class="header-anchor" href="#_2-1-2-编译"><span>2.1.2 编译</span></a></h3><p>1）maven定义编译的版本</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">plugins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">plugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.apache.maven.plugins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">maven-compiler-plugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">configuration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">source</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1.8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">source</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1.8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">configuration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">plugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">plugins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）编译</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mvn clean compile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_2-2-字节码结构" tabindex="-1"><a class="header-anchor" href="#_2-2-字节码结构"><span>2.2 字节码结构</span></a></h2><p><strong>和语言无关</strong></p><p><img src="`+F+'" alt="image-20220606182947329"></p><h3 id="_2-2-1-二进制概览" tabindex="-1"><a class="header-anchor" href="#_2-2-1-二进制概览"><span>2.2.1 二进制概览</span></a></h3><p>1）vscode打开</p><p><img src="'+j+'" alt="image-20210322174708164"></p><p>2）class文件是一个二进制文件，转化后是16进制展示，实际上class文件就是一张表，它由以下数据项构成，这些数据项从头到尾严格按照以下顺序排列：</p><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">名称</th><th style="text-align:center;">数量</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">u4</td><td style="text-align:center;">magic</td><td style="text-align:center;">1</td><td style="text-align:center;">魔数</td></tr><tr><td style="text-align:center;">u2</td><td style="text-align:center;">minor_version</td><td style="text-align:center;">1</td><td style="text-align:center;">次版本号</td></tr><tr><td style="text-align:center;">u2</td><td style="text-align:center;">major_version</td><td style="text-align:center;">1</td><td style="text-align:center;">主版本号</td></tr><tr><td style="text-align:center;">u2</td><td style="text-align:center;">constant_pool_count</td><td style="text-align:center;">1</td><td style="text-align:center;">常量计数</td></tr><tr><td style="text-align:center;">cp_info</td><td style="text-align:center;">constant_pool</td><td style="text-align:center;">constant_pool_count - 1</td><td style="text-align:center;">具体常量</td></tr><tr><td style="text-align:center;">u2</td><td style="text-align:center;">access_flags</td><td style="text-align:center;">1</td><td style="text-align:center;">访问标志</td></tr><tr><td style="text-align:center;">u2</td><td style="text-align:center;">this_class</td><td style="text-align:center;">1</td><td style="text-align:center;">类索引</td></tr><tr><td style="text-align:center;">u2</td><td style="text-align:center;">super_class</td><td style="text-align:center;">1</td><td style="text-align:center;">父类索引</td></tr><tr><td style="text-align:center;">u2</td><td style="text-align:center;">interfaces_count</td><td style="text-align:center;">1</td><td style="text-align:center;">接口索引</td></tr><tr><td style="text-align:center;">u2</td><td style="text-align:center;">interfaces</td><td style="text-align:center;">interfaces_count</td><td style="text-align:center;">具体接口</td></tr><tr><td style="text-align:center;">u2</td><td style="text-align:center;">fields_count</td><td style="text-align:center;">1</td><td style="text-align:center;">字段个数</td></tr><tr><td style="text-align:center;">field_info</td><td style="text-align:center;">fields</td><td style="text-align:center;">fields_count</td><td style="text-align:center;">具体字段</td></tr><tr><td style="text-align:center;">u2</td><td style="text-align:center;">methods_count</td><td style="text-align:center;">1</td><td style="text-align:center;">方法个数</td></tr><tr><td style="text-align:center;">method_info</td><td style="text-align:center;">methods</td><td style="text-align:center;">methods_count</td><td style="text-align:center;">具体方法</td></tr><tr><td style="text-align:center;">u2</td><td style="text-align:center;">attributes_count</td><td style="text-align:center;">1</td><td style="text-align:center;">属性个数</td></tr><tr><td style="text-align:center;">attribute_info</td><td style="text-align:center;">attributes</td><td style="text-align:center;">attributes_count</td><td style="text-align:center;">具体属性</td></tr></tbody></table><p>3）图示如下：</p><p><img src="'+S+'" alt="image-20230928164236853"></p><p>a</p><h3 id="_2-2-2-魔数与版本" tabindex="-1"><a class="header-anchor" href="#_2-2-2-魔数与版本"><span>2.2.2 魔数与版本</span></a></h3><p>1）<strong>魔数：</strong></p><p>CAFEBABE，咖啡宝宝，固定的。</p><p><img src="'+X+'" alt="image-20210322175549121"></p><p>2）<strong>版本号：</strong></p><p>34，换成10进制就是52</p><p><img src="'+M+'" alt="image-20210322175609021"></p><p>jdk的版本标记映射关系：</p><p><img src="'+G+'" alt="image-20220606183542274"></p><p><img src="'+z+`" alt="image-20210322172801851"></p><p>说明编译用的是jdk8，我们改成1.6，重新执行 mvn clean compile ，再来查看class文件试试：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">plugins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">plugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.apache.maven.plugins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">maven-compiler-plugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">configuration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">source</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1.6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">source</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1.6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">configuration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">plugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">plugins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>扩展</p></blockquote><p>在开发中，经常会遇到类似Unsupported major.minor version 51.0的错误，一般情况下都是JDK版本不匹配造成的。 虽然jdk代码在执行时基本上向下兼容，但是！开发环境和服务器环境jdk最好一致，不要尝试这个坑。</p><p>区分和理解两个环境：编译环境，运行环境</p><h3 id="_2-2-3-常量池" tabindex="-1"><a class="header-anchor" href="#_2-2-3-常量池"><span>2.2.3 常量池</span></a></h3><p>再往下遵从相同的规律： 计数器（标注后面有多少个） + 对应个数的结构体</p><p>我们以常量池为例：</p><p>1）位置</p><p><img src="`+q+'" alt="image-20210322175628817"></p><p>2）结构说明</p><p>常量池记录了jvm内的一堆常量信息，这部分由 【2个字节计数】 + 【n个cp_info结构】组成</p><p><img src="'+J+'" alt="image-20210329105800328"></p><blockquote><p>常量池中主要存放两大类常量：字面量（Literal）和符号引用（Symbolic References）。 字面量比较接近于 Java 语言层面的常量概念，如文本字符串、声明为 final 的常量值等。 而符号引用则属于编译原理方面的概念，包括了下面三类常量： 类和接口的全限定名（Fully Qualified Name）、字段的名称和描述符（Descriptor）、方法的名称和描述符</p></blockquote><p>其中cp_info有多种类型：</p><ul><li>直接类型，存的就是当前值，这种像Integer，Long等长度都是确定的</li><li>引用类型，存的是指向其他位置的指针</li></ul><p><img src="'+T+'" alt="image-20210329105546453"></p><p><em>附：绿色代表指针，橙色代表直接类型</em></p><p>具体说明：</p><p><img src="'+P+`" alt="image-20220606183820312"></p><p>CONSTANT_Utf8</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>tag 1</span></span>
<span class="line"><span>length u2</span></span>
<span class="line"><span>bytes[length]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+O+`" alt="image-20220606184302779"></p><p>CONSTANT_Integer</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>tag 3</span></span>
<span class="line"><span>byte u4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+w+'" alt="image-20220606184358909"></p><p>3）案例</p><p>下面以String为例，String是一种引用类，它会指向一个utf8类型来存储真实的信息</p><p>jdk提供了一个工具，javap，可以查看常量列表的详细内容：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>javap -v ClassStruct.class</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+K+'" alt="image-20210329104743038"></p><p><img src="'+R+'" alt="image-20220606184050633"></p><h3 id="_2-2-4-其他信息" tabindex="-1"><a class="header-anchor" href="#_2-2-4-其他信息"><span>2.2.4 其他信息</span></a></h3><p>1）说明</p><p>常量池之后，是紧挨的一系列信息，这些信息大同小异，无非就是值、或者引用</p><p>（参考上面2.3.3里的表格和图例）</p><ul><li>访问标记：public abstract 类的标示符等信息</li></ul><p><img src="'+L+'" alt="image-20220606184820692"></p><ul><li>类索引，class类型，最终指向一个utf8，标记当前类的名字</li><li>父类，同上</li><li>接口，2字节记录数量，后面记录多个接口类型</li><li>接下来是字段、方法、属性，都是2字节记录后面多少个，后面紧跟对应的结构体类型</li></ul><p>CONSTANT_NameAndType</p><p><img src="'+V+'" alt="image-20220606184610285"></p><p>CONSTANT_Class</p><p><img src="'+I+'" alt="image-20220606184637200"></p><p>CONSTANT_Fieldref ,CONSTANT_Methodref ,CONSTANT_InterfaceMethodref</p><p><img src="'+N+'" alt="image-20220606184659735"></p><p><img src="'+H+'" alt="image-20220606184716425"></p><p>2）注意事项</p><p>要看懂javap后的格式，明白这些格式，可以轻松看懂class结构</p><p><img src="'+U+'" alt="image-20210329114350327"></p><table><thead><tr><th>类型</th><th>标识符</th><th>案例</th><th>说明</th></tr></thead><tbody><tr><td>数组</td><td>[</td><td>[Ljava.lang.String</td><td>String数组</td></tr><tr><td>对象</td><td>L</td><td>Lcom.test.Demo</td><td></td></tr><tr><td>基本类型</td><td>大写字母开头</td><td>B=byte，I=int……</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>组合类型</p><table><thead><tr><th>类型</th><th>案例</th><th>说明</th></tr></thead><tbody><tr><td>类里的属性、字段、方法等</td><td>com.test.Demo.name:Ljava.lang.String</td><td>英文点号隔开</td></tr><tr><td>标识什么类型</td><td>com.test.Demo.getName:()Ljava.lang.String</td><td>英文冒号隔开</td></tr><tr><td>方法</td><td>(参数类型)返回值类型</td><td>英文括弧，后面是返回值类型</td></tr></tbody></table><p>3）实例分析</p><p><img src="'+W+`" alt="image-20210329114932971"></p><h3 id="user类例子" tabindex="-1"><a class="header-anchor" href="#user类例子"><span><code>User</code>类例子</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> User</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">		return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> setId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">		this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">		return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> setName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">		this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getAge</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">		return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> setAge</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">		this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Z+'" alt="image-20220606185129410"></p><p><img src="'+Y+'" alt="image-20220606185153807"></p><p><img src="'+$+'" alt="image-20220606185211781"></p><p><img src="'+Q+'" alt="image-20220606185227953"></p><h1 id="_3、运行数据区" tabindex="-1"><a class="header-anchor" href="#_3、运行数据区"><span>3、运行数据区</span></a></h1><p>字节码只是一个二进制文件存放在那里。要想在jvm里跑起来，先得有个运行的内存环境。</p><p>也就是我们所说的jvm运行时数据区。</p><p>1）运行时数据区的位置</p><p>运行时数据区是jvm中最为重要的部分，执行引擎频繁操作的就是它。类的初始化，以及后面我们讲的对象空间的分配、垃圾的回收都是在这块区域发生的。</p><p><img src="'+ss+'" alt="image-20210325135403075"></p><p>2）区域划分</p><p>根据《Java虚拟机规范》中的规定，在运行时数据区将内存细分为几个部分</p><p>线程私有的：Java虚拟机栈（Java Virtual Machine Stack）、程序计数器（Program Counter Register）、本地方法栈（Native Method Stacks）</p><p>大家共享的：方法区（Method Area）、Java堆区（Java Heap）</p><p><img src="'+is+'" alt="image-20210329093556986"></p><p>接下来我们分块详细来解读，每一块是做什么的，如果溢出了会发生什么事情</p><h2 id="_3-1-程序计数器" tabindex="-1"><a class="header-anchor" href="#_3-1-程序计数器"><span>3.1 程序计数器</span></a></h2><h3 id="_3-1-1-概述" tabindex="-1"><a class="header-anchor" href="#_3-1-1-概述"><span>3.1.1 概述</span></a></h3><p>程序计数器（Program Counter Register）</p><ul><li><p>每个线程一个。是一块较小的内存空间，它表示当前线程执行的字节码指令的地址。</p></li><li><p>字节码解释器工作时，通过改变这个计数器的值来选取下一条需要执行的字节码指令，所以整个程序无论是分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p></li><li><p>由于线程是多条并行执行的，互相之间执行到哪条指令是不一样的，所以每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p></li><li><p>如果是native方法，这里为空</p></li></ul><h3 id="_3-1-2-溢出异常" tabindex="-1"><a class="header-anchor" href="#_3-1-2-溢出异常"><span>3.1.2 溢出异常</span></a></h3><p>没有！</p><p>在虚拟机规范中，没有对这块区域设定内存溢出规范，也是唯一一个不会溢出的区域</p><h3 id="_3-1-3-案例" tabindex="-1"><a class="header-anchor" href="#_3-1-3-案例"><span>3.1.3 案例</span></a></h3><p>因为它不会溢出，所以我们没有办法给它造一个，但是从class类上可以找到痕迹。</p><p>回顾上面javap的反汇编，其中code所对应的编号就可以理解为计数器中所记录的执行编号。</p><p><img src="'+as+'" alt="image-20210324101225120"></p><h2 id="_3-2-虚拟机栈" tabindex="-1"><a class="header-anchor" href="#_3-2-虚拟机栈"><span>3.2 虚拟机栈</span></a></h2><p><img src="'+ns+`" alt="image-20210324103100187"></p><h3 id="_3-2-1-概述" tabindex="-1"><a class="header-anchor" href="#_3-2-1-概述"><span>3.2.1 概述</span></a></h3><ul><li>也是线程私有的！生命周期与线程相同。</li><li>它描述的是Java方法执行的当前线程的内存模型，每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧，用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</li></ul><h3 id="_3-2-2-溢出异常" tabindex="-1"><a class="header-anchor" href="#_3-2-2-溢出异常"><span>3.2.2 溢出异常</span></a></h3><p>1）栈深度超出设定</p><p>如果是创建的栈的深度大于虚拟机允许的深度，抛出</p><p>Exception in thread &quot;main&quot; java.lang.StackOverflowError</p><p>2）内存申请不足</p><p>如果栈允许内存扩展，但是内存申请不够的时候，抛出 OutOfMemoryError</p><p>注意！这一点和具体的虚拟机有关，hotspot虚拟机并不支持栈空间扩展，所以单线程环境下，一个线程创建时，分配给它固定大小的一个栈，在这个固定栈空间上不会出现再去扩容申请内存的情况，也就不会遇到申请不到一说，只会因为深度问题超出固定空间造成上面的StackOverflowError</p><p>如果换成多线程，毫无节制的创建线程，还是有可能造成OutOfMemoryError。但是这个和Xss栈空间大小无关。是因为线程个数太多，栈的个数太多，导致系统分配给jvm进程的物理内存被吃光。</p><p>这时候虚拟机会附带相关的提示：</p><p>Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: unable to create native thread</p><p>ps: 每个线程默认分配1M空间（64位linux，hotspot环境）</p><p>疑问：是不是改小Xss的值就可以得到栈空间溢出呢？</p><p>答：根据上面的分析，hotspot下不可以，还是会抛出StackOverflowError，无非深度更小了。</p><h3 id="_3-2-3-案例一-进出栈顺序" tabindex="-1"><a class="header-anchor" href="#_3-2-3-案例一-进出栈顺序"><span>3.2.3 案例一：进出栈顺序</span></a></h3><p>1）代码</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">itheima</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">demo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 程序模拟进栈、出栈过程</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 先进后出</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> StackInAndOut</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 定义方法一</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">进入方法A</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 定义方法二;调用方法一</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">进入方法B</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">进入Main方法</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）运行结果：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">进入方法A</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">进入方法B</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">进入Main方法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）栈结构：</p><p>main方法----&gt;B方法----&gt;A方法</p><p><img src="`+ls+`" alt="image-20210324104530470"></p><h3 id="_3-2-4-案例二-栈深度溢出" tabindex="-1"><a class="header-anchor" href="#_3-2-4-案例二-栈深度溢出"><span>3.2.4 案例二：栈深度溢出</span></a></h3><p>1）代码</p><p>这个容易实现，方法嵌套自己就可以：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">itheima</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">demo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 通过一个程序模拟线程请求的栈深度大于虚拟机所允许的栈深度；</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 抛出StackOverflowError</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> StackOverFlow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 定义方法，循环嵌套自己</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">进入方法B</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">进入Main方法</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）运行结果：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception in thread </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">main</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">StackOverflowError</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">itheima</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">demo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">StackOverFlow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">StackOverFlow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">12</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">itheima</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">demo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">StackOverFlow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">StackOverFlow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">12</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">itheima</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">demo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">StackOverFlow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">StackOverFlow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">12</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">itheima</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">demo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">StackOverFlow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">StackOverFlow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">12</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">itheima</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">demo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">StackOverFlow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">StackOverFlow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">12</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）栈结构：</p><p><img src="`+hs+`" alt="image-20210324105125093"></p><h3 id="_3-2-5-案例三-栈内存溢出" tabindex="-1"><a class="header-anchor" href="#_3-2-5-案例三-栈内存溢出"><span>3.2.5 案例三：栈内存溢出</span></a></h3><p>一直不停的创建线程就可以堆满栈</p><p>但是！这个很危险，到32系统的winxp上勇敢的小伙伴可以试一试，机器卡死不负责！</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">itheima</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">demo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/*</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">* 栈内存溢出，注意！很危险，谨慎执行</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">* 执行时可能会卡死系统。直到内存耗尽</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">* */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> StackOutOfMem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-本地方法栈" tabindex="-1"><a class="header-anchor" href="#_3-3-本地方法栈"><span>3.3 本地方法栈</span></a></h2><h3 id="_3-3-1-概述" tabindex="-1"><a class="header-anchor" href="#_3-3-1-概述"><span>3.3.1 概述</span></a></h3><ul><li>本地方法栈的功能和特点类似于虚拟机栈，均具有线程隔离的特点</li><li>不同的是，本地方法栈服务的对象是JVM执行的native方法，而虚拟机栈服务的是JVM执行的java方法</li><li>虚拟机规范里对这块所用的语言、数据结构、没有强制规定，虚拟机可以自由实现它</li><li>甚至，hotspot把它和虚拟机栈合并成了1个</li></ul><h3 id="_3-3-2-溢出异常" tabindex="-1"><a class="header-anchor" href="#_3-3-2-溢出异常"><span>3.3.2 溢出异常</span></a></h3><p>和虚拟机栈一样，也是两个：</p><p>如果是创建的栈的深度大于虚拟机允许的深度，抛出 StackOverFlowError</p><p>内存申请不够的时候，抛出 OutOfMemoryError</p><h2 id="_3-4-堆" tabindex="-1"><a class="header-anchor" href="#_3-4-堆"><span>3.4 堆</span></a></h2><h3 id="_3-4-1-概述" tabindex="-1"><a class="header-anchor" href="#_3-4-1-概述"><span>3.4.1 概述</span></a></h3><p>与上面的3个不同，堆是所有线程共享的！所谓的线程安全不安全也是出自这里。</p><p>在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，Java世界里“几乎”所有的对象实例都在这里分配内存。</p><p>需要注意的是，《Java虚拟机规范》并没有对堆进行细致的划分，所以对于堆的讲解要基于具体的虚拟机，我们以使用最多的HotSpot虚拟机为例。</p><p>Java堆是垃圾收集器管理的内存区域，因此它也被称作“GC堆”，这就是我们做JVM调优的重点区域部分。</p><h3 id="_3-4-2-jdk1-7" tabindex="-1"><a class="header-anchor" href="#_3-4-2-jdk1-7"><span>3.4.2 jdk1.7</span></a></h3><p>jvm的内存模型在1.7和1.8有较大的区别，虽然1.7目前使用的较少了，但是我们也是需要对1.7的内存模型有所了解，所以接下里，我们将先学习1.7再学习1.8的内存模型。</p><p><img src="`+es+'" alt="image-20200421111048271"></p><ul><li><p>Young 年轻区（代）</p><p>Young区被划分为三部分，Eden区和两个大小严格相同的Survivor区</p><p>其中，Survivor区间中，某一时刻只有其中一个是被使用的，另外一个留做垃圾收集时复制对象用</p><p>在Eden区间变满的时候， GC就会将存活的对象移到空闲的Survivor区间中，根据JVM的策略，在经过几次垃圾收集后，任然存活于Survivor的对象将被移动到下面的Tenured区间。</p></li></ul><blockquote><p>并不是所有new的对象都会进入到年轻代，如果是大对象会直接去老年代。</p></blockquote><ul><li><p>Tenured 年老区</p><p>Tenured区主要保存生命周期长的对象，一般是一些老的对象，当一些对象在Young复制转移一定的次数以后，对象就会被转移到Tenured区，一般如果系统中用了application级别的缓存，缓存中的对象往往会被转移到这一区间。</p></li><li><p>Perm 永久区</p><p>现在已经成为历史，Perm代主要保存类信息，class,method,filed等对象，这部份的空间一般不会溢出，除非一次性加载了很多的类，不过在涉及到热部署的应用服务器的时候，有时候会遇到java.lang.OutOfMemoryError : PermGen space 的错误，造成这个错误的很大原因就有可能是每次都重新部署，但是重新部署后，类的class没有被卸载掉，这样就造成了大量的class对象保存在了perm中，这种情况下，一般重新启动应用服务器可以解决问题。另外一种可能是创建了大批量的jsp文件，造成类信息超出perm的上限而溢出。这种重启也解决不了。只能调大空间。</p></li></ul><h3 id="_3-4-3-jdk1-8" tabindex="-1"><a class="header-anchor" href="#_3-4-3-jdk1-8"><span>3.4.3 jdk1.8</span></a></h3><p><img src="'+ps+'" alt="image-20210325104219429"></p><p>由上图可以看出，jdk1.8的内存模型是由2部分组成，年轻代 + 年老代。永久代被干掉，换成了Metaspace（元数据空间）</p><p>年轻代：Eden + 2*Survivor （不变）</p><p>年老代：OldGen （不变）</p><p>元空间：原来的perm区 （重点！）</p><blockquote><p>需要特别说明的是：<strong>Metaspace所占用的内存空间不是在虚拟机内部，而是在本地内存空间中，这也是与1.7的永久代最大的区别所在</strong>。</p></blockquote><p><img src="'+ts+'" alt="image-20200421114248164"></p><p><img src="'+ks+'" alt="image-20220830183650282"></p><p><a href="https://openjdk.org/jeps/122#Motivation" target="_blank" rel="noopener noreferrer">jdk1.8移除老年代的动机</a>: JRockit 和 Hotspot 融合工作的一部分。 JRockit客户不需要配置永久代（因为JRockit没有永久代），习惯不配置永久代。</p><blockquote><p>实际使用时由于永久代内存经常不够用/发生内存泄漏，报出异常OOM:PermGen。所以将永久区废弃，改用元空间，改为了使用本地内存空间。</p></blockquote><h3 id="_3-4-4-jstat查看堆内存使用情况" tabindex="-1"><a class="header-anchor" href="#_3-4-4-jstat查看堆内存使用情况"><span>3.4.4 jstat查看堆内存使用情况</span></a></h3><p><code>jstat [-命令选项][VMid][间隔时间/毫秒][查询次数]</code></p><ul><li>查看class加载统计: <code>jstat -class 12112</code></li></ul><p><img src="'+ds+`" alt="image-20220830184731968"></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>loaded ：加载class的数量</span></span>
<span class="line"><span>bytes: 占用空间的大小</span></span>
<span class="line"><span>unloaded：还没加载的数量</span></span>
<span class="line"><span>bytes： 还没加载的数量的大小</span></span>
<span class="line"><span>time: 加载耗时</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查看编译统计： <code>jstat -compiler 12112</code></li></ul><p><img src="`+rs+`" alt="image-20220830185043741"></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>compiled： 编译数量</span></span>
<span class="line"><span>failed： 失败数量</span></span>
<span class="line"><span>invalid： 无效数量</span></span>
<span class="line"><span>time： 时间</span></span>
<span class="line"><span>failedType： 失败类型</span></span>
<span class="line"><span>failedMethod: 失败的方法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查看垃圾回收统计： <code>jstat -gc 12112</code></li></ul><p><img src="`+gs+`" alt="image-20220830185209013"></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>S0C：第一个Survivor区的大小（KB）</span></span>
<span class="line"><span>S1C：第二个Survivor区的大小（KB）</span></span>
<span class="line"><span>S0U：第一个Survivor区的使用大小（KB）</span></span>
<span class="line"><span>S1U：第二个Survivor区的使用大小（KB）</span></span>
<span class="line"><span>EC：Eden区的大小（KB）</span></span>
<span class="line"><span>EU：Eden区的使用大小（KB）</span></span>
<span class="line"><span>OC：Old区大小（KB）</span></span>
<span class="line"><span>OU：Old使用大小（KB）</span></span>
<span class="line"><span>MC：方法区大小（KB）</span></span>
<span class="line"><span>MU：方法区使用大小（KB） </span></span>
<span class="line"><span>CCSC：压缩类空间大小（KB） </span></span>
<span class="line"><span>CCSU：压缩类空间使用大小（KB） </span></span>
<span class="line"><span>YGC：年轻代垃圾回收次数</span></span>
<span class="line"><span>YGCT：年轻代垃圾回收消耗时间</span></span>
<span class="line"><span>FGC：老年代垃圾回收次数</span></span>
<span class="line"><span>FGCT：老年代垃圾回收消耗时间</span></span>
<span class="line"><span>GCT：垃圾回收消耗总时间</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>每1s打印一次，一共打印十次，可以实时查看：<code>jstat -gc 12112 1000 10</code></p></blockquote><h3 id="_3-4-5-溢出异常" tabindex="-1"><a class="header-anchor" href="#_3-4-5-溢出异常"><span>3.4.5 溢出异常</span></a></h3><p>内存不足时，抛出</p><p>java.lang.OutOfMemoryError: Java heap space</p><h3 id="_3-4-6-案例-堆溢出" tabindex="-1"><a class="header-anchor" href="#_3-4-6-案例-堆溢出"><span>3.4.6 案例：堆溢出</span></a></h3><p>1）代码</p><p>分配大量对象，超出jvm规定的堆范围即可</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">itheima</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">demo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ArrayList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 堆溢出</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *   -Xms20m -Xmx20m</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> HeapOOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    Byte</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> bytes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> Byte</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        List</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ArrayList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> HeapOOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）启动</p><p>注意启动时，指定一下堆的大小：</p><p><img src="`+cs+`" alt="image-20210325135056497"></p><p>2）输出</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception in thread </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">main</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OutOfMemoryError</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Java heap space</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">itheima</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">demo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">HeapOOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">init</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">HeapOOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">7</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">itheima</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">demo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">HeapOOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">HeapOOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">13</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-5-方法区" tabindex="-1"><a class="header-anchor" href="#_3-5-方法区"><span>3.5 方法区</span></a></h2><h3 id="_3-5-1-概述" tabindex="-1"><a class="header-anchor" href="#_3-5-1-概述"><span>3.5.1 概述</span></a></h3><p>同样，线程共享的。</p><p>它主要用来存储类的信息、类里定义的常量、静态变量、编译器编译后的代码缓存。</p><p>注意！方法区在虚拟机规范里这是一个逻辑概念，它具体放在那个区域里没有严格的规定。</p><p>所以，hotspot 1.7- 将它放在了堆的永久代里，1.8+单独开辟了一块叫metaspace来存放一部分内容（不是全部！定义的类对象在堆里）</p><p>具体方法区主要存什么东西呢？粗略的分，可以划分为两类：</p><ul><li><p>类信息：主要指类相关的版本、字段、方法、接口描述、引用等</p></li><li><p>运行时常量池：编译阶段生成的常量与符号引用、运行时加入的动态变量</p><p>（常量池里的类变量，如对象或字符串，比较特殊，1.6和1.8位置不同，下面会讲到）</p></li></ul><p><strong>小提示：</strong></p><p>这里经常会跟上面堆里的永久代混为一谈，实际上这是两码事</p><p>永久代是hotspot在1.7及之前才有的设计，1.8+，以及其他虚拟机并不存在这个东西。</p><p>可以说，永久代是1.7的hotspot偷懒的结果，他在堆里划分了一块来实现方法区的功能，叫永久代。因为这样可以借助堆的垃圾回收来管理方法区的内存，而不用单独为方法区再去编写内存管理程序。懒惰！</p><p>同时代的其他虚拟机，如J9，Jrockit等，没有这个概念。后来hotspot认识到，永久代来做这件事不是一个好主意。1.7已经从永久代拿走了一部分数据，直到1.8+彻底去掉了永久代，方法区大部分被移到了metaspace（再强调一下，不是全部！）</p><p><strong>结论：</strong></p><p>方法区是一定存在的，这是虚拟机规定的，但是是个逻辑概念，在哪里虚拟机自己去决定</p><p>而永久代不一定存在，已成为历史</p><h3 id="_3-5-2-溢出异常" tabindex="-1"><a class="header-anchor" href="#_3-5-2-溢出异常"><span>3.5.2 溢出异常</span></a></h3><p>1.6：OutOfMemoryError: PermGen space</p><p>1.8：OutOfMemoryError: Metaspace</p><h3 id="_3-5-3-案例-1-6方法区溢出" tabindex="-1"><a class="header-anchor" href="#_3-5-3-案例-1-6方法区溢出"><span>3.5.3 案例：1.6方法区溢出</span></a></h3><p>1）原理</p><p><img src="`+os+`" alt="image-20210330111421370"></p><p>在1.6里，字符串常量是运行时常量池的一部分，也就是归属于方法区，放在了永久代里。</p><p>所以1.6环境下，让方法区溢出，只需要可劲造往字符串常量池中造字符串即可，这里用到一个方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/*</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">如果字符串常量池里有这个字符串，直接返回引用，不再额外添加</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">如果没有，加进去，返回新创建的引用</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">*/</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">intern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）代码</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 方法区溢出，注意限制一下永久代的大小</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 编译的时候注意pom里的版本，要设置1.6，否则启动会有问题</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * jdk1.6  :     -XX:PermSize=6M -XX:MaxPermSize=6M</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ConstantOOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        ConstantOOM</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> oom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ConstantOOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stringSet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> HashSet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            stringSet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">valueOf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">intern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）创建启动环境</p><p><img src="`+ys+`" alt="image-20210326141144524"></p><p>4）异常信息：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">...</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">19118</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">19119</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">19120</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception in thread </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">main</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OutOfMemoryError</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> PermGen space</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">intern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Native Method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">itheima</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">demo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ConstantOOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ConstantOOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">19</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-4-案例-1-8方法区溢出" tabindex="-1"><a class="header-anchor" href="#_2-5-4-案例-1-8方法区溢出"><span>2.5.4 案例：1.8方法区溢出</span></a></h3><p>1）到了1.8，情况发生了变化</p><p>可以测试一下，1.8下无论指定下面的哪个参数，常量池运行都不会溢出，会一直打印下去</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">PermSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">6M </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MaxPermSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">6M</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MetaspaceSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">10M </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MaxMetaspaceSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">10M</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2）配置运行环境</p><p><img src="`+ms+'" alt="image-20210326141912946"></p><p>3）控制台信息</p><p>不会抛出异常，只要你jvm堆内存够，理论上可以一直打下去</p><p><img src="'+As+'" alt="image-20210326141956360"></p><p>4）为什么呢？</p><p>永久代我们加了限制，结果没意义，因为1.8里已经没有这货了</p><p>元空间也加了限制，同样没意义，那说明字符串常量池它不在元空间里！</p><p>那么，它在哪里呢？</p><p><img src="'+Ds+`" alt="image-20210330111458021"></p><p>jdk1.8以后，字符串常量池被移到了堆空间，和其他对象一样，接受堆的控制。</p><p>其他的运行时的类信息、基本数据类型等在元空间。</p><p>我们可以验证一下，对上面的运行时参数再加一个堆上限限制：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>-Xms10m</span></span>
<span class="line"><span>-Xmx10m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行环境如下：</p><p><img src="`+us+`" alt="image-20210330143017610"></p><p>运行没多久，你会得到以下异常:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>……</span></span>
<span class="line"><span>84014</span></span>
<span class="line"><span>84015</span></span>
<span class="line"><span>84016</span></span>
<span class="line"><span>84017</span></span>
<span class="line"><span>84018</span></span>
<span class="line"><span>84019</span></span>
<span class="line"><span>Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: GC overhead limit exceeded</span></span>
<span class="line"><span>    at java.lang.Integer.toString(Integer.java:403)</span></span>
<span class="line"><span>    at java.lang.String.valueOf(String.java:3099)</span></span>
<span class="line"><span>    at com.itheima.jvm.demo.ConstantOOM.main(ConstantOOM.java:18)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：1.8里，字符串inter()被放在了堆里，受最大堆空间的限制。</p><p>5）那如何才能让元空间溢出呢？</p><p>既然字符串常量池不在这里，那就换其他的。类的基本信息总在元空间吧？我们来试一下</p><p>cglib是一个apache下的字节码库，它可以在运行时生成大量的对象，我们while循环同时限制metaspace试试：</p><p>附：https://gitee.com/mirrors/cglib （想深入了解这个工具的猛击左边，这里不做过多讨论）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>package com.itheima.jvm.demo;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import net.sf.cglib.proxy.Enhancer;</span></span>
<span class="line"><span>import net.sf.cglib.proxy.MethodInterceptor;</span></span>
<span class="line"><span>import net.sf.cglib.proxy.MethodProxy;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.lang.reflect.Method;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * jdk8方法区溢出</span></span>
<span class="line"><span> *   -XX:MetaspaceSize=10M -XX:MaxMetaspaceSize=10M</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class ConstantOOM8 {</span></span>
<span class="line"><span>    public static void main(final String[] args) {</span></span>
<span class="line"><span>        while (true) {</span></span>
<span class="line"><span>            Enhancer enhancer = new Enhancer();</span></span>
<span class="line"><span>            enhancer.setSuperclass(OOM.class);</span></span>
<span class="line"><span>            enhancer.setUseCache(false);</span></span>
<span class="line"><span>            enhancer.setCallback(new MethodInterceptor() {</span></span>
<span class="line"><span>                @Override</span></span>
<span class="line"><span>                public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {</span></span>
<span class="line"><span>                    return methodProxy.invokeSuper(objects,args);</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            });</span></span>
<span class="line"><span>            enhancer.create();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    static class OOM{</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6）运行设置</p><p><img src="`+vs+`" alt="image-20210326152043324"></p><p>7）运行结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Caused by: java.lang.OutOfMemoryError: Metaspace</span></span>
<span class="line"><span>    at java.lang.ClassLoader.defineClass1(Native Method)</span></span>
<span class="line"><span>    at java.lang.ClassLoader.defineClass(ClassLoader.java:763)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论：</p><p>jdk8引入元空间来存储方法区后，内存溢出的风险比历史版本小多了，但是在类超出控制的时候，依然会打爆方法区</p><h2 id="_3-6-一个案例" tabindex="-1"><a class="header-anchor" href="#_3-6-一个案例"><span>3.6 一个案例</span></a></h2><p>为便于大家理解和记忆，下面我们用一个案例，把上面各个区串通起来。</p><p>假设有个Bootstrap的类，执行main方法。在jvm里，它从class文件到跑起来，大致经过如下步骤：</p><p><img src="`+Bs+'" alt="image-20210401175034807"></p><ol><li>首先JVM会先将这个Bootstrap.class 信息加载到内存中的方法区</li><li>接着，主线程开辟一块内存空间，准备好程序计数器pc，虚拟机栈、本地方法栈</li><li>然后，JVM会在Heap堆上为Bootstrap.class 创建一个Bootstrap.class 的类实例</li><li>JVM开始执行main方法，这时在虚拟机栈里为main方法创建一个栈帧</li><li>main方法在执行的过程之中，调用了greeting方法，则JVM会为greeting方法再创建一个栈帧，推到虚拟机栈顶，在main的上面，每次只有一个栈帧处于活动状态，当前为greeting</li><li>当greeting方法运行完成后，则greeting方法出栈，当前活动帧指向main，方法继续往下运行</li></ol><h2 id="_3-7-归纳总结" tabindex="-1"><a class="header-anchor" href="#_3-7-归纳总结"><span>3.7 归纳总结</span></a></h2><p><img src="'+bs+'" alt="image-20230928164252806"></p><p>1）独享/共享的角度：</p><ul><li>独享：程序计数器、虚拟机栈、本地方法栈</li><li>共享：堆、方法区</li></ul><p>2）error的角度：</p><ul><li>程序计数器：不会溢出，比较特殊，其他都会</li><li>两个栈：可能会发生两种溢出，一是深度超了，报StackOverflowError，空间不足：OutOfMemoryError</li><li>堆：只会在空间不足时，报OutOfMemoryError，会提示heapSpace</li><li>方法区：空间不足时，报OutOfMemoryError，提示不同，1.6是permspace，1.8是元空间，和它在什么地方有关</li></ul><p>3）归属：</p><ul><li>计数器、虚拟机栈、本地方法栈：线程创建必须申请配套，真正的物理空间</li><li>堆：真正的物理空间，但是内部结构的划分有变动，1.6有永久代，1.8被干掉</li><li>方法区：最没归属感的一块，原因就是它是一个逻辑概念。1.6被放在了堆的永久代，1.8被拆分，一部分在元空间，一部分（方法区的运行时常量池里面的类对象，包括字符串常量，被设计放在了堆里）</li><li>直接内存：这块实际上不属于运行时数据区的一部分，而是直接操作物理内存。在nio操作里DirectByteBuffer类可以对native操作，避免流在堆内外的拷贝。我们下一步的调优不会涉及到它，了解即可。</li></ul><p>扩展 ：</p><p>使用ASM生成Java字节码</p><p>JIT及其相关参数</p><h1 id="_4、类加载" tabindex="-1"><a class="header-anchor" href="#_4、类加载"><span>4、类加载</span></a></h1><p>通过字节码，我们了解了class文件的结构</p><p>通过运行数据区，我们了解了jvm内部的内存划分及结构</p><p>接下来，让我们看看，字节码怎么进入jvm的内存空间，各自进入那个空间，以及怎么跑起来。</p><p><img src="'+Cs+'" alt="image-20210331111333565"></p><h2 id="_4-1-加载" tabindex="-1"><a class="header-anchor" href="#_4-1-加载"><span>4.1 加载</span></a></h2><h3 id="_4-1-1-概述" tabindex="-1"><a class="header-anchor" href="#_4-1-1-概述"><span>4.1.1 概述</span></a></h3><p>类的加载就是将class文件中的二进制数据读取到内存中，然后将该字节流所代表的静态数据结构转化为方法区中运行的数据结构，并且在堆内存中生成一个java.lang.Class对象作为访问方法区数据结构的入口。</p><p><img src="'+Es+'" alt="image-20210330161050813"></p><p>注意：</p><ul><li>加载的字节码来源，不一定非得是class文件，可以是符合字节码规范的任意地方，甚至二进制流等</li><li>从字节码到内存，是由加载器（ClassLoader）完成的，下面我们详细看一下加载器相关内容</li></ul><h3 id="_4-1-2-系统加载器" tabindex="-1"><a class="header-anchor" href="#_4-1-2-系统加载器"><span>4.1.2 系统加载器</span></a></h3><p>jvm提供了3个系统加载器，分别是<strong>Bootstrp loader</strong>、<strong>ExtClassLoader</strong> 、<strong>AppClassLoader</strong></p><p>这三个加载器互相成父子继承关系</p><p><img src="'+fs+`" alt="image-20210330164000447"></p><p>1）Bootstrp loader</p><p>Bootstrp加载器是用C++语言写的，它在Java虚拟机启动后初始化</p><p>它主要负责加载以下路径的文件：</p><ul><li><p><code>%JAVA_HOME%/jre/lib/*.jar</code></p></li><li><p><code>%JAVA_HOME%/jre/classes/*</code></p></li><li><p><code>-Xbootclasspath</code>参数指定的路径</p></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sun.boot.class.path</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）ExtClassLoader</p><p>ExtClassLoader是用Java写的，具体来说就是 sun.misc.Launcher$ExtClassLoader</p><p>ExtClassLoader主要加载：</p><ul><li>%JAVA_HOME%/jre/lib/ext/*</li><li>ext下的所有classes目录</li><li>java.ext.dirs系统变量指定的路径中类库</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.ext.dirs</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3）AppClassLoader</p><p>AppClassLoader也是用Java写成的，它的实现类是 sun.misc.Launcher$AppClassLoader，另外我们知道ClassLoader中有个getSystemClassLoader方法，此方法返回的就是它。</p><ul><li>负责加载 -classpath 所指定的位置的类或者是jar文档</li><li>也是Java程序默认的类加载器</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.class.path</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>4）验证</p><p>很简单，使用一段代码打印对应的property信息就可以查到当前三个类加载器所加载的目录</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">itheima</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">load</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> SystemLoader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> bootstrap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sun.boot.class.path</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">split</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ext</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.ext.dirs</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">split</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> app</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.class.path</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">split</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">bootstrap:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> :</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> bootstrap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ext:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> :</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ext</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //app是默认加载器，注意启动控制台的 -classpath 选项</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">app:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> :</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> app</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-3-自定义加载器" tabindex="-1"><a class="header-anchor" href="#_4-1-3-自定义加载器"><span>4.1.3 自定义加载器</span></a></h3><p>除了上面的系统提供的3种loader，jvm允许自己定义类加载器，典型的在tomcat上：</p><p><img src="`+_s+'" alt="image-20210331100234007"></p><p><em>拓展：感兴趣的同学也可以自己写一下，继承ClassLoader这个抽象类，并覆盖对应的findClass方法即可</em></p><p>接下来我们看一个重点：双亲委派</p><h3 id="_4-1-4-双亲委派" tabindex="-1"><a class="header-anchor" href="#_4-1-4-双亲委派"><span>4.1.4 双亲委派</span></a></h3><p>1）概述</p><p><img src="'+xs+`" alt="image-20210331091443372"></p><p>类加载器加载某个类的时候，因为有多个加载器，甚至可以有各种自定义的，他们呈父子继承关系。</p><p>这给人一种印象，子类的加载会覆盖父类，其实恰恰相反！</p><p>与普通类继承属性不同，类加载器会优先调父类的load方法，如果父类能加载，直接用父类的，否则最后一步才是自己尝试加载，从源代码上可以验证。</p><p>ClassLoader.loadClass()方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">protected</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Class</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">?</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> loadClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> boolean</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> throws ClassNotFoundException </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        synchronized</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getClassLoadingLock</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 首先，检测是否已经加载 </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            Class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> findLoadedClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">c </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                //如果没有加载，开始按如下规则执行：</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">                long</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> t0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nanoTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">parent </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                        //重点！父加载器不为空则调用父加载器的loadClass </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                        c </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> parent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">loadClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                    }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                        //父加载器为空则调用Bootstrap Classloader </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                        c </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> findBootstrapClassOrNull</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ClassNotFoundException </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">c </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">                    long</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> t1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nanoTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                    //父加载器没有找到，则调用findclass，自己查找并加载</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                    c </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> findClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">                resolveClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）为什么这么设计呢？</p><p><strong>避免重复加载、 避免核心类篡改</strong></p><p>采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。</p><p>其次是考虑到安全因素，java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java。</p><p>API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class</p><p>即便是父类没加载，也会优先让父类去加载特定系统目录里的class，你获取到的依然是jvm内的核心类，而不是你胡乱改写的。这样便可以防止核心API库被随意篡改。</p><blockquote><p>查找 app -&gt; ext -&gt; boot,找不到,加载 boot-&gt;ext-&gt;app</p><p>反射可以修改,从app加载。是否只能用反射?</p></blockquote><p><strong>双亲模式的破坏</strong></p><p>双亲模式是默认的模式，但不是必须这么做。（有这种机制存在，java才能做到热替换，以及更加灵活）</p><ul><li>Tomcat的WebappClassLoader 就会先加载自己的Class，找不到再委托parent</li><li>OSGi的ClassLoader形成网状结构，根据需要自由加载Class</li></ul><p>先从底层ClassLoader加载</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">protected</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> synchronized</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Class</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">?</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> loadClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> boolean</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> throws ClassNotFoundException </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // First, check if the class has already been loaded</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Class</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> re</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">findClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">re</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">“无法载入类</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">”</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">“ 需要请求父加载器</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">);</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        return super.loadClass(name,resolve);</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    }</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    return re;</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">}</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">protected Class&lt;?&gt; findClass(String className) throws ClassNotFoundException {</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    Class clazz = this.findLoadedClass(className);</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    if (null == clazz) {</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        try {</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            String classFile = getClassFile(className);</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            FileInputStream fis = new FileInputStream(classFile);</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            FileChannel fileC = fis.getChannel();</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            ByteArrayOutputStream baos = new ByteArrayOutputStream();</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            WritableByteChannel outC = Channels.newChannel(baos);</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            ByteBuffer buffer = ByteBuffer.allocateDirect(1024);</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            // 省略部分代码</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            fis.close();</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            byte[] bytes = baos.toByteArray();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            clazz = defineClass(className, bytes, 0, bytes.length);</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        } catch (FileNotFoundException e) {</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            e.printStackTrace();</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        } catch (IOException e) {</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            e.printStackTrace();</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        }</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    }</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    return clazz;</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Fs+`" alt="image-20220606075858080"></p><p><strong>双亲模式存在的问题?</strong></p><blockquote><p>顶层ClassLoader,无法加载底层ClassLoader的类</p><p>那java框架(rt.jar)是如何加载应用的类的?</p><p>​ javax.xml.parsers包中定义了xml解析的类接口Service Provider Interface</p><p>​ SPI 位于rt.jar,即接口在启动ClassLoader中,而SPI的实现类,在AppLoader中。</p></blockquote><p>解决方案：上下文ClassLoader</p><h3 id="_4-1-5-上下文加载器" tabindex="-1"><a class="header-anchor" href="#_4-1-5-上下文加载器"><span>4.1.5 上下文加载器</span></a></h3><p><code>Thread. setContextClassLoader()</code></p><ul><li>上下文加载器</li><li>是一个角色</li><li>用以<strong>解决顶层ClassLoader无法访问底层ClassLoader的类</strong>的问题</li><li>基本思想是，在顶层ClassLoader中，传入底层ClassLoader的实例</li></ul><p>代码来自于javax.xml.parsers.FactoryFinder展示如何在启动类加载器加载AppLoader的类</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Class </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getProviderClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String className</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ClassLoader cl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        boolean</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> doFallback</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> boolean</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> useBSClsLoader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> throws ClassNotFoundException</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cl </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">useBSClsLoader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">forName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">className</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> FactoryFinder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                cl </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ss</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getContextClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cl </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                    throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ClassNotFoundException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                    return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> cl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">loadClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">className</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //使用上下文ClassLoader</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> cl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">loadClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">className</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ClassNotFoundException </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">doFallback</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // Use current class loader - should always be bootstrap CL</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">forName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">className</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> FactoryFinder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">…</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">..</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上下文ClassLoader可以突破双亲模式的局限性</p></blockquote><h3 id="热替换" tabindex="-1"><a class="header-anchor" href="#热替换"><span>热替换</span></a></h3><p>当一个class被替换后，系统无需重启，替换的类立即生效</p><p>可以用classLoader相关知识解决</p><h2 id="_4-2-验证" tabindex="-1"><a class="header-anchor" href="#_4-2-验证"><span>4.2 验证</span></a></h2><p>加载完成后，class里定义的类结构就进入了内存的方法区。</p><p>而接下来，验证是连接阶段的第一步。实际上，验证和上面的加载是交互进行的（比如class文件格式验证）。</p><p>而之所以把验证放在加载的后面，是因为除了基本的class文件格式，还需要其他很多验证，我们逐个来看：</p><h3 id="_4-2-1-文件格式验证" tabindex="-1"><a class="header-anchor" href="#_4-2-1-文件格式验证"><span>4.2.1 文件格式验证</span></a></h3><p>这个好理解，就是验证加载的字节码是不是符合规范</p><ul><li>是不是CAFEBABYE开头</li><li>主次版本号是否在当前jvm虚拟机可运行的范围内</li><li>常量池类型对不对</li><li>有没有其他不可识别的信息</li><li>……等</li></ul><p>总之，根据我们上节讲的字节码分析，要满足合法的字节码约束</p><h3 id="_4-2-2-元数据验证" tabindex="-1"><a class="header-anchor" href="#_4-2-2-元数据验证"><span>4.2.2 元数据验证</span></a></h3><p>到java语法级别了。这个阶段主要验证属性、字段、类关系、方法等是否合规</p><ul><li>是否有父类？除了Object其他类必须有</li><li>是否继承了不该被继承的类，比如final</li><li>是不是抽象类，是的话，方法都完备了没</li><li>字段有没问题？是不是覆盖了父类里的final</li><li>……等</li></ul><p>总之，经过这个阶段，你的类对象结构是ok的了</p><h3 id="_4-2-3-字节码验证" tabindex="-1"><a class="header-anchor" href="#_4-2-3-字节码验证"><span>4.2.3 字节码验证</span></a></h3><p>最复杂的一个阶段。</p><p>等等，字节码前面不是验证过了吗？咋还要验证？</p><p>上面的验证是基本字节表格式验证。而这里主要验证class里定义的方法，看方法内部的code是否合法。</p><ul><li>类型转换是不是有问题？</li><li>指令是否跳到了方法外的字节码上？</li><li>……</li></ul><p>经过本阶段，可以确保你的代码执行时，不会发生大的意外</p><p>注意！不是完全不会发生。比如你写了一段代码，jvm只会知道你的方法执行时符合系统规则。</p><p>它也不知道你会不会执行很长很长时间导致系统卡死</p><h3 id="_4-2-4-符号引用验证" tabindex="-1"><a class="header-anchor" href="#_4-2-4-符号引用验证"><span>4.2.4 符号引用验证</span></a></h3><p>最后一个阶段。</p><p>这个阶段也好理解，我们上面的字节码解读时，知道字节码里有的是直接引用，有的是指向了其他的字节码地址。</p><p>而符号引用验证的就是，这些引用的对应的内容是否合法。</p><ul><li>utf8里记了某个类的名字，这个类存在不？</li><li>方法或字段引用，这些方法在对应的类里存在不存在？</li><li>类、字段、方法等上面的可见性是否合法</li><li>……</li></ul><h2 id="_4-3-准备" tabindex="-1"><a class="header-anchor" href="#_4-3-准备"><span>4.3 准备</span></a></h2><p>这个阶段为class中定义的各种类变量分配内存，并赋初始值。</p><p>所做的事情好理解，但是要注意几点：</p><h3 id="_4-3-1-变量类型" tabindex="-1"><a class="header-anchor" href="#_4-3-1-变量类型"><span>4.3.1 变量类型</span></a></h3><p>注意是类变量，也就是类里的静态变量，而不是new的那些实例变量。new的在下面的初始化阶段</p><ul><li>类变量 = 静态变量</li><li>实例变量 = 实例化new出来的那些</li></ul><h3 id="_4-3-2-存储位置" tabindex="-1"><a class="header-anchor" href="#_4-3-2-存储位置"><span>4.3.2 存储位置</span></a></h3><p>理论上这些值都在方法区里，但是注意，方法区本身就是一个逻辑概念。</p><p>1.6里，在永久代</p><p>1.8以后，静态类变量如果是一个对象，其实它在堆里。这个上面我们讲方法区的时候验证过。</p><h3 id="_4-3-3-初始化值" tabindex="-1"><a class="header-anchor" href="#_4-3-3-初始化值"><span>4.3.3 初始化值</span></a></h3><p>这个值进入了内存，那到底内存里放的value是啥？</p><p>注意！</p><p>即便是static变量，它在这个阶段初始化进内存的依然是它的初始值！</p><p>而不是你想要什么就是什么。</p><p>看下面两个实例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//普通类变量：在准备阶段为它开了内存空间，但是它的value是int的初始值，也就是 0！</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//而真正的123赋值，是在类构造器，也就是下面的初始化阶段</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 123</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//final修饰的类变量，编译成字节码后，是一个ConstantValue类型</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//这种类型，在准备阶段，直接给定值123，后期也没有二次初始化一说</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 123</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-4-解析" tabindex="-1"><a class="header-anchor" href="#_4-4-解析"><span>4.4 解析</span></a></h2><p>解析阶段开始解析类之间的关系，需要关联的类被加载。</p><p>这涉及到：</p><ul><li>类或接口的解析：类相关的父子继承，实现的接口都有哪些类型？</li><li>字段的解析：字段对应的类型？</li><li>方法的解析：方法的参数、返回值、关联了哪些类型</li><li>接口方法的解析：接口上的类型？</li></ul><p>经过解析后，当前class里的方法字段父子继承等对象级别的关系解析完成。</p><p>这些操作上相关的类信息也被加载。</p><h2 id="_4-4-初始化" tabindex="-1"><a class="header-anchor" href="#_4-4-初始化"><span>4.4 初始化</span></a></h2><h3 id="_4-4-1-概述" tabindex="-1"><a class="header-anchor" href="#_4-4-1-概述"><span>4.4.1 概述</span></a></h3><p>最后一个步骤，经过这个步骤后，类信息完全进入了jvm内存，直到它被垃圾回收器回收。</p><p>前面几个阶段都是虚拟机来搞定的。我们也干涉不了，从代码上只能遵从它的语法要求。</p><p>而这个阶段，是赋值，才是我们应用程序中编写的有主导权的地方</p><p>在准备阶段，jvm已经初始化了对应的内存空间，final也有了自己的值。但是其他类变量，是在这里赋值完成的。</p><p>也就是我们说的：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 123</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这行代码的123才真正赋值完成。</p><h3 id="_4-4-2-两个初始化" tabindex="-1"><a class="header-anchor" href="#_4-4-2-两个初始化"><span>4.4.2 两个初始化</span></a></h3><p>1）类变量与实例变量的区分</p><p>注意一件事情！</p><p>这里所说的初始化是一个class类加载到内存的过程，所谓的初始化值得是类里定义的类变量。也就是静态变量。</p><p>这个初始化要和new一个类区分开来。new的是实例变量，是在执行阶段才创建的。</p><p>2）实例变量创建的过程</p><p>当我们在方法里写了一段代码，执行过程中，要new一个类的时候，会发生以下事情：</p><ul><li>在方法区中找到对应类型的类信息</li><li>在当前方法栈帧的本地变量表中放置一个reference指针</li><li>在堆中开辟一块空间，放这个对象的实例</li><li>将指针指向堆里对象的地址，完工！</li></ul><h1 id="_5、对象创建" tabindex="-1"><a class="header-anchor" href="#_5、对象创建"><span>5、对象创建</span></a></h1><p>前面我们介绍的是从class字节码文件加载到jvm内存的过程。</p><p>接下来，我们看jvm里的代码跑起来以后，在运行过程中，对象的创建和销毁在内存中经历了什么样的事情。</p><h2 id="_5-1-对象创建" tabindex="-1"><a class="header-anchor" href="#_5-1-对象创建"><span>5.1 对象创建</span></a></h2><h3 id="_5-1-1-概述" tabindex="-1"><a class="header-anchor" href="#_5-1-1-概述"><span>5.1.1 概述</span></a></h3><p>从你new一个对象开始，发生了什么？</p><p>遇到new指令，jvm首先要做的事是检查有没有这个类，没有的话，加载它！</p><h3 id="_5-1-2-内存分配" tabindex="-1"><a class="header-anchor" href="#_5-1-2-内存分配"><span>5.1.2 内存分配</span></a></h3><p>类加载检查通过后，就要给新对象分配内存。</p><p>因为一个类型确定后，它内部定义了哪些结构哪些值，所需要的内存空间也就确定了。先给他划出来。</p><p>（具体对象的内存布局，在下一小节）</p><p>但是这个内存分配，具体怎么划出来，有不同的方式：</p><p>1）指针碰撞（Bump The Pointer）</p><p>这种分配前提是内存中有整片连续的空间，用的在一边，空闲的在另一边，一个指针指向分界线。</p><p>需要多少指针往空闲那边移动多少，直接划分出来一段，给当前对象，完工。</p><p><img src="`+js+'" alt="image-20210331153504656"></p><p>2）空闲列表（Free List）</p><p>那如果jvm堆不那么规整呢？用的和没用的交叉在一起，也就是我们所说的内存碎片。</p><p>这种情况就需要我们单独有一张表来记录，哪些内存块是空的。</p><p>分配的时候查表，找到大小够用的一块，分配给对象，同时更新列表。</p><p>具体哪种方式，和我们的垃圾回收器有关系。有的垃圾回收器会对内存做整理压缩，那就指针碰撞简单高效。如果没有压缩功能，那只能是采用空闲列表</p><p>这部分详细的垃圾回收在下面的第6小节（内容很多！）</p><p>3）并发性</p><p>无论指针移动还是空闲列表的同一个指针空间，在并发分配的情况下会不会有问题？</p><p>很聪明！确实有并发问题。那jvm是如何解决的呢？</p><p>方式一：cas原子操作 + 失败重试</p><p><img src="'+Ss+'" alt="image-20210331160410760"></p><p>方式二：本地线程分配缓冲（TLAB）</p><p>全称是 Thread Local Allocation Buffer，需要 -XX:+/-UseTLAB</p><p>我们知道，对于栈、计数器，每个线程独享，堆是共享的。</p><p>但实际上，我们可以让线程在创建时，先独享划走一部分堆。</p><p>那么线程创建对象需要内存时，可以在自己划走的堆上先操作。相当于每个线程批发了一批内存先用着。</p><p>当前线程空间不够时，再去公共堆上申请，这样就减少了并发冲突的机会。当然也多少有点浪费</p><h2 id="_5-2-内存布局" tabindex="-1"><a class="header-anchor" href="#_5-2-内存布局"><span>5.2 内存布局</span></a></h2><p>上面我们给这个对象分配好了内存空间，那么问题来了。对象拿走的这块内存，它都写了些啥进去呢？</p><p>对象在堆上的布局，可以分为三个部分：对象头、实例数据、对齐填充。</p><p><img src="'+Xs+'" alt="image-20210331164644697"></p><p><img src="'+Ms+'" alt="image-20230928164306371"></p><h3 id="_5-2-1-对象头" tabindex="-1"><a class="header-anchor" href="#_5-2-1-对象头"><span>5.2.1 对象头</span></a></h3><p>对象头一般分为两部分，Mark Word 和 类型指针（Hotspot）</p><p>1）Mark Word，官方叫法，其实就是存储对象自己运行时的数据</p><p>如哈希码、GC分代年龄、锁状态标记、线程持有的锁、偏向的线程id……（不用记）</p><p>2）类型指针</p><p>指向当前对象的类型。也就是方法区里，类信息的地址。</p><p>当然这里不是绝对的，hotspot这么设计。在5.3对象访问一节，还会看到其他方式。</p><h3 id="_5-2-2-实例数据" tabindex="-1"><a class="header-anchor" href="#_5-2-2-实例数据"><span>5.2.2 实例数据</span></a></h3><p>对象里各个字段的值。这个好理解。</p><p>long，double，int等长度都是固定的</p><p>string、对象类型等是个地址，指向其他外部堆空间</p><h3 id="_5-2-3-对齐填充" tabindex="-1"><a class="header-anchor" href="#_5-2-3-对齐填充"><span>5.2.3 对齐填充</span></a></h3><p>不是必须的。就是个占位符而已。</p><p>Hotspot规定的，内存管理系统要求对象的大小必须是8字节的整数倍。</p><p>这个在对象头上，已经被精心设计过，满足要求。</p><p>但是！实例数据部分不一定。如果没有对齐的话，通过这里的对齐填充补满它。没有别的意义。</p><h2 id="_5-3-对象的访问" tabindex="-1"><a class="header-anchor" href="#_5-3-对象的访问"><span>5.3 对象的访问</span></a></h2><p>对象创建了，就要用，它在堆里。</p><p>我们的程序运行时，大家知道，每一个方法相关的变量信息都在栈里。那么怎么找到这个对象呢？</p><p>一般来讲，两种方案：</p><h3 id="_5-3-1-句柄访问" tabindex="-1"><a class="header-anchor" href="#_5-3-1-句柄访问"><span>5.3.1 句柄访问</span></a></h3><p><img src="'+Gs+'" alt="image-20210331114434625"></p><p>句柄方式：</p><p>栈指针指向堆里的一个句柄的地址，这个句柄再定义俩指针分别指向类型和实例</p><p>很显然，垃圾回收移动对象的话只需要改句柄即可，不会波及到栈，但是多了一次寻址操作</p><h3 id="_5-3-2-直接地址" tabindex="-1"><a class="header-anchor" href="#_5-3-2-直接地址"><span>5.3.2 直接地址</span></a></h3><p><img src="'+zs+`" alt="image-20210331114645139"></p><p>直接地址：</p><p>栈指针指向的就是实例本身的地址，在实例里封装一个指针指向它自己的类型</p><p>很显然，垃圾回收移动对象要改栈里的地址值，但是它减少了一次寻址操作。</p><p><em>备注：hostspot使用的是直接地址方式</em></p><h1 id="_6、对象的销毁" tabindex="-1"><a class="header-anchor" href="#_6、对象的销毁"><span>6、对象的销毁</span></a></h1><p>java语言开始学习的时候，就骄傲的告诉大家作为一个java程序员我们具有c++们羡慕不已的技能：不用关心内存是怎么收回来的。</p><p>前面讲的都是类、对象是怎么来的，这节我们讲讲它是怎么没的。</p><h2 id="_6-1-jvm参数" tabindex="-1"><a class="header-anchor" href="#_6-1-jvm参数"><span>6.1 jvm参数</span></a></h2><p>在学垃圾回收器之前，我们先要知道，jvm参数是怎么回事。因为配置各种回收器，必须对应各种参数设置。</p><p>在jvm中有很多的参数可以进行设置，绝大部分的参数保持默认即可。</p><h3 id="_6-1-1-分类" tabindex="-1"><a class="header-anchor" href="#_6-1-1-分类"><span>6.1.1 分类</span></a></h3><p>jvm的参数类型看上去杂乱，其实一共就三类，分别是：</p><ul><li><p>标准参数（-）</p><p>所有的JVM实现都必须实现这些参数的功能，而且向后兼容</p><ul><li>-help</li><li>-version</li></ul></li><li><p>非标准参数（-X）</p><p>默认jvm实现这些参数的功能，但是并不保证所有jvm实现都满足，且不保证向后兼容</p><ul><li>-Xint</li><li>-Xcomp</li></ul></li><li><p>非Stable参数（-XX）</p><p>各个jvm实现会有所不同，将来可能会随时取消，需要慎重使用</p><ul><li>-XX:newSize</li><li>-XX:+UseSerialGC</li></ul></li></ul><blockquote><p>在使用X或XX参数的时候，一定要先知道自己的jdk版本，并查对应的手册确认。</p></blockquote><h3 id="_6-1-2-标准参数" tabindex="-1"><a class="header-anchor" href="#_6-1-2-标准参数"><span>6.1.2 标准参数</span></a></h3><p>1）概述</p><p>jvm的标准参数，一般都是很稳定的，在未来的JVM版本中不会改变。</p><p>使用<code>java -help</code>列出来的就是标准参数。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>#打印帮助信息</span></span>
<span class="line"><span>shawn@macpro:~ &gt; java -help</span></span>
<span class="line"><span>用法：java [options] &lt;主类&gt; [args...]</span></span>
<span class="line"><span>           （执行类）</span></span>
<span class="line"><span>   或  java [options] -jar &lt;jar 文件&gt; [args...]</span></span>
<span class="line"><span>           （执行 jar 文件）</span></span>
<span class="line"><span>……</span></span>
<span class="line"><span>此处省略n行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图片效果：</p><p><img src="`+qs+`" alt="image-20220830175025468"></p><p>2）实例一</p><p>我们最熟悉的jdk版本查看 <code>java -version</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">shawn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">macpro</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">~</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">version</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">java version </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">11.0.2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2019</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">01</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">15</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> LTS   #版本号</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SE Runtime Environment </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">18.9</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">11.0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">9</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">LTS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Java </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HotSpot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 64</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Bit Server VM </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">18.9</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">11.0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">9</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">LTS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> mixed mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  #运行模式：server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>附：关于运行模式（了解）</p><p>可以通过<code>-server</code>或<code>-client</code>设置JVM的运行参数</p><ul><li>Server VM的初始堆空间会大一些，默认使用的是并行垃圾回收期，启动慢运行快。</li><li>Client VM相对来讲会保守一些，初始堆空间会小一些，使用的是串行垃圾回收期，启动快运行慢。</li><li>JVM在启动的时候会根据硬件和操作系统自动选择使用Server还是Client类型的JVM。</li><li>32位操作系统 <ul><li>如果是Windows系统，不论硬件配置如何，都默认使用Client类型的JVM。</li><li>如果是其他操作系统上，2G，2核以上默认使用server模式，否则使用client模式。</li></ul></li><li>64位操作系统 <ul><li>只有server类型，不支持client类型。</li></ul></li></ul><p><img src="`+Js+`" alt="image-20220830180020170"></p><p>ps: <code>-showversion</code>展示版本</p><p>3）实例二</p><p>通过<code>-D</code>设置系统属性参数</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestJVM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //获取命令行 -D设置的参数</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">str</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Ts+'" alt="image-20220830175226283"></p><p>将会输出nbchen</p><p><img src="'+Ps+`" alt="image-20220830175317648"></p><h3 id="_6-1-3-x参数" tabindex="-1"><a class="header-anchor" href="#_6-1-3-x参数"><span>6.1.3 -X参数</span></a></h3><p>1）概述</p><p>jvm的-X参数是非标准参数，也就意味着，在不同版本的jvm中，参数可能会有所不同</p><p>可以通过<code>java -X</code>查看非标准参数</p><p>这部分参数非常多，知道常用的几个即可</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>[root@node01 test]# java -X</span></span>
<span class="line"><span>    -Xmixed           混合模式执行 (默认)  #了解！</span></span>
<span class="line"><span>    -Xint             仅解释模式执行  #了解！</span></span>
<span class="line"><span>    -Xbootclasspath:&lt;用 : 分隔的目录和 zip/jar 文件&gt;</span></span>
<span class="line"><span>                      设置搜索路径以引导类和资源</span></span>
<span class="line"><span>    -Xbootclasspath/a:&lt;用 : 分隔的目录和 zip/jar 文件&gt;</span></span>
<span class="line"><span>                      附加在引导类路径末尾</span></span>
<span class="line"><span>    -Xbootclasspath/p:&lt;用 : 分隔的目录和 zip/jar 文件&gt;</span></span>
<span class="line"><span>                      置于引导类路径之前</span></span>
<span class="line"><span>    -Xdiag            显示附加诊断消息</span></span>
<span class="line"><span>    -Xnoclassgc       禁用类垃圾收集</span></span>
<span class="line"><span>    -Xincgc           启用增量垃圾收集</span></span>
<span class="line"><span>    -Xloggc:&lt;file&gt;    将 GC 状态记录在文件中 (带时间戳)</span></span>
<span class="line"><span>    -Xbatch           禁用后台编译</span></span>
<span class="line"><span>    -Xms&lt;size&gt;        设置初始 Java 堆大小     #掌握！</span></span>
<span class="line"><span>    -Xmx&lt;size&gt;        设置最大 Java 堆大小     #掌握！</span></span>
<span class="line"><span>    -Xss&lt;size&gt;        设置 Java 线程堆栈大小   #掌握！</span></span>
<span class="line"><span>    -Xprof            输出 cpu 配置文件数据</span></span>
<span class="line"><span>    -Xfuture          启用最严格的检查, 预期将来的默认值</span></span>
<span class="line"><span>    -Xrs              减少 Java/VM 对操作系统信号的使用 (请参阅文档)</span></span>
<span class="line"><span>    -Xcheck:jni       对 JNI 函数执行其他检查</span></span>
<span class="line"><span>    -Xshare:off       不尝试使用共享类数据</span></span>
<span class="line"><span>    -Xshare:auto      在可能的情况下使用共享类数据 (默认)</span></span>
<span class="line"><span>    -Xshare:on        要求使用共享类数据, 否则将失败。</span></span>
<span class="line"><span>    -XshowSettings    显示所有设置并继续</span></span>
<span class="line"><span>    -XshowSettings:all</span></span>
<span class="line"><span>                      显示所有设置并继续</span></span>
<span class="line"><span>    -XshowSettings:vm 显示所有与 vm 相关的设置并继续</span></span>
<span class="line"><span>    -XshowSettings:properties</span></span>
<span class="line"><span>                      显示所有属性设置并继续</span></span>
<span class="line"><span>    -XshowSettings:locale</span></span>
<span class="line"><span>                      显示所有与区域设置相关的设置并继续</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-X 选项是非标准选项, 如有更改, 恕不另行通知。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图片效果：</p><p><img src="`+Os+`" alt="image-20220830180208969"></p><p>2）案例一：<code>-Xint</code>、<code>-Xcomp</code>、<code>-Xmixed</code></p><ul><li><p>在解释模式(interpreted mode)下，<code>-Xint</code>标记会强制JVM执行所有的字节码，当然这会降低运行速度，通常低10倍或更多。</p></li><li><p><code>-Xcomp</code>参数与它（-Xint）正好相反，JVM在第一次使用时会把所有的字节码编译成本地代码，从而带来最大程度的优化。</p><ul><li>然而，很多应用在使用-Xcomp也会有一些性能损失，当然这比使用-Xint损失的少，原因是-xcomp没有让JVM启用JIT编译器的全部功能。JIT编译器可以对是否需要编译做判断，如果所有代码都进行编译的话，对于一些只执行一次的代码就没有意义了。</li></ul></li><li><p><code>-Xmixed</code>是混合模式，将解释模式与编译模式进行混合使用，由jvm自己决定，<strong>这是jvm默认的模式，也是推荐使用的模式。</strong></p></li></ul><p>示例：强制设置运行模式</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>#强制设置为解释模式</span></span>
<span class="line"><span>shawn@macpro:~ &gt; java -Xint -version</span></span>
<span class="line"><span>java version &quot;11.0.2&quot; 2019-01-15 LTS</span></span>
<span class="line"><span>Java(TM) SE Runtime Environment 18.9 (build 11.0.2+9-LTS)</span></span>
<span class="line"><span>Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.2+9-LTS, interpreted mode)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#强制设置为编译模式</span></span>
<span class="line"><span>shawn@macpro:~ &gt; java -Xcomp -version</span></span>
<span class="line"><span>java version &quot;11.0.2&quot; 2019-01-15 LTS</span></span>
<span class="line"><span>Java(TM) SE Runtime Environment 18.9 (build 11.0.2+9-LTS)</span></span>
<span class="line"><span>Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.2+9-LTS, compiled mode)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#默认的混合模式</span></span>
<span class="line"><span>shawn@macpro:~ &gt; java -Xmixed -version</span></span>
<span class="line"><span>java version &quot;11.0.2&quot; 2019-01-15 LTS</span></span>
<span class="line"><span>Java(TM) SE Runtime Environment 18.9 (build 11.0.2+9-LTS)</span></span>
<span class="line"><span>Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.2+9-LTS, mixed mode)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图片效果：</p><p><img src="`+ws+'" alt="image-20220830180550626"></p><p>3）案例二：-Xms与-Xmx参数</p><p><code>-Xms</code>与<code>-Xmx</code>分别是设置jvm的堆内存的初始大小和最大大小。</p><ul><li><code>-Xmx2048m</code>：等价于<code>-XX:MaxHeapSize</code>，设置JVM<strong>最大堆内存</strong>为2048M。</li><li><code>-Xms512m</code>：等价于<code>-XX:InitialHeapSize</code>，设置JVM<strong>初始堆内存</strong>为512M。</li></ul><p><img src="'+Ks+`" alt="image-20220830181511968"></p><p>具体案例前面设置溢出的时候配置过，不再赘述。</p><p>比如分配：-Xmx20m -Xms5m</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Xmx=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Runtime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getRuntime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">maxMemory</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024.0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">M</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Xmx=19.375M</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">free mem=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Runtime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getRuntime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">freeMemory</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024.0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">M</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // free mem=4.342750549316406M</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">total mem=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Runtime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getRuntime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">totalMemory</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024.0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">M</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // total mem=4.875M</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">----------------------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">byte</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> byte</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">分配了1M空间给数组</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">分配了1M空间给数组</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Xmx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">19</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">375M</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">free mem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">4791183471679688M</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">total mem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">875M</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Java会尽可能维持在最小堆</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">----------------------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> byte</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">分配了4M空间给数组</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">分配了4M空间给数组</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Xmx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">19</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">375M</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">free mem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">5899810791015625M</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">total mem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">9</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">00390625M</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 总内存变多了</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">----------------------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">gc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">回收内存</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Xmx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">19</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">375M</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">free mem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">354591369628906M</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //空闲内存增多</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">total mem</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">75390625M</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思考：</p><ul><li><code>-Xmx</code> 和 <code>–Xms</code> 应该保持一个什么关系，可以让系统的性能尽可能的好呢？</li><li>如果你要做一个Java的桌面产品，需要绑定JRE，但是JRE又很大，你如何做一下JRE的瘦身呢？</li></ul><h3 id="_6-1-4-xx参数" tabindex="-1"><a class="header-anchor" href="#_6-1-4-xx参数"><span>6.1.4 -XX参数</span></a></h3><p>-XX参数也是非标准参数，主要用于改变jvm的一些基础行为，比如垃圾回收行为、jvm的调优、输出debug调试信息等。</p><p>可以通过以下方式查看（非常多！）：</p><ul><li>java <code>-XX:+PrintFlagsFinal</code> ： 被修改过，最终生效的配置</li><li>java <code>-XX:+PrintFlagsInitial</code> ： jvm初始化的配置</li></ul><p><code>-XX</code>参数的使用有2种方式，一种是boolean类型，一种是非boolean类型：</p><ul><li>boolean类型 <ul><li>格式：<code>-XX:[+-]&lt;name&gt;</code> 表示启用或禁用<code>&lt;name&gt;</code>属性.(+表示启用，-表示禁用)</li><li>如：<code>-XX:+DisableExplicitGC</code> 表示禁用手动调用gc操作，也就是说调用System.gc()无效</li></ul></li><li>非boolean类型 <ul><li>格式：<code>-XX:&lt;name&gt;=&lt;value&gt;</code> 表示<code>&lt;name&gt;</code>属性的值为<code>&lt;value&gt;</code></li><li>如：<code>-XX:NewRatio=4</code> 表示新生代(eden+2*s)和老年代的比值为1:4,即年轻代占堆的1/5 <ul><li>扩展：<code>-Xmn</code> 设置新生代大小</li><li><code>-XX:SurvivorRatio</code>设置两个Survivor区和eden的比。8表示 两个Survivor :eden=2:8，即一个Survivor占年轻代的1/10</li></ul></li></ul></li></ul><p><img src="`+Rs+`" alt="image-20220830181222212"></p><p>这类参数的案例，下面多得是，我们到垃圾收集一节再详细讲解。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>#行为参数(功能开关)</span></span>
<span class="line"><span>-XX:-DisableExplicitGC  禁止调用System.gc()；但jvm的gc仍然有效</span></span>
<span class="line"><span>-XX:+MaxFDLimit 最大化文件描述符的数量限制</span></span>
<span class="line"><span>-XX:+ScavengeBeforeFullGC   新生代GC优先于Full GC执行</span></span>
<span class="line"><span>-XX:+UseGCOverheadLimit 在抛出OOM之前限制jvm耗费在GC上的时间比例</span></span>
<span class="line"><span>-XX:-UseConcMarkSweepGC 对老生代采用并发标记交换算法进行GC</span></span>
<span class="line"><span>-XX:-UseParallelGC  启用并行GC</span></span>
<span class="line"><span>-XX:-UseParallelOldGC   对Full GC启用并行，当-XX:-UseParallelGC启用时该项自动启用</span></span>
<span class="line"><span>-XX:-UseSerialGC    启用串行GC</span></span>
<span class="line"><span>-XX:+UseThreadPriorities    启用本地线程优先级</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#性能调优</span></span>
<span class="line"><span>-XX:LargePageSizeInBytes=4m 设置用于Java堆的大页面尺寸</span></span>
<span class="line"><span>-XX:MaxHeapFreeRatio=70 GC后java堆中空闲量占的最大比例</span></span>
<span class="line"><span>-XX:MaxNewSize=size 新生成对象能占用内存的最大值</span></span>
<span class="line"><span>-XX:MaxPermSize=64m 老生代对象能占用内存的最大值</span></span>
<span class="line"><span>-XX:MinHeapFreeRatio=40 GC后java堆中空闲量占的最小比例</span></span>
<span class="line"><span>-XX:NewRatio=2  新生代内存容量与老生代内存容量的比例</span></span>
<span class="line"><span>-XX:NewSize=2.125m  新生代对象生成时占用内存的默认值</span></span>
<span class="line"><span>-XX:ReservedCodeCacheSize=32m   保留代码占用的内存容量</span></span>
<span class="line"><span>-XX:ThreadStackSize=512 设置线程栈大小，若为0则使用系统默认值</span></span>
<span class="line"><span>-XX:+UseLargePages  使用大页面内存</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#调试参数</span></span>
<span class="line"><span>-XX:-CITime 打印消耗在JIT编译的时间</span></span>
<span class="line"><span>-XX:ErrorFile=./hs_err_pid&lt;pid&gt;.log 保存错误日志或者数据到文件中</span></span>
<span class="line"><span>-XX:-ExtendedDTraceProbes   开启solaris特有的dtrace探针</span></span>
<span class="line"><span>-XX:HeapDumpPath=./java_pid&lt;pid&gt;.hprof  指定导出堆信息时的路径或文件名</span></span>
<span class="line"><span>-XX:-HeapDumpOnOutOfMemoryError 当首次遭遇OOM时导出此时堆中相关信息</span></span>
<span class="line"><span>-XX:OnError=&quot;&lt;cmd args&gt;;&lt;cmd args&gt;&quot; 出现致命ERROR之后运行自定义命令</span></span>
<span class="line"><span>-XX:OnOutOfMemoryError=&quot;&lt;cmd args&gt;;&lt;cmd args&gt;&quot;  当首次遭遇OOM时执行自定义命令</span></span>
<span class="line"><span>-XX:-PrintClassHistogram    遇到Ctrl+Break后打印类实例的柱状信息，与jmap -histo功能相同</span></span>
<span class="line"><span>-XX:-PrintConcurrentLocks   遇到Ctrl-Break后打印并发锁的相关信息，与jstack -l功能相同</span></span>
<span class="line"><span>-XX:-PrintCommandLineFlags  打印在命令行中出现过的标记</span></span>
<span class="line"><span>-XX:-PrintCompilation   当一个方法被编译时打印相关信息</span></span>
<span class="line"><span>-XX:-PrintGC    每次GC时打印相关信息，也可以用-verbose:gc</span></span>
<span class="line"><span>-XX:-PrintGCDetails    每次GC时打印详细信息</span></span>
<span class="line"><span>-XX:-PrintGCTimeStamps  打印每次GC的时间戳</span></span>
<span class="line"><span>-XX:-TraceClassLoading  跟踪类的加载信息</span></span>
<span class="line"><span>-XX:-TraceClassLoadingPreorder  跟踪被引用到的所有类的加载信息</span></span>
<span class="line"><span>-XX:-TraceClassResolution   跟踪常量池</span></span>
<span class="line"><span>-XX:-TraceClassUnloading    跟踪类的卸载信息</span></span>
<span class="line"><span>-XX:-TraceLoaderConstraints 跟踪类加载器约束的相关信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-1-5-参数查询" tabindex="-1"><a class="header-anchor" href="#_6-1-5-参数查询"><span>6.1.5 参数查询</span></a></h3><p>运行时打印参数，可以通过<code>-XX:+PrintFlagsFinal</code>设置</p><p><img src="`+Ls+`" alt="image-20220830182151723"></p><p>如果想要查看正在运行的jvm就需要借助于jinfo命令查看。</p><p>1）起一个进程，让它处于运行中</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> App</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> )</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> throws</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> InterruptedException </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentTimeMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以时启动一个tonmcat，也是Java进程</p><p><img src="`+Vs+`" alt="image-20220830183048287"></p><p>2）jps查到他的进程号</p><p>除了<code>ps -ef</code>查看正再运行的Java进程，用jps也可以</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">shawn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">macpro</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">~</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> jps</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">44561</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2691</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Launcher</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2692</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> App</span></span>
<span class="line"><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2693</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Jps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>jps -l</code>还可以查看详细的运行包</p><p>图片效果：</p><p><img src="`+Is+`" alt="image-20220830182708026"></p><p>3）查询看运行参数</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">shawn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">macpro</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">~</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> jinfo </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">flags </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2692</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">VM</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Flags</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CICompilerCount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">InitialHeapSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">134217728</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MaxHeapSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2147483648</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MaxNewSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">715653120</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MinHeapDeltaBytes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">524288</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">NewSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">44564480</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OldSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">89653248</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">UseCompressedClassPointers </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">UseCompressedOops </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">UseFastUnorderedTimeStamps </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">UseParallelGC </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#查看某一参数的值，用法：jinfo </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">flag </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">参数名</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">进程id</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">shawn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">macpro</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">~</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> jinfo </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">flag MaxHeapSize </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2692</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MaxHeapSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2147483648</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图片效果：</p><p><img src="`+Ns+'" alt="image-20220830182854330"></p><p>查看单个效果:</p><p><img src="'+Hs+'" alt="image-20220830183016790"></p><h2 id="_6-2-垃圾回收概述" tabindex="-1"><a class="header-anchor" href="#_6-2-垃圾回收概述"><span>6.2 垃圾回收概述</span></a></h2><h3 id="垃圾回收背景" tabindex="-1"><a class="header-anchor" href="#垃圾回收背景"><span>垃圾回收背景</span></a></h3><p>实际上，垃圾回收并不是java首创的。垃圾收集的历史远比java语言本身还要久</p><p>最早使用垃圾回收功能的语言是Lisp，于1960年诞生于麻省理工学院。</p><p>Java中，GC(Garbage Collection)的对象是堆空间和永久区</p><h3 id="什么是垃圾回收" tabindex="-1"><a class="header-anchor" href="#什么是垃圾回收"><span>什么是垃圾回收？</span></a></h3><p>程序的运行必然需要申请内存资源，无效的对象资源如果不及时处理就会一直占有内存资源，最终将导致内存溢 出，所以对内存资源的管理是非常重要了。</p><h3 id="c-c-语言的垃圾回收" tabindex="-1"><a class="header-anchor" href="#c-c-语言的垃圾回收"><span>C/C++语言的垃圾回收</span></a></h3><p>在C/C++语言中，没有自动垃圾回收机制，是通过new关键字申请内存资源，通过delete关键字释放内存资源。 如果，程序员在某些位置没有写delete进行释放，那么申请的对象将一直占用内存资源，最终可能会导致内存溢 出。</p><h3 id="java语言的垃圾回收" tabindex="-1"><a class="header-anchor" href="#java语言的垃圾回收"><span>Java语言的垃圾回收</span></a></h3><p>为了让程序员更专注于代码的实现，而不用过多的考虑内存释放的问题，所以，在Java语言中，有了自动的垃圾回 收机制，也就是我们熟悉的GC。 有了垃圾回收机制后，程序员只需要关心内存的申请即可，内存的释放由系统自动识别完成。 换句话说，自动的垃圾回收的算法就会变得非常重要了，如果因为算法的不合理，导致内存资源一直没有释放，同 样也可能会导致内存溢出的。 当然，除了Java语言，C#、Python等语言也都有自动的垃圾回收机制。</p><h3 id="为什么要学垃圾回收-意义" tabindex="-1"><a class="header-anchor" href="#为什么要学垃圾回收-意义"><span>为什么要学垃圾回收/意义</span></a></h3><p>jdk发展到今天垃圾回收已经相当完善，为什么还要学习它？</p><ul><li>面试必问！（无力吐槽）</li><li>排查内存泄露、溢出等问题</li><li>系统默认配置不适合当前业务特殊场景的时候，必须手动调整参数</li></ul><h2 id="_6-3-回收事件三要素" tabindex="-1"><a class="header-anchor" href="#_6-3-回收事件三要素"><span>6.3 回收事件三要素</span></a></h2><p>语文老师告诉我们：任何事情发生一定有三要素：时间、地点、人物</p><h3 id="_6-3-1-在哪收-地点" tabindex="-1"><a class="header-anchor" href="#_6-3-1-在哪收-地点"><span>6.3.1 在哪收（地点）</span></a></h3><p>根据上面我们的学习，大家对jvm里的内存空间有了清晰的认识。那么：</p><ul><li><p>程序计数器、jvm虚拟机栈、本地方法栈，这些随着线程诞生和消亡，线程释放它就释放，无需回收。</p></li><li><p>方法区，这里是一些类信息和静态变量，也有回收的可能性，但是很鸡肋，收不回多少东西。</p><p>实际上，虚拟机规范也并不强制要求回收这里。</p></li><li><p>堆，这才是大头。因为运行期频繁创建和丢弃对象的事件都在这里发生！</p></li></ul><p>所以，谈回收我们主要看堆。</p><h3 id="_6-3-2-什么时候收-时间" tabindex="-1"><a class="header-anchor" href="#_6-3-2-什么时候收-时间"><span>6.3.2 什么时候收（时间）</span></a></h3><p>回收我们是不需要管的，那么必然有对应的机制，或者说什么条件下满足了，触发了jvm的内存回收。</p><p>哪些条件呢？</p><ul><li><p>在堆内存存储达到一定阈值之后</p><p>当年轻代或者老年代达到一定阈值，Java虚拟机无法再为新的对象分配内存空间了，那么Java虚拟机就会触发一次GC去回收掉那些已经不会再被使用到的对象</p></li><li><p>主动调用System.gc() 后尝试进行回收</p><p>手动调用System.gc()方法，通常这样会触发一次的Full GC，所以一般不推荐这个东西的使用，你会干扰jvm的运作</p></li></ul><h3 id="_6-3-3-回收谁-人物" tabindex="-1"><a class="header-anchor" href="#_6-3-3-回收谁-人物"><span>6.3.3 回收谁（人物）</span></a></h3><p>回收谁？哪些对象能够被回收，哪些还不能？总得有个判断标准。</p><p>在编程语言界，有两种办法判定一个对象是否已消亡：</p><h4 id="_6-3-3-1-引用计数法" tabindex="-1"><a class="header-anchor" href="#_6-3-3-1-引用计数法"><span>6.3.3.1 引用计数法</span></a></h4><p>引用计数是历史最悠久的一种算法，最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用。（了解即可，**因为JVM不用！**COM、ActionScript3、Python使用）</p><p>1）原理</p><p>假设有一个对象A，任何一个对象对A的引用，那么对象A的引用计数器+1，当引用失败时，对象A的引用计数器就-1，如果对象A的计数器的值为0，就说明对象A没有引用了，可以被回收。</p><p><img src="'+Us+'" alt="image-20220605092936434"></p><p>2）优缺点</p><p>优点：</p><ul><li>实时性较高，无需等到内存不够的时候，才开始回收，运行时根据对象的计数器是否为0，就可以直接回收。</li><li>在垃圾回收过程中，应用无需挂起。如果申请内存时，内存不足，则立刻报outofmember 错误。</li><li>区域性，更新对象的计数器时，只是影响到该对象，不会扫描全部对象。</li></ul><p>缺点：</p><ul><li>每次对象被引用时，都需要去更新计数器，有一点时间开销。</li><li>浪费CPU资源，即使内存够用，仍然在运行时进行计数器的统计。</li><li>无法解决循环引用问题。（最大的缺点）</li></ul><p><img src="'+Ws+`" alt="image-20220605093119151"></p><p>3）案例：什么是循环引用？</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>class TestA{</span></span>
<span class="line"><span>  public TestB b;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class TestB{</span></span>
<span class="line"><span>  public TestA a;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class Main{</span></span>
<span class="line"><span>    public static void main(String[] args){</span></span>
<span class="line"><span>        A a = new A();</span></span>
<span class="line"><span>        B b = new B();</span></span>
<span class="line"><span>        a.b=b;</span></span>
<span class="line"><span>        b.a=a;</span></span>
<span class="line"><span>        a = null; //释放资源</span></span>
<span class="line"><span>        b = null; //释放资源</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然a和b都为null，但是由于a和b存在循环引用，根据引用的理论，a和b永远都不会被回收。</p><p>事实上，以上代码我们在开发中是很可能存在的，我们的jvm也没有被撑爆。因为jvm没有采用这种算法。</p><p>那它用的啥呢？</p><h4 id="_6-3-3-2-可达性分析" tabindex="-1"><a class="header-anchor" href="#_6-3-3-2-可达性分析"><span>6.3.3.2 可达性分析</span></a></h4><p>1）概述</p><p>通过一系列称为“GC Roots”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain），如果某个对象到GC Roots间没有任何引用链相连，就说明从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的，就是可以回收的对象。</p><p>JVM用的是这种算法！</p><p><img src="`+Zs+`" alt="image-20200429102816516"></p><p>2）GC Roots清单</p><p>在JVM虚拟机中，可作为GC Roots的对象包括以下几种：</p><ul><li>在虚拟机栈（栈帧中的本地变量表）中引用的对象</li><li>在方法区中类静态属性引用的对象（类变量）。</li><li>在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。</li><li>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</li><li>所有被同步锁（synchronized关键字）持有的对象。</li><li>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。</li><li>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</li></ul><p>3）附：对象的四类引用</p><p>在java中，对象的引用主要有4种，从上到下级别依次降低。不同的引用回收的态度不同</p><ul><li>强引用 <ul><li>在程序代码之中普遍存在的引用赋值，即类似“Object obj=new Object()”这种引用关系。</li><li>无论任何情况下，内存用不回收，够就够，不够抛内存溢出异常。</li></ul></li><li>软引用 <ul><li>用来描述一些还有用，但非必须的对象。被SoftReference包装的那些类</li><li>先回收没用的对象，收完后发现还不够，再触发二次回收，对软引用对象下手。</li></ul></li><li>弱引用 <ul><li>用来描述那些非必须对象，强度比软引用更弱。被WeakReference包装的那些类</li><li>无论当前内存是否足够，垃圾收集一旦发生，弱引用直接回收。</li></ul></li><li>虚引用（实际开发基本不用） <ul><li>最弱的一种引用关系，一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。</li><li>为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。</li></ul></li></ul><h2 id="_6-4-回收算法-策略" tabindex="-1"><a class="header-anchor" href="#_6-4-回收算法-策略"><span>6.4 回收算法（策略）</span></a></h2><p>回收是做一件事情，要完成这件事，我们需要采用什么样的策略？用什么样的思想会更稳妥？</p><p>这就涉及到回收的具体算法</p><p>自动化的管理内存资源，垃圾回收机制必须要有一套算法来进行计算，哪些是有效的对象，哪些是无效的对象，对于无效的对象就要进行回收处理。</p><p>常见的垃圾回收算法有：引用计数法、标记清除法、标记压缩法、复制算法、分代算法等。</p><h3 id="引用计数法" tabindex="-1"><a class="header-anchor" href="#引用计数法"><span><strong>引用计数法</strong></span></a></h3><p>引用计数是历史最悠久的一种算法，最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用。</p><p><strong>原理：</strong></p><p>假设有一个对象A，任何一个对象对A的引用，那么对象A的引用计数器+1，当引用失败时，对象A的引用计数器就-1，如果对象A的计数器的值为0，就说明对象A没有引用了，可以被回收。</p><p><strong>优点：</strong></p><ul><li>实时性较高，无需等到内存不够的时候，才开始回收，运行时根据对象的计数器是否为0，就可以直接回收。</li><li>在垃圾回收过程中，应用无需挂起。如果申请内存时，内存不足，则立刻报outofmember 错误。</li><li>区域性，更新对象的计数器时，只是影响到该对象，不会扫描全部对象。</li></ul><p><strong>缺点：</strong></p><ul><li>每次对象被引用时，都需要去更新计数器，有一点时间开销。</li><li>浪费CPU资源，即使内存够用，仍然在运行时进行计数器的统计。</li><li>无法解决循环引用问题。<strong>（最大的缺点）</strong></li></ul><p><strong>什么是循环引用？</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestB</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestA</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        A</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        B</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        a </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        b </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然a和b都为null，但是由于a和b存在循环引用，这样a和b永远都不会被回收。</p><h3 id="标记清除法" tabindex="-1"><a class="header-anchor" href="#标记清除法"><span>标记清除法</span></a></h3><p>1）概述</p><p>标记清除算法，是将垃圾回收分为2个阶段，分别是标记和清除。</p><ul><li>标记：从根节点开始标记引用的对象。</li><li>清除：未被标记引用的对象就是垃圾对象，清理掉。</li></ul><p>标记清除法可以说是最基础的收集算法，因为后续的收集算法大多都是以标记-清除算法为基础，对其缺点进行改进而得到的。</p><p>2）原理/执行过程</p><p><img src="`+Ys+'" alt="image-20220915201654499"></p><p>这张图代表的是程序运行期间所有对象的状态，它们的标志位全部是0（也就是未标记，以下默认0就是未标记，1为已标记），假设这会儿有效内存空间耗尽了，JVM将会停止应用程序的运行并开启GC线程，然后开始进行标记工作，按照根搜索算法，标记完以后，对象的状态如下图。</p><p><img src="'+$s+'" alt="image-20220915201753250"></p><p>可以看到，按照根搜索算法，所有从root对象可达的对象就被标记为了存活的对象，此时已经完成了第一阶段标记。接下来，就要执行第二阶段清除了，那么清除完以后，剩下的对象以及对象的状态如下图所示。</p><p><img src="'+Qs+'" alt="image-20220915201850728"></p><p>可以看到，没有被标记的对象将会回收清除掉，而被标记的对象将会留下，并且会将标记位重新归0。接下来就不用说了，唤醒停止的程序线程，让程序继续运行即可。</p><p>3）优点：</p><ul><li>可以看到，标记清除算法解决了引用计数算法中的循环引用的问题，没有从root节点引用的对象都会被回收。</li></ul><p>4）缺点：</p><ul><li>执行效率较低，标记和清除两个动作都需要遍历所有的对象，并且在GC时，需要停止应用程序，对于交互性要求比较高的应用而言这个体验是非常差的。</li><li>通过标记清除算法清理出来的内存，碎片化较为严重，因为被回收的对象可能存在于内存的各个角落，所以清理出来的内存是不连贯的。</li></ul><p><img src="'+si+'" alt="image-20200429235159875"></p><blockquote><p>程序向JVM申请内存的时候,可能会认为这些&quot;碎片化&quot;的内存空间不足，不够用。而去别的地方申请内存空间。</p></blockquote><p>5）为什么要暂停?</p><p>因为标记要遍历所有对象，如果不断有新对象加入，没法确定标记关系，可能会把存活的对象也清除掉，所以必须要暂停。</p><h3 id="标记压缩算法" tabindex="-1"><a class="header-anchor" href="#标记压缩算法"><span>标记压缩算法</span></a></h3><p>1）概述</p><p>也叫标记-整理，标记压缩算法是在标记清除算法的基础之上，做了优化改进的算法。</p><p>和标记清除算法一样，也是从根节点开始，对对象的引用进行标记</p><p>在清理阶段，并不是简单的清理未标记的对象，而是将存活的对象压缩到内存的一端，然后<strong>清理边界以外的垃圾</strong>，从而解决了碎片化的问题。</p><p>2）执行过程： <img src="'+ii+'" alt="image-20200429235422031"></p><p>3）特点</p><ul><li>优点：该算法解决了<strong>标记清除算法的碎片化的问题，下一步分配内存的时候更方便</strong></li><li>缺点：多了一步整理操作，对象需要移动内存位置，效率也好不到哪去。</li></ul><h3 id="标记复制算法" tabindex="-1"><a class="header-anchor" href="#标记复制算法"><span>标记复制算法</span></a></h3><p>1）概述</p><p>复制算法的核心就是，将原有的内存空间一分为二，每次只用其中的一块，在垃圾回收时，将正在使用的对象复制到另一个内存空间中，然后将该内存空间清空，交换两个内存的角色，完成垃圾的回收。</p><p>如果内存中的垃圾对象较多，需要复制的对象就较少，这种情况下适合使用该方式并且效率比较高，反之，则不适合。</p><p>2）过程</p><p><img src="'+ai+'" alt="image-20200430001554975"></p><p>3）附：年轻代的标记复制算法</p><p>JVM中年轻代内存空间的回收就是典型的标记复制法</p><p><img src="'+ni+`" alt="image-20200430001725601"></p><ul><li>sruvivor区有两个，一个from，另一个叫to，这俩交替互换角色</li><li>1.在GC开始的时候，对象只会存在于Eden区和名为“From”的Survivor区，Survivor区“To”是空的。</li><li>2.紧接着进行GC，Eden区中所有存活的对象都会被复制到“To”，而在“From”区中，仍存活的对象会根据他们的年龄值来决定去向。年龄达到一定值(年龄阈值，可以通过-XX:MaxTenuringThreshold来设置) 的对象会被移动到年老代中，没有达到阈值的对象会被复制到“To”区域。</li><li>3.经过这次GC后，Eden区和From区已经被清空。这个时候，“From”和“To”会交换他们的角色，也就是新的“To”就是上次GC前的“From”，新的“From”就是上次GC前的“To”。不管怎样，都会保证名为To的Survivor区域是空的。</li><li>4.GC会一直重复这样的过程，直到“To”区被填满，“To”区被填满之后，会将所有对象移动到年老代中。</li></ul><p>4）优缺点</p><p>优点：</p><ul><li>在垃圾对象多的情况下，效率较高，因为要把存活的全部移动一遍</li><li>清理后，内存无碎片</li></ul><p>缺点：</p><ul><li>在垃圾对象比例少的情况下，不适用，如：年轻代这么用可以，老年代就不合适</li><li>分配的2块内存空间，在同一个时刻，只能使用一半，内存使用率较低</li></ul><h3 id="分代算法" tabindex="-1"><a class="header-anchor" href="#分代算法"><span>分代算法</span></a></h3><blockquote><p>前面介绍了多种回收算法，每一种算法都有自己的优点也有缺点，谁都不能替代谁，所以根据垃圾回收对象的特点进行选择，才是明智的选择。</p></blockquote><p>1）具体思想</p><p>确切的说，分代不算是一种算法，它是一种解决回收问题的思路：具体情况具体分析</p><p>在堆内存中，有些对象短暂存活有些则是长久存活，所以需要将堆内存进行分代，将短暂存活的对象放到一起，进行高频率的回收，长久存活的对象集中放到一起，进行低频率的回收</p><p>细粒度的控制不同区域，调节不同的回收频率，节约系统资源（回收期间系统要额外干活的！）。</p><p>分代算法其实就是这样的，根据回收对象的特点进行选择，<strong>在jvm中，年轻代(少量对象存活)适合使用复制算法，老年代(大量对象存活)适合使用标记清除或标记压缩算法。</strong></p><p>2）相关概念</p><ul><li>部分收集（Partial GC） <ul><li>新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。</li><li>老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。（CMS收集器）</li><li>混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。（G1收集器）</li></ul></li><li>整堆收集（Full GC） <ul><li>所有的内存整理一遍，包括堆和方法区。轻易不要触发</li></ul></li></ul><h2 id="_6-5-回收器-执行者" tabindex="-1"><a class="header-anchor" href="#_6-5-回收器-执行者"><span>6.5 回收器（执行者）</span></a></h2><p>前面我们讲了垃圾回收的算法，还需要有具体的实现。</p><p>策略有了，谁来执行呢？这事就落到任劳任怨的收集器头上了</p><p>在jvm中，实现了多种垃圾收集器，这些收集器种类繁多，看似乱七八糟，其实理清楚后很简单。</p><p>包括：串行垃圾收集器、并行垃圾收集器、CMS（并发）垃圾收集器、G1垃圾收集器，接下来，我们一个个的了解学习。</p><p>1）先明白几件事情</p><ul><li><p>用户线程：java程序运行后，用户不停请求操作jvm内存，这些称为用户线程</p></li><li><p>GC线程：jvm系统进行垃圾回收启动的线程</p></li><li><p>串行：GC采用单线程，收集时停掉用户线程</p></li><li><p>并行：GC采用多线程，收集时同样要停掉用户线程</p></li><li><p>并发：用户线程和GC线程同步进行，这意义就不一样了</p></li><li><p>STW：stop the world ，暂停响应用户线程，只提供给GC线程工作来回收垃圾（很不爽的事情）</p><ul><li>危害：长时间服务停止，没有响应遇到。HA系统，可能引起主备切换，严重危害生产环境。</li></ul></li><li><p>分代：垃圾收集器是要工作在某个代上的，可能是年轻代，老年代，有的可能两个代都能工作</p></li><li><p>组合：因为分代，所以得有组合，你懂得……</p></li></ul><p>2）准备案例</p><p>在开始前，我们先准备一个内存堆积的案例，下面学习收集器，只需要在启动时指定不同的XX参数即可：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">itcast</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ArrayList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Properties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Random</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestGC</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> throws</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Exception </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ArrayList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //模拟web中不停请求，不断地 产生新的数据(对象),随机的废弃对象(垃圾)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">            int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Random</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nextInt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentTimeMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> %</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                //模拟释放，如果恰好请求时间是偶数，清空列表</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">clear</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                //模拟业务，从db中查询了10000条记录</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                    Properties</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> properties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Properties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                    properties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">put</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">key_</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">value_</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentTimeMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                    list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">properties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">list大小为：</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            //模拟请求间隔，0-100ms随机</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5-1-串行" tabindex="-1"><a class="header-anchor" href="#_6-5-1-串行"><span>6.5.1 串行</span></a></h3><p>串行垃圾收集器，是指使用单线程进行垃圾回收，垃圾回收时，只有一个线程在工作，并且java应用中的所有线程都要暂停，等待垃圾回收的完成。这种现象称之为STW（Stop-The-World）。</p><p>对于交互性较强的应用而言，这种垃圾收集器是不能够接受的。</p><blockquote><p>一般在Javaweb应用中是不会采用该收集器的</p></blockquote><p>1）概述</p><p>其实是两个收集器，年轻代的叫 Serial ， 老年代的叫 Serial Old，很好记！</p><p>这是最基础的，历史最悠久的收集器。</p><p>听名字就知道，这个属于串行收集器，即：GC时，停掉用户线程，同时，GC本身也是只有一个线程在跑</p><p>2）原理</p><p>很简单，GC时暂停用户进程，新生代 Serial 采用复制算法，Serial Old采用标记整理算法。</p><p><img src="`+li+`" alt="image-20210406165830911"></p><p>3）优缺点</p><p>单线程 + STW，那么这个收集器还有存在的价值吗？</p><p>答案是：有！我们在吐槽单线程的同时，不要忘了，单线程带来的便捷性</p><p>实际上，Serial收集器依然是hotspot在客户端模式下的默认收集器，因为它足够简单有效，没有多线程GC的协调和额外开销，在单核或资源有限的环境下，单线程甚至比多线程还要高效。</p><p>而Serial Old则作为下面几款垃圾收集器的兜底措施，比如CMS、G1等处理不了老年代时，他们会自动启用SOld来做FullGC进行收集。</p><p>4）配置参数</p><p>在程序运行参数中添加2个参数，如下：</p><ul><li><code>-XX:+UseSerialGC</code>：指定年轻代和老年代都使用串行垃圾收集器，(新生代复制算法，老年代标记-压缩)</li><li><code>-XX:+PrintGCDetails</code>：打印垃圾回收的详细信息</li></ul><p>5）操作案例</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 为了测试GC，将堆的初始和最大内存都设置为16M</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># java代码使用本节开头的例子</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-XX:+UseSerialGC</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -XX:+PrintGCDetails</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Xms16m</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Xmx16m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+hi+`" alt="image-20210406170434507"></p><p>6）启动程序，可以看到下面信息：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GC </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Allocation</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Failure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">DefNew: 4416K-</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">512K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4928</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0046102</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 4416K-</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1973K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">15872</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0046533</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Times: user</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">0.00, real</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Full GC </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Allocation</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Failure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Tenured: 10944K-</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3107K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10944</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0085637</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 15871K-</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3107K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">15872</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Metaspace: 3496K-</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3496K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1056768</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0085974</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Times: user</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.02</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">0.00, real</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.01</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GC日志信息解读：</p><p>年轻代的内存GC前后的大小：</p><ul><li>DefNew：表示使用的是串行垃圾收集器。</li><li>4416K-&gt;512K (4928K)：表示，年轻代GC前，占有4416K内存，GC后，占有512K内存，总大小4928K</li><li>0.0046102 secs：表示，GC所用的时间，单位为秒。</li><li>4416K-&gt;1973K (15872K)：表示，GC前，堆内存占有4416K，GC后，占有1973K，总大小为15872K</li><li>Full GC：表示，内存空间全部进行GC，老年代、元空间</li></ul><h3 id="_6-5-2-并行" tabindex="-1"><a class="header-anchor" href="#_6-5-2-并行"><span>6.5.2 并行</span></a></h3><p>并行垃圾收集器在串行垃圾收集器的基础之上做了改进，将单线程改为了多线程进行垃圾回收，这样可以缩短垃圾回收的时间。（这里是指，并行能力较强的机器）</p><p>当然了，并行垃圾收集器在收集的过程中也会暂停应用程序，这个和串行垃圾回收器是一样的，只是并行执行，速度更快些，暂停的时间更短一些</p><p>1）概述</p><ul><li><p>ParNew收集器：</p><p>新生代的，<strong>无非就是将Serial的单线程换成多线程</strong>，它现在存在的唯一价值就是<strong>作为新生代收集器</strong>配合老年代的CMS收集器一起工作，并且在<strong>jdk9里也已不再推荐这套组合，而是推荐G1</strong>。</p><p>通过<code>-XX:+UseParNewGC</code>参数设置年轻代使用ParNew回收器，老年代使用的依然是串行收集器。</p></li></ul><p><img src="`+ei+`" alt="image-20220915204744944"></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#参数 </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-XX:+UseParNewGC</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -XX:+PrintGCDetails</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Xms16m</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Xmx16m</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#打印出的信息 </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GC </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Allocation</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Failure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ParNew: 4416K-</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">512K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4928</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0032106</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 4416K- </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1988K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">15872</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0032697</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Times: user</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">0.00, real</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由以上信息可以看出， ParNew: 使用的是ParNew收集器。其他信息和串行收集器一致。</p><blockquote><p>我们只需要知道的是：曾经，它存在过。</p></blockquote><ul><li><p>另外一对并行收集器：</p><p>Parallel Scavenge （新生代的） / Parallel Old （老年代的）</p></li></ul><p>关于并行收集器，我们重点看Parallel这一对，这一对也是主流的jdk8下默认收集器</p><p>2）详解</p><p><img src="`+pi+`" alt="image-20210406173628609"></p><p>Parallel这一对，它所关注的是系统的吞吐量。所谓吞吐量，反映的是用户线程在系统整体时间里可用的比例：</p><p>即： 吞吐量 = 用户代码运行时间 / ( 用户代码运行时间 + 垃圾收集器运行时间 )</p><p>这一点，从它的配置参数上直接就能看出来</p><p>3）参数</p><p>ParallelGC收集器工作机制和ParNewGC收集器一样，只是在此基础之上，新增了两个和系统吞吐量相关的参数，使得其使用起来更加的灵活和高效。</p><ul><li><code>-XX:+UseParallelGC</code>: 年轻代使用ParallelGC垃圾回收器，老年代使用串行回收器。</li><li><code>-XX:+UseParallelOldGC</code>: 年轻代使用ParallelGC(并行)垃圾回收器，老年代使用ParallelOldGC(并行)垃圾回收器。</li><li><code>-XX:MaxGCPauseMillis</code><ul><li>设置最大的垃圾收集时的停顿时间，单位为毫秒</li><li>需要注意，ParallelGC为了达到设置的停顿时间，可能会调整堆大小或其他的参数，如果堆的大小设置的较小，就会导致GC工作变得很频繁，反而可能会影响到性能。</li><li>该参数使用需谨慎。</li></ul></li><li><code>-XX:GCTimeRatio</code><ul><li>直接设置垃圾回收时间占程序运行时间的最大百分比，公式为1/(1+n)。</li><li>它的值为0~100之间的数字，默认值为99，也就是垃圾回收时间不能超过1%</li><li>该参数了解，一般不设置</li></ul></li><li><code>-XX:UseAdaptiveSizePolicy</code><ul><li>自适应GC模式，垃圾回收器将自动调整年轻代、老年代等参数，达到吞吐量、堆大小、停顿时间之间的平衡。</li><li>一般用于，手动调整参数比较困难的场景，让收集器自动进行调整。</li><li>也不常用</li></ul></li></ul><p>3）调试</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#参数</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">UseParallelGC </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">UseParallelOldGC </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MaxGCPauseMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">100</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">PrintGCDetails </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Xms16m </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Xmx16m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+ti+`" alt="image-20210406174157937"></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#打印的信息</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GC</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Allocation Failure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">PSYoungGen</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 4096K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">480</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">4608K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 4096K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1840</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">15872K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0.0034307</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Times</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> real</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Full </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GC</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Ergonomics</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">PSYoungGen</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 505K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">0</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">4608K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ParOldGen</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 10332K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">10751</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">11264K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 10837K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">10751</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">15872K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Metaspace</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3491K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3491</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1056768K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)],</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0.0793622</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Times</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.13</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> real</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.08</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PSYoungGen：年轻代，Parallel Scavenge</p><p>ParOldGen：老年代，Parallel Old</p><p>有以上信息可以看出，年轻代和老年代都使用了ParallelGC垃圾回收器。</p><h3 id="_6-5-3-并发-cms" tabindex="-1"><a class="header-anchor" href="#_6-5-3-并发-cms"><span>6.5.3 并发 - CMS</span></a></h3><p>CMS全称 Concurrent Mark Sweep，是一款并发的、使用标记-清除算法的垃圾回收器，该回收器是针对老年代垃圾回收的，通过参数<code>-XX:+UseConcMarkSweepGC</code>进行设置。</p><p>1）简介</p><p>CMS收集器，工作在老年代。</p><p>前面的收集器都是要停止用户线程的，而CMS收集器这是真正意义上的并行处理器，也就是用户线程和GC线程在同一时间一起工作。</p><p>2）CMS垃圾回收器的执行过程如下：</p><p><img src="`+ki+'" alt="image-20210407085100468"></p><p><img src="'+di+`" alt="image-20220915205359020"></p><ul><li>初始化标记(CMS-initial-mark) ：标记root直接关联的对象，会导致stw，但是这个没多少对象，时间短</li><li>并发标记(CMS-concurrent-mark)：沿着上一步的root，往下追踪，这步耗时最长，但是与用户线程同时运行</li><li>预清理（CMS-concurrent-preclean），与用户线程同时运行；</li><li>重新标记(CMS-remark) ：因为上一步是并发进行的，所以再增量过一遍有变化的，会导致stw，但比上一步少很多</li><li>并发清除(CMS-concurrent-sweep)：标记完的干掉，因为是标记-清除算法，不需要移动存活对象，所以这一步与用户线程同时运行</li><li>调整堆大小，设置CMS在清理之后进行内存压缩，目的是清理内存中的碎片；</li><li>重置线程：重置状态等待下次CMS的触发(CMS-concurrent-reset)，与用户线程同时运行</li></ul><p>3）测试</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#设置启动参数</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-XX:+UseConcMarkSweepGC</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -XX:+PrintGCDetails</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Xms16m</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Xmx16m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+ri+`" alt="image-20210407084211962"></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#运行日志</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#注意，cms默认搭配的新生代是 parnew ：</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GC</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Allocation Failure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ParNew</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 4926K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">512</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">4928K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0.0041843</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 9424K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">6736</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">15872K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0.0042168</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Times</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> real</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#老年代开始：</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#第一步，初始标记</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GC</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMS Initial Mark</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> CMS</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">initial</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mark</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 6224</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">10944K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 6824</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">15872K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0.0004209</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Times</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> real</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#第二步，并发标记</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMS</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">concurrent</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mark</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMS</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">concurrent</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mark</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0.002</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.002</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Times</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> real</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#第三步，预处理</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMS</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">concurrent</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">preclean</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMS</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">concurrent</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">preclean</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0.000</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.000</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Times</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> real</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#第四步，重新标记</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GC</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CMS Final Remark</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">YG</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> occupancy</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1657</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4928</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)][</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Rescan</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">parallel</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0.0005811</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">weak refs processing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0.0000136</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> unloading</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, 0.0003671 secs][scrub symbol table, 0.0006813 secs][scrub string table, 0.0001216 secs][1 CMS-remark: 6224K(10944K)] 7881K(15872K), 0.0018324 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#第五步，并发清理</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">[CMS-concurrent-sweep-start]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">[CMS-concurrent-sweep: 0.004/0.004 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#第六步，重置</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">[CMS-concurrent-reset-start]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">[CMS-concurrent-reset: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由以上日志信息，可以看出CMS执行的过程。</p><p>4）优缺点</p><p>优点：</p><ul><li>不可否认，一款优秀的收集器，并发收集，低停顿。</li><li>互联网服务器上低停顿的现实要求很吻合，一个网站总不能告诉用户你用10分钟，歇会再来用。</li></ul><p>但是，CMS也不是完美的：</p><ul><li>它不能等到内存吃紧了才启动收集。因为收集期间用户线程还在跑，得预留。</li><li>浮动垃圾干不掉，在并发标记、并发清理时，产生的新垃圾必须到下一次收集时处理。</li><li>标记-清除算法，免不了产生碎片，可以开启压缩但这些参数在jdk9里也已废弃掉</li><li>最后，搭配CMS的年轻代现在只剩下了ParNew，是那么的苍白无力。实际上，jdk9开始已经把它逐步淘汰</li></ul><p>那么替代它的是谁呢？G1出场……</p><h3 id="_6-5-4-并发-g1" tabindex="-1"><a class="header-anchor" href="#_6-5-4-并发-g1"><span>6.5.4 并发 - G1</span></a></h3><h4 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1）概述</span></a></h4><p>为解决CMS算法产生空间碎片和其它一系列的问题缺陷，G1（Garbage First）算法，在JDK 7u4版本被正式推出</p><p>oracle官方计划在jdk9中将G1变成默认的垃圾收集器，以替代CMS。</p><p>JDK9默认G1为垃圾收集器的提案：https://openjdk.java.net/jeps/248</p><p>将CMS标记为丢弃的提案：https://openjdk.java.net/jeps/291</p><p>G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优：</p><ol><li>第一步，开启G1垃圾收集器</li><li>第二步，设置堆的最大内存</li><li>第三步，设置最大的停顿时间</li></ol><p>G1中提供了三种模式垃圾回收模式，Young GC、Mixed GC 和 Full GC，在不同的条件下被触发。</p><h4 id="_2-原理" tabindex="-1"><a class="header-anchor" href="#_2-原理"><span>2）原理</span></a></h4><p>G1垃圾收集器相对比其他收集器而言，最大的区别在于它取消了年轻代、老年代的物理划分，取而代之的是将堆划分为若干个区域（Region），这些区域中包含了有逻辑上的年轻代、老年代区域。</p><p>这样做的好处就是，我们再也不用单独的空间对每个代进行设置了，不用担心每个代内存是否足够。</p><p><img src="`+gi+'" alt="image-20220915205958150"></p><p>在G1划分的区域中，年轻代的垃圾收集依然采用暂停所有应用线程的方式，将存活对象拷贝到老年代或者Survivor空间，G1收集器通过将对象从一个区域复制到另外一个区域，完成了清理工作。</p><p>这就意味着，在正常的处理过程中，G1完成了堆的压缩（至少是部分堆的压缩），这样也就不会有cms内存碎片问题的存在了。</p><p><img src="'+ci+'" alt="image-20210402154906657"></p><p>G1打破了之前的传统观念，它依然把内存划分为eden、survivor、old，同时多了一个humongous（巨大的）区来存巨型对象。</p><ul><li>如果一个对象占用的空间超过了分区容量50%以上，G1收集器就认为这是一个巨型对象。</li><li>这些巨型对象，默认直接会被分配在老年代，但是如果它是一个短期存在的巨型对象，就会对垃圾收集器造成负面影响。</li><li>为了解决这个问题，G1划分了一个Humongous区，它用来专门存放巨型对象。如果一个H区装不下一个巨型对象，那么G1会寻找连续的H分区来存储。为了能找到连续的H区，有时候不得不启动Full GC。</li></ul><p>但是，这些区在物理地址上不再连续。而是把整个物理地址分成一个个大小相等的region，每一个region可以是上面角色中的一个，还可以在某个时刻转变角色，从eden变成old ！（就是个标签）</p><p>这样收集的时候，它收集某些性价比高的region回收就可以了。所以某个时刻，G1可能连老带少一起收拾。</p><p>这是一个划时代的改变！</p><p><strong>那它是怎么做的呢？收拾哪些区块呢？</strong></p><p><img src="'+oi+'" alt="image-20210402160801656"></p><p>先看两个概念，容易搞混：</p><ul><li><p>Remembered Set：记忆集，简称RS，每个 Region关联一个。RS 比较复杂，简单来说就是记录Region之间对象的引用关系。</p></li><li><p>Collection Set：简称CSet，在一次收集中，那些性价比高的Region揪出来组成一个回收集，将来一口气回收掉。这个集合里是筛选出来的一些Region</p><p>至于Region里面剩下的存活的对象，多个Region压缩到一个空闲Region里去，这样就完成了一次收集。</p></li></ul><p><strong>Remembered Set（已记忆集合）</strong></p><p>在GC年轻代的对象时，我们如何找到年轻代中对象的根对象呢？</p><p>根对象可能是在年轻代中，也可以在老年代中，那么老年代中的所有对象都是根么？</p><p>如果全量扫描老年代，那么这样扫描下来会耗费大量的时间。</p><p>于是，G1引进了RSet的概念。它的全称是Remembered Set，其作用是跟踪指向某个堆内的对象引用。</p><p><img src="'+yi+`" alt="image-20220915210947125"></p><p>每个Region初始化时，会初始化一个RSet，该集合用来记录并跟踪其它Region指向该Region中对象的引用，每个Region默认按照512Kb划分成多个Card，所以RSet需要记录的东西应该是 xx Region的 xx Card。</p><p>这样就不用全部扫描，在Rset就可以找到谁引用改了我</p><p>3）模式</p><p>G1中提供了三种模式垃圾回收模式，Young GC、Mixed GC 和 Full GC，在不同的条件下被触发。</p><p>所谓的模式，其实也就是G1收集的时候，Region选哪种，是只选年轻代的Region？还是两种都筛选？</p><h4 id="young-gc" tabindex="-1"><a class="header-anchor" href="#young-gc"><span>Young GC</span></a></h4><p>选定所有年轻代里的Region。通过控制年轻代的region个数，即年轻代内存大小，来控制young GC的时间开销。</p><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">-XX:MaxGCPauseMillis</td><td style="text-align:center;">设置G1收集过程目标时间，默认值200ms</td></tr><tr><td style="text-align:center;">-XX:G1NewSizePercent</td><td style="text-align:center;">新生代最小值，默认值5%</td></tr><tr><td style="text-align:center;">-XX:G1MaxNewSizePercent</td><td style="text-align:center;">新生代最大值，默认值60%</td></tr></tbody></table><blockquote><p><strong>Young GC主要是对Eden区进行GC，它在Eden空间耗尽时会被触发。</strong></p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Eden空间的数据移动到Survivor空间中，如果Survivor空间不够，Eden空间的部分数据会直接晋升到年老代空间。</span></span>
<span class="line"><span>Survivor区的数据移动到新的Survivor区中，也有部分数据晋升到老年代空间中。</span></span>
<span class="line"><span>最终Eden空间的数据为空，GC停止工作，应用线程继续执行。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mixed-gc" tabindex="-1"><a class="header-anchor" href="#mixed-gc"><span>Mixed GC</span></a></h4><p>选定所有年轻代里的Region，外加统计的在用户指定的开销目标范围内选择收益高的老年代Region。</p><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">-XX:InitiatingHeapOccupancyPercent</td><td style="text-align:center;">当老年代大小占整个堆大小百分比达到该阈值时，会触发一次mixed gc.</td></tr></tbody></table><p>当越来越多的对象晋升到老年代old region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即Mixed GC，该算法并不是一个Old GC，除了回收整个Young Region，还会回收一部分的Old Region，这里需要注意：是一部分老年代，而不是全部老年代，可以选择哪些old region进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是Mixed GC 并不是 Full GC。</p><blockquote><p>MixedGC什么时候触发？ 由参数 -XX:InitiatingHeapOccupancyPercent=n 决定。默认：45%，该参数的意思是：当老年代大小占整个堆大小百分比达到该阀值时触发。</p></blockquote><p>它的GC步骤分2步：</p><ol><li>全局并发标记（global concurrent marking）</li></ol><ul><li>初始标记（initial mark，STW）：标记从根节点直接可达的对象，这个阶段会执行一次年轻代GC，会产生全局停顿。</li><li>根区域扫描（root region scan）： <ul><li>G1 GC 在初始标记的存活区扫描对老年代的引用，并标记被引用的对象。</li><li>该阶段与应用程序（非 STW）同时运行，并且只有完成该阶段后，才能开始下一次 STW 年轻代垃圾回收。</li></ul></li><li>并发标记（Concurrent Marking）：G1 GC 在整个堆中查找可访问的（存活的）对象。该阶段与应用程序同时运行，可以被 STW 年轻代垃圾回收中断。</li><li>重新标记（Remark，STW）：该阶段是 STW 回收，因为程序在运行，针对上一次的标记进行修正。</li><li>清除垃圾（Cleanup，STW）：清点和重置标记状态，该阶段会STW，这个阶段并不会实际上去做垃圾的收集，等待evacuation阶段来回收。</li></ul><ol start="2"><li>拷贝存活对象（evacuation）：Evacuation阶段是全暂停的。该阶段把一部分Region里的活对象拷贝到另一部分Region中，从而实现垃圾的回收清理。</li></ol><h4 id="full-gc" tabindex="-1"><a class="header-anchor" href="#full-gc"><span>full GC</span></a></h4><p>严格意义上讲，这不属于G1的模式。但是使用G1时是有可能发生的。</p><p>当mixed GC实在无法跟上程序分配内存的速度，导致老年代填满无法继续进行Mixed GC，就会改为使用serial old GC（full GC）来收集整个堆。</p><h4 id="_4-运行过程" tabindex="-1"><a class="header-anchor" href="#_4-运行过程"><span>4）运行过程</span></a></h4><p><img src="`+mi+`" alt="image-20230928164203175"></p><ul><li><p>初始标记：标记出 GC Roots 直接关联的对象，这个阶段速度较快，STW，单线程执行。</p></li><li><p>并发标记：从 GC Root 开始对堆中的对象进行可达新分析，找出存活对象，这个阶段耗时较长，但可以和用户线程并发执行。</p></li><li><p>重新标记：修正在并发标记阶段因用户程序执行而产生变动的标记记录。STW，并发执行。</p></li><li><p>筛选回收：筛选回收阶段会对各个 Region 的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划，筛出CSet后移动合并存活对象到空Region，清除旧的，完工。因为这个阶段需要移动对象内存地址，所以必须STW。</p><p>思考一下，这属于什么算法呢？？？</p><p>答：从Region的动作来看G1使用的是标记-复制算法。而在全局视角上，类似标记 - 整理</p></li></ul><p>总结：</p><p>G1前面的几步和CMS差不多，只有在最后一步，CMS是标记清除，G1需要合并Region属于标记整理</p><h4 id="_5-优缺点" tabindex="-1"><a class="header-anchor" href="#_5-优缺点"><span>5）优缺点</span></a></h4><ul><li>并发性：继承了CMS的优点，可以与用户线程并发执行。当然只是在并发标记阶段。其他还是需要STW</li><li>分代GC：G1依然是一个分代回收器，但是和之前的各类回收器不同，它同时兼顾年轻代和老年代。而其他回收器，或者工作在年轻代，或者工作在老年代；</li><li>空间整理：G1在回收过程中，会进行适当的对象移动，不像CMS只是简单地标记清理对象。在若干次GC后，CMS必须进行一次碎片整理。而G1不同，它每次回收都会有效地复制对象，减少空间碎片，进而提升内部循环速度。</li><li>可预见性：为了缩短停顿时间，G1建立可预存停顿的模型，这样在用户设置的停顿时间范围内，G1会选择适当的区域进行收集，确保停顿时间不超过用户指定时间。</li></ul><h4 id="_6-建议" tabindex="-1"><a class="header-anchor" href="#_6-建议"><span>6）建议</span></a></h4><ul><li>如果应用程序追求低停顿，可以尝试选择G1；</li><li>经验值上，小内存6G以内，CMS优于G1，超过8G，尽量选择G1</li><li>是否代替CMS只有需要实际场景测试才知道。（如果使用G1后发现性能还不如CMS，那么还是选择CMS）</li></ul><h4 id="_7-附-配置参数清单" tabindex="-1"><a class="header-anchor" href="#_7-附-配置参数清单"><span>7）附：配置参数清单</span></a></h4><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=======G1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 让垃圾回收配置简单很多，只需要打开并指定你预计的时间要求即可=======</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">指定使用G1收集器：</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;-XX:+UseG1GC&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">为G1设置暂停时间目标（JVM会尽力实现，但不保证达到），默认值为200毫秒；这个值不是越小越好。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">太小的话会造成可供收集的Region数量偏少，跟不上对象产生的速度，反而会频繁触发GC降低吞吐量</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">G1会根据这个目标决定收集行为：</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;-XX:MaxGCPauseMillis&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=======附：其他参数，一般采用默认即可=======</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">设置每个Region大小，值是</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的幂，范围1MB到32MB；目标是在最小Java堆时可以拥有约2048个Region,默认是堆内存的1/2000。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;-XX:G1HeapRegionSize&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">新生代最小值，默认值5%:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;-XX:G1NewSizePercent&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">新生代最大值，默认值60%:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;-XX:G1MaxNewSizePercent&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">设置STW期间，并行GC线程数n,将</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> n</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的值设置为逻辑处理器的数量。n</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 的值与逻辑处理器的数量相同，最多为</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 8</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;-XX:ParallelGCThreads&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">设置并发标记阶段，并行执行的线程数n,将</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> n</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 设置为并行垃圾回收线程数</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (ParallelGCThreads) 的 1/4 左右。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;-XX:ConcGCThreads&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">当整个Java堆的占用率达到参数值时，开始触发mix</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gc；默认为45：</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&quot;-XX:InitiatingHeapOccupancyPercent&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-操作案例" tabindex="-1"><a class="header-anchor" href="#_8-操作案例"><span>8）操作案例</span></a></h4><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-XX:+UseG1GC</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -XX:MaxGCPauseMillis=100</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -XX:+PrintGCDetails</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Xmx256m</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#G1的日志不像CMS是严格按照事件顺序来的。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#属于分类统计，包含子操作</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#总停顿时间</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GC pause </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">G1</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Evacuation</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Pause</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">young</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0044882</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     #并发处理耗时，线程数</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Parallel Time: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3.7</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ms, GC Workers: 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        #各个子项耗时情况……</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GC Worker Start </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: Min: 14763.7, Avg: 14763.8, Max: 14763.8, Diff: 0.1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      #扫描根节点</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Ext Root Scanning </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: Min: 0.2, Avg: 0.3, Max: 0.3, Diff: 0.1, Sum: 0.8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      #更新RS区域所消耗的时间</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Update RS </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: Min: 1.8, Avg: 1.9, Max: 1.9, Diff: 0.2, Sum: 5.6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">         [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Processed Buffers: Min: 1, Avg: 1.7, Max: 3, Diff: 2, Sum: 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Scan RS </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Code Root Scanning </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      #对象拷贝</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Object Copy </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: Min: 1.1, Avg: 1.2, Max: 1.3, Diff: 0.2, Sum: 3.6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Termination </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.2, Sum: 0.2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">         [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GC Worker Other </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GC Worker Total </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: Min: 3.4, Avg: 3.4, Max: 3.5, Diff: 0.1, Sum: 10.3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GC Worker End </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: Min: 14767.2, Avg: 14767.2, Max: 14767.3, Diff: 0.1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Code Root Fixup: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Code Root Purge: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Clear CT: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #清空CardTable</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Other: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.7</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Choose CSet: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #选取CSet</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Ref Proc: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #弱引用、软引用的处理耗时</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Ref Enq: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #弱引用、软引用的入队耗时</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Redirty Cards: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Humongous Register: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #大对象区域注册耗时</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Humongous Reclaim: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #大对象区域回收耗时</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Free CSet: </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ms</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   #重点：总的各个区的收集情况  收集前使用空间（总空间） -&gt; 收集后使用空间（总空间）</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Eden: 7168.0K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">7168</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">0.0B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">13</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">M</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Survivors: 2048.0K-</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2048.0K Heap: 55.5M</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">192</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">M</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">48.5M</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">192</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">M</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #年轻代的大小统计</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Times: user</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">0.00, real</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-优化建议" tabindex="-1"><a class="header-anchor" href="#_9-优化建议"><span>9）优化建议</span></a></h4><p><strong>对于G垃圾收集器优化建议</strong></p><ul><li><p>年轻代大小</p><ul><li><p>避免使用 -Xmn 选项或 -XX:NewRatio 等其他相关选项显式设置年轻代大小。</p></li><li><p>固定年轻代的大小会覆盖暂停时间目标。</p></li></ul></li><li><p>暂停时间目标不要太过严苛</p><ul><li><p>G1 GC 的吞吐量目标是 90% 的应用程序时间和 10%的垃圾回收时间。</p></li><li><p>评估 G1 GC 的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示您愿意承受更多的垃圾回收开销，而这会直接影响到吞吐量。</p></li></ul></li></ul><h3 id="_6-5-5-并发-zgc-了解" tabindex="-1"><a class="header-anchor" href="#_6-5-5-并发-zgc-了解"><span>6.5.5 并发 - ZGC（了解）</span></a></h3><p>1）概述</p><p>ZGC是一款在JDK 11中新加入的低延迟垃圾收集器，是由Oracle公司研发的。（注意！还在试验阶段）</p><p>ZGC的目标是希望在尽可能对吞吐量影响不太大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停顿时间限制在10毫秒以内的低延迟。</p><p>还在试验阶段，了解原理即可，投产的话还需等待观察。</p><p>2）设计</p><p><img src="`+Ai+'" alt="image-20230928164148445"></p><p>ZGC的内存布局与G1一样，也采用基于Region的堆内存布局，但不同的是，ZGC的Page（ZGC中称之为页面，道理和Region一样）具有动态性——动态创建和销毁，以及动态的区域容量大小。在x64硬件平台下，ZGC的Page可以具有大、中、小三类容量：</p><ul><li>小型页面（Small Page）：容量固定为2MB，用于放置小于256KB的小对象。</li><li>中型页面（Medium Page）：容量固定为32MB，用于放置大于等于256KB但小于4MB的对象。</li><li>大型页面（Large Page）：容量不固定，可以动态变化，但必须为2MB的整数倍，用于放置4MB或以上的大对象。 <ul><li>每个大页面中只会存放一个大对象，这也预示着虽然名字叫作“大型Page”，但它的实际容量完全有可能小于中型Page，最小容量可低至4MB。</li><li>大型Page在ZGC的实现中是不会被重分配（重分配是ZGC的一种处理动作）的，因为复制一个大对象的代价非常高昂。</li></ul></li></ul><p>3）染色指针</p><p>ZGC打上了内存指针的主意。我们来看看它在指针上做了什么</p><ul><li>在64位系统中，理论可以访问的内存高达16EB（2的64次幂）字节。</li><li>实际上用不了这么多，操作系统也不让你用全部的。</li><li>64位的Linux可用46位（64TB）的物理地址空间，64位的Windows系统只支持44位（16TB）的物理地址空间。</li></ul><p>我们以linux为例，即便是这64TB内存，现实中依然用不了这么多。ZGC就盯上了这块。</p><p><img src="'+Di+'" alt="image-20210407153159222"></p><p>它把系统允许它使用的46位，拿出来4位，来记录这个内存地址的一些额外信息，剩下的42位用于真正的寻址操作。</p><p>这也造成了一个问题，就是ZGC可以管理的内存空间不可以超过4TB（2的42次幂），但是！这依然是够用的</p><p>那么我们来看一下，它拿走4位，都做了什么？</p><ul><li>简单来说，所谓染色就是用这4位来标记当前对象有没有被移动过。</li><li>如果对象从一个Page移动到了另一个，如果没有染色标记，比如G1做垃圾收集时，那就必须停掉用户进程，修改所有指向自己的引用。</li><li>而有了染色标记，只需要在指向自己的引用上标注一下，移动就可以了。同时，将新旧地址记录到一张表中，叫转发表</li><li>那么再有用户程序访问到这个引用时，发现已改动，到转发表查新的地址，去新地址访问即可。</li></ul><p>这么操作有什么意义呢？</p><ul><li>他把对象迁移，和与他关联的地址修改做了解耦。</li><li>这就省去了大量同步修改地址值的操作（这个操作需要STW）。</li><li>一个Page里如果对象都被迁移过，那么无需挨个修改所有的指针值就可以回收掉这个Page。</li></ul><p>关于ZGC的详细内容非常多，足够讲完一本书，想深入了解的同学参考以下拓展资料：</p><ul><li>资料文件夹： ZGC-染色指针.pdf （Oracle官网）</li><li>一本参考书：《新一代垃圾回收器ZGC设计与实现》</li></ul><p>4）工作过程</p><p><img src="'+ui+'" alt="image-20200506191455510"></p><p>ZGC的运作过程大致可划分为四个大的阶段，这四个阶段都是可以并发执行的。仅在Mark Start、Initial Mark 阶段中会存在短暂的STW。</p><ul><li><strong>并发标记（Concurrent Mark）</strong><ul><li>与G1一样，并发标记是遍历对象图做可达性分析的阶段，前后也要经过初始标记、最终标记的短暂停顿。</li><li>ZGC的标记是在指针上而不是在对象上进行的，标记阶段会更新染色指针中的Marked 0、Marked 1标志位。</li></ul></li><li><strong>并发预备重分配（Concurrent Prepare for Relocate）</strong><ul><li>这个阶段需要根据特定的查询条件统计得出本次收集过程要清理哪些Region，将这些Region组成：重分配集（Relocation Set）。</li><li>ZGC每次回收都会扫描所有的Region，用范围更大的扫描成本换取省去G1中记忆集的维护成本。</li><li>ZGC的重分配集只是决定了里面的存活对象会被重新复制到其他的Region中，里面的Region会被释放。</li></ul></li><li><strong>并发重分配（Concurrent Relocate）</strong><ul><li>重分配是ZGC执行过程中的核心阶段，这个过程要把重分配集中的存活对象复制到新的Region上，并为重分配集中的每个Region维护一个转发表（Forward Table），记录从旧对象到新对象的转向关系。</li><li>由于使用了染色指针的支持，ZGC收集器能仅从引用上就明确得知一个对象是否处于重分配集之中，如果用户线程此时并发访问了位于重分配集中的对象，这次访问将会被预置的内存屏障所截获，然后立即根据Region上的转发表记录将访问转发到新复制的对象上，并同时修正更新该引用的值，使其直接指向新对象，ZGC将这种行为称为指针的“自愈”（Self-Healing）能力。</li></ul></li><li><strong>并发重映射（Concurrent Remap）</strong><ul><li>重映射所做的就是修正整个堆中指向重分配集中旧对象的所有引用。</li><li>并发重映射并不是一个必须要“迫切”去完成的任务，但是当所有指针都被修正之后，原来记录新旧对象关系的转发表就可以释放掉了。</li></ul></li></ul><p>5）调试</p><p>注意：ZGC低版本jdk是无法开启和使用的：</p><p>linux64 ： jdk11 +</p><p>windows &amp; mac ：jdk 14+</p><p>配置启动参数</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>-XX:+UnlockExperimentalVMOptions -XX:+UseZGC -Xmx256m -Xlog:gc*=info</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+vi+`" alt="image-20210407180815914"></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>#执行日志</span></span>
<span class="line"><span>[1.141s][info][gc,start    ] GC(2) Garbage Collection (Warmup)</span></span>
<span class="line"><span>[1.141s][info][gc,phases   ] GC(2) Pause Mark Start 0.190ms</span></span>
<span class="line"><span>[1.143s][info][gc,phases   ] GC(2) Concurrent Mark 1.837ms #并发标记</span></span>
<span class="line"><span>[1.143s][info][gc,phases   ] GC(2) Pause Mark End 0.136ms</span></span>
<span class="line"><span>[1.144s][info][gc,phases   ] GC(2) Concurrent Process Non-Strong References 0.308ms</span></span>
<span class="line"><span>[1.144s][info][gc,phases   ] GC(2) Concurrent Reset Relocation Set 0.001ms</span></span>
<span class="line"><span>[1.144s][info][gc,phases   ] GC(2) Concurrent Destroy Detached Pages 0.000ms</span></span>
<span class="line"><span>[1.145s][info][gc,phases   ] GC(2) Concurrent Select Relocation Set 1.219ms  #重分配集</span></span>
<span class="line"><span>[1.145s][info][gc,phases   ] GC(2) Concurrent Prepare Relocation Set 0.009ms #预备重分配</span></span>
<span class="line"><span>[1.145s][info][gc,phases   ] GC(2) Pause Relocate Start 0.230ms</span></span>
<span class="line"><span>[1.146s][info][gc,phases   ] GC(2) Concurrent Relocate 0.853ms  #并发重分配</span></span>
<span class="line"><span>[1.146s][info][gc,load     ] GC(2) Load: 0.00/0.02/0.05</span></span>
<span class="line"><span>[1.146s][info][gc,mmu      ] GC(2) MMU: 2ms/78.1%, 5ms/88.9%, 10ms/93.4%, 20ms/96.7%, 50ms/98.7%, 100ms/99.0%</span></span>
<span class="line"><span>[1.146s][info][gc,marking  ] GC(2) Mark: 1 stripe(s), 1 proactive flush(es), 1 terminate flush(es), 0 completion(s), 0 continuation(s)</span></span>
<span class="line"><span>[1.146s][info][gc,reloc    ] GC(2) Relocation: Successful, 1M relocated   #重分配完成</span></span>
<span class="line"><span>[1.146s][info][gc,nmethod  ] GC(2) NMethods: 59 registered, 0 unregistered</span></span>
<span class="line"><span>#释放情况，元空间、各种引用、堆……</span></span>
<span class="line"><span>[1.146s][info][gc,metaspace] GC(2) Metaspace: 4M used, 4M capacity, 5M committed, 8M reserved</span></span>
<span class="line"><span>[1.146s][info][gc,ref      ] GC(2) Soft: 131 encountered, 0 discovered, 0 enqueued</span></span>
<span class="line"><span>[1.146s][info][gc,ref      ] GC(2) Weak: 222 encountered, 215 discovered, 0 enqueued</span></span>
<span class="line"><span>[1.146s][info][gc,ref      ] GC(2) Final: 0 encountered, 0 discovered, 0 enqueued</span></span>
<span class="line"><span>[1.146s][info][gc,ref      ] GC(2) Phantom: 1 encountered, 1 discovered, 0 enqueued</span></span>
<span class="line"><span>[1.146s][info][gc,heap     ] GC(2)                Mark Start          Mark End        Relocate Start      Relocate End           High               Low</span></span>
<span class="line"><span>[1.146s][info][gc,heap     ] GC(2)  Capacity:      114M (45%)         114M (45%)         114M (45%)         114M (45%)         114M (45%)         114M (45%)</span></span>
<span class="line"><span>[1.146s][info][gc,heap     ] GC(2)   Reserve:       36M (14%)          36M (14%)          36M (14%)          36M (14%)          36M (14%)          36M (14%)</span></span>
<span class="line"><span>[1.146s][info][gc,heap     ] GC(2)      Free:      142M (55%)         142M (55%)         184M (72%)         184M (72%)         184M (72%)         142M (55%)</span></span>
<span class="line"><span>[1.146s][info][gc,heap     ] GC(2)      Used:       78M (30%)          78M (30%)          36M (14%)          36M (14%)          78M (30%)          36M (14%)</span></span>
<span class="line"><span>[1.146s][info][gc,heap     ] GC(2)      Live:         -                 1M (1%)            1M (1%)            1M (1%)             -                  -</span></span>
<span class="line"><span>[1.146s][info][gc,heap     ] GC(2) Allocated:         -                 0M (0%)            0M (0%)            4M (2%)             -                  -</span></span>
<span class="line"><span>[1.146s][info][gc,heap     ] GC(2)   Garbage:         -                76M (30%)          34M (14%)          34M (14%)            -                  -</span></span>
<span class="line"><span>[1.146s][info][gc,heap     ] GC(2) Reclaimed:         -                  -                42M (16%)          42M (16%)            -                  -</span></span>
<span class="line"><span>[1.146s][info][gc          ] GC(2) Garbage Collection (Warmup) 78M(30%)-&gt;36M(14%)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5-6-归纳总结" tabindex="-1"><a class="header-anchor" href="#_6-5-6-归纳总结"><span>6.5.6 归纳总结</span></a></h3><p>1）我们先把所学的收集器做个汇总：</p><table><thead><tr><th>名称</th><th>算法</th><th>工作区域</th><th>线程</th><th>模式</th><th>适用场合</th><th>优缺点</th></tr></thead><tbody><tr><td>Serial</td><td>复制</td><td>新生</td><td>单</td><td>串行</td><td>单CPU；Client模式下</td><td>缺：stop the world；优：简单高效,没有线程交互开销,专注于GC;</td></tr><tr><td>ParNew</td><td>复制</td><td>新生</td><td>多</td><td>并行</td><td>多CPU；Server模式下</td><td>缺：stop the world；优：并行并发GC</td></tr><tr><td>Parallel Scavenge</td><td>复制</td><td>新生</td><td>多</td><td>并行</td><td>吞吐量控制，Client，server均可以</td><td>主要关注吞吐量,通过吞吐量的设置控制停顿时间,适应不同的场景</td></tr><tr><td>Serial Old</td><td>整理</td><td>老年</td><td>单</td><td>串行</td><td>主要Client模式下</td><td>缺：stop the world；其他收集器搞不定时的保底选择</td></tr><tr><td>Parallel Old</td><td>整理</td><td>老年</td><td>多</td><td>并行</td><td>吞吐量控制，Client，server均可以</td><td>主要关注吞吐量，通过吞吐量的设置控制停顿时间，适应不同的场景</td></tr><tr><td>CMS</td><td>清除</td><td>老年</td><td>多</td><td>并发</td><td>互联网站；B/S系统服务端</td><td>缺：CPU资源敏感,无法处理浮动垃圾，产生大量内存碎片；优：并发收集,低停顿</td></tr><tr><td>G1</td><td>整理</td><td>均可</td><td>多</td><td>并发</td><td>面向服务端应用</td><td>优：并行与并发,分代收集,空间整合(标记整理算法),可预测停顿</td></tr></tbody></table><p>2）一些规律</p><ul><li>新生代都是标记 - 复制算法，老年代采用标记 - 整理，或清除（CMS）</li><li>历史性的收集器大多针对某个代，但是G1，以及未来的ZGC都是全代可用</li><li>没有绝对好用的收集器，需要在 吞吐量、延迟性、内存占用量上做权衡 <ul><li>数据分析、科学计算等场合，偏重吞吐量</li><li>互联网服务器、web网站，偏重服务的延迟度，不能出现严重顿挫</li><li>客户端、微型终端、嵌入式应用，内存占用低是关键</li></ul></li></ul><p>3）搭配组合</p><p>除了G1和ZGC这些全能选手，其他垃圾收集器需要搭配工作</p><p>但是组合不是想怎么来就怎么来的，下图展示可用组合，以及在某些版本中废弃掉的组合：</p><p><img src="`+Bi+`" alt="image-20210402114507424"></p><p>4）如何查看当前jdk的垃圾回收器呢？</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>java -XX:+PrintCommandLineFlags -version</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#jdk8，默认Parallel</span></span>
<span class="line"><span>shawn@macpro:~ &gt; java -XX:+PrintCommandLineFlags -version</span></span>
<span class="line"><span>-XX:InitialHeapSize=134217728 -XX:MaxHeapSize=2147483648 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC</span></span>
<span class="line"><span>java version &quot;1.8.0_181&quot;</span></span>
<span class="line"><span>Java(TM) SE Runtime Environment (build 1.8.0_181-b13)</span></span>
<span class="line"><span>Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#jdk11，默认换成了G1</span></span>
<span class="line"><span>shawn@macpro:~ &gt; java -XX:+PrintCommandLineFlags -version</span></span>
<span class="line"><span>-XX:G1ConcRefinementThreads=4 -XX:GCDrainStackTargetSize=64 -XX:InitialHeapSize=134217728 -XX:MaxHeapSize=2147483648 -XX:+PrintCommandLineFlags -XX:ReservedCodeCacheSize=251658240 -XX:+SegmentedCodeCache -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseG1GC</span></span>
<span class="line"><span>java version &quot;11.0.2&quot; 2019-01-15 LTS</span></span>
<span class="line"><span>Java(TM) SE Runtime Environment 18.9 (build 11.0.2+9-LTS)</span></span>
<span class="line"><span>Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.2+9-LTS, mixed mode)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#jdk14，默认还是G1，但是已经支持ZGC了，需要打开实验性参数开关</span></span>
<span class="line"><span>shawn@macpro:~ &gt; java -XX:+PrintCommandLineFlags -version</span></span>
<span class="line"><span>-XX:G1ConcRefinementThreads=4 -XX:GCDrainStackTargetSize=64 -XX:InitialHeapSize=134217728 -XX:MaxHeapSize=2147483648 -XX:MinHeapSize=6815736 -XX:+PrintCommandLineFlags -XX:ReservedCodeCacheSize=251658240 -XX:+SegmentedCodeCache -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseG1GC</span></span>
<span class="line"><span>java version &quot;14.0.2&quot; 2020-07-14</span></span>
<span class="line"><span>Java(TM) SE Runtime Environment (build 14.0.2+12-46)</span></span>
<span class="line"><span>Java HotSpot(TM) 64-Bit Server VM (build 14.0.2+12-46, mixed mode, sharing)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可视化gc日志分析工具" tabindex="-1"><a class="header-anchor" href="#可视化gc日志分析工具"><span>可视化GC日志分析工具</span></a></h2><h3 id="gc日志输出参数" tabindex="-1"><a class="header-anchor" href="#gc日志输出参数"><span><strong>GC日志输出参数</strong></span></a></h3><p>前面通过<code>-XX:+PrintGCDetails</code>可以对GC日志进行打印，我们就可以在控制台查看，这样虽然可以查看GC的信息，</p><p>但是并不直观，可以借助于第三方的GC日志分析工具进行查看。</p><p>在日志打印输出涉及到的参数如下：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-XX:+PrintGC</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 输出GC日志</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-XX:+PrintGCDetails</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 输出GC的详细日志</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-XX:+PrintGCTimeStamps</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 输出GC的时间戳（以基准时间的形式）</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-XX:+PrintGCDateStamps</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 输出GC的时间戳（以日期的形式，如</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 2013-05-04T21:53:59.234+0800）</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-XX:+PrintHeapAtGC</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 在进行GC的前后打印出堆的信息</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-Xloggc:../logs/gc.log</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 日志文件的输出路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-XX:+UseG1GC</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -XX:MaxGCPauseMillis=100</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Xmx256m</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -XX:+PrintGCDetails</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -XX:+PrintGCTimeStamps</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -XX:+PrintGCDateStamps</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -XX:+PrintHeapAtGC</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Xloggc:F://test//gc.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行后就可以在E盘下生成gc.log文件。</p><p>如下：</p><p><img src="`+bi+'" alt="image-20220915212651198"></p><h3 id="gc-easy-可视化工具" tabindex="-1"><a class="header-anchor" href="#gc-easy-可视化工具"><span><strong>GC Easy 可视化工具</strong></span></a></h3><p>GC Easy是一款在线的可视化工具，易用、功能强大，网站：</p><p>http://gceasy.io/</p><p><img src="'+Ci+'" alt="image-20220915212341529"></p><p>上传后，点击“Analyze”按钮，即可查看报告</p><p><img src="'+Ei+'" alt="image-20220915212353523"></p><p><img src="'+fi+'" alt="image-20220915212359521"></p><p><img src="'+_i+`" alt="image-20220915212403718"></p><h1 id="_7、调优实战" tabindex="-1"><a class="header-anchor" href="#_7、调优实战"><span>7、调优实战</span></a></h1><h2 id="_7-1-环境" tabindex="-1"><a class="header-anchor" href="#_7-1-环境"><span>7.1 环境</span></a></h2><ul><li>我们依然使用上面收集器章节相同的案例，这次针对内存来做详细分析。</li><li>使用企业里主流的jdk8运行，其他jdk版本参数可能略有不同。</li><li>jdk自带的分析命令和工具给大家准备了扩展资料</li><li>这里我们使用在线、简洁、高效的图形化分析工具： http://gceasy.io</li><li>gc日志参数：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>-XX:+PrintGC 输出GC日志</span></span>
<span class="line"><span>-XX:+PrintGCDetails 输出GC的详细日志</span></span>
<span class="line"><span>-XX:+PrintGCTimeStamps 输出GC的时间戳（以基准时间的形式）</span></span>
<span class="line"><span>-XX:+PrintGCDateStamps 输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）</span></span>
<span class="line"><span>-XX:+PrintHeapAtGC 在进行GC的前后打印出堆的信息</span></span>
<span class="line"><span>-Xloggc:gc.log   jdk8日志文件的输出</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-Xlog:gc*:gc.log  jdk11日志输出方式略有不同</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-XX:+printGC</code>或<code>-verbose:gc</code>可以打印GC的简要信息</p><p><img src="`+xi+'" alt="image-20220605090010628"></p><p><code>-XX:+PrintGCTimeStamps</code>打印CG发生的时间戳</p><p><img src="'+Fi+'" alt="image-20220605085953282"></p><p><code>-XX:+PrintGCDetails</code>的输出</p><p><img src="'+ji+'" alt="image-20220605085929352"></p><p><code>-Xloggc</code>指定GC log的位置，以文件输出，帮助开发人员分析问题</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>-Xloggc:log/gc.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+Si+'" alt="image-20220605085843642"></p><p><code>-XX:+PrintHeapAtGC</code>每次一次GC后，都打印堆信息</p><p><img src="'+Xi+'" alt="image-20220605085816651"></p><h2 id="_7-2-初始状态" tabindex="-1"><a class="header-anchor" href="#_7-2-初始状态"><span>7.2 初始状态</span></a></h2><h3 id="_7-2-1-参数" tabindex="-1"><a class="header-anchor" href="#_7-2-1-参数"><span>7.2.1 参数</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>-Xmx32m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:gc.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+Mi+'" alt="image-20210408162538333"></p><h3 id="_7-2-2-执行日志" tabindex="-1"><a class="header-anchor" href="#_7-2-2-执行日志"><span>7.2.2 执行日志</span></a></h3><p>运行一段时间后，在项目的目录下会看到gc.log</p><p><img src="'+Gi+'" alt="image-20210408163439858"></p><h3 id="_7-2-3-日志分析" tabindex="-1"><a class="header-anchor" href="#_7-2-3-日志分析"><span>7.2.3 日志分析</span></a></h3><p>打开 gceasy 的主页，上传后点击 Analyze 即可看到分析结果</p><p><img src="'+zi+'" alt="image-20210408163653183"></p><p>1）整体内存概况</p><p>young与old全部吃满，均明显不足，需要调大，meta闲置，可以缩减</p><p><img src="'+qi+'" alt="image-20210408163949306"></p><p>2）整体时间情况</p><p>收集时间绝大多数在10ms以内，说明收集的速度还可以，但是回收次数明显偏多，整体吞吐量94</p><p><img src="'+Ji+'" alt="image-20210408164152924"></p><p>3）回收前后的heap明显抖动频繁，整体偏高</p><p><img src="'+Ti+'" alt="image-20210408172308650"></p><p>4）GC间隔时间长的点，发生大量FullGC</p><p><img src="'+Pi+'" alt="image-20210408172408015"></p><p>5）大批量空间的有效释放在FullGC上</p><p><img src="'+Oi+'" alt="image-20210408172501063"></p><p>6）回收释放情况</p><p>年轻代和年老代回收效果一般，回收前后的两条线甚至发生交叉，应该偏离较远才说明有明显内存下降</p><p>Metaspace比较稳定</p><p><img src="'+wi+'" alt="image-20210408172628499"></p><p>7）A&amp;P：对象从年轻代晋升到老年代的情况</p><p>频繁晋升，跨代移动，说明年轻代不够用，老年代一旦堆积，极容易引发fullGC</p><p><img src="'+Ki+'" alt="image-20210408173001294"></p><p>8）GC次数及时间统计</p><p>发生591次GC，里面竟然有45是FullGC，不可容忍！</p><p>总GC耗时，2.820s，FullGC占了将近一半</p><p><img src="'+Ri+'" alt="image-20210408173408882"></p><p>9）GC停顿情况</p><p>总耗时、平均每次GC耗时 4.77ms</p><p><img src="'+Li+'" alt="image-20210408173756291"></p><p>10）GC被触发的原因</p><p>常规达到阈值垃圾回收45次。</p><p>内存分配失败引发回收，这个会影响正常业务执行。</p><p><img src="'+Vi+'" alt="image-20210408173912968"></p><h2 id="_7-3-初步调优" tabindex="-1"><a class="header-anchor" href="#_7-3-初步调优"><span>7.3 初步调优</span></a></h2><h3 id="_7-3-1-参数" tabindex="-1"><a class="header-anchor" href="#_7-3-1-参数"><span>7.3.1 参数</span></a></h3><p>分析上面的情况，明显年轻代老年代内存均严重不足，那么最简单粗暴的方式，我们加大内存</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>-Xms256m -Xmx256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:gc.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_7-3-2-二次分析" tabindex="-1"><a class="header-anchor" href="#_7-3-2-二次分析"><span>7.3.2 二次分析</span></a></h3><p>重复上面的步骤，新开一个浏览器页签，方便对比分析日志，重点关注几个点：</p><p>1）总内存够用了，但是年轻代依然被吃爆。年老代闲置。</p><p><img src="'+Ii+'" alt="image-20210408180257479"></p><p>2）吞吐量上升，耗时特别长的gc分部区间明显减少，甚至消失</p><p><img src="'+Ni+'" alt="image-20210408180340673"></p><p>3）gc前后的空间曲线对比明显</p><p><img src="'+Hi+'" alt="image-20210408180429177"></p><p>4）FullGC消失！</p><p><img src="'+Ui+'" alt="image-20210408180505228"></p><p>5）GC大批量的内存释放发生在了年轻代</p><p><img src="'+Wi+'" alt="image-20210408180546815"></p><p>6）年轻代的回收前后两条曲线不再交叉，被明显剥离</p><p><img src="'+Zi+'" alt="image-20210408180621878"></p><p>7）年老代表示情绪稳定</p><p><img src="'+Yi+'" alt="image-20210408180647712"></p><p>8）年轻到老年代的晋升明显减少</p><p><img src="'+$i+'" alt="image-20210408180717968"></p><p>9）FullGC完全消失，总GC次数明显减少到49，总停顿时间从上次的2.8s降低到0.3s</p><p><img src="'+Qi+'" alt="image-20210408180822553"></p><p>10）晋升的对象明显减少，创建速度提升</p><p><img src="'+sa+'" alt="image-20210408181044095"></p><p>11）不再发生内存分配失败造成gc的现象</p><p><img src="'+ia+'" alt="image-20210408181203637"></p><h2 id="_7-4-二次调优" tabindex="-1"><a class="header-anchor" href="#_7-4-二次调优"><span>7.4 二次调优</span></a></h2><h3 id="_7-4-1-参数" tabindex="-1"><a class="header-anchor" href="#_7-4-1-参数"><span>7.4.1 参数</span></a></h3><p>结合上次调优，我们发现，年轻代依然不够用，年老代闲置，对象还是会频繁从年轻代晋升到年老代。</p><p>结合我们的业务场景，大批量对象在请求后会被释放，属于短生命周期。包括我们现实中从数据库请求发送到网页后对象就完成了实名，属于同类场景。</p><p>所以，加大年轻代比例！</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>-Xms256m -Xmx256m -XX:NewSize=250m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:gc.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_7-4-2-日志分析" tabindex="-1"><a class="header-anchor" href="#_7-4-2-日志分析"><span>7.4.2 日志分析</span></a></h3><p>同样是256的内存，我们再次跑出日志分析看看差异</p><p>1）年轻代已基本够用，很少有对象再跑到老年代</p><p><img src="'+aa+'" alt="image-20210408182302407"></p><p>2）吞吐量进一步上升</p><p><img src="'+na+'" alt="image-20210408182416738"></p><p>思考一下，那为什么pause的平均时间还变长了呢？？？</p><p>答：次数变少了，单次需要收集的对象多了，所以肯定要占时间，我们接着往下看总耗时！</p><p>3）堆回收空间变化明显</p><p><img src="'+la+'" alt="image-20210408185109798"></p><p>4）gc次数明显下降到8次，总时间进一步降低到80ms</p><p><img src="'+ha+'" alt="image-20210408185136455"></p><h2 id="_7-5-小结" tabindex="-1"><a class="header-anchor" href="#_7-5-小结"><span>7.5 小结</span></a></h2><ul><li>机器主要用来跑java服务的话，一般是需要调优的。因为默认堆最大只占物理内存的1/4</li><li>jvm的调优没有标准可言，不同业务场景的内存占用和增长情况不同。调整需要根据结果一步步来，直到最优。</li><li>调优工具很多，gceasy属于简单直观的ui操作，jvm自带工具大多是命令行且功能较少，在扩展资料里。</li><li>parallel是jdk8下的默认收集器，切换不同收集器后的调试与上面过程一致，感兴趣的同学可以逐个尝试。</li></ul><h1 id="_8、性能监控工具" tabindex="-1"><a class="header-anchor" href="#_8、性能监控工具"><span>8、性能监控工具</span></a></h1><h2 id="系统性能监控" tabindex="-1"><a class="header-anchor" href="#系统性能监控"><span>系统性能监控</span></a></h2><p>确定系统运行的整体状态，基本定位问题所在</p><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux"><span>Linux</span></a></h3><h4 id="uptime" tabindex="-1"><a class="header-anchor" href="#uptime"><span>uptime</span></a></h4><p><img src="'+ea+'" alt="image-20220606080320531"></p><ul><li>系统时间 <ul><li>例子中当前系统时间为 17:03:20</li></ul></li><li>运行时间 <ul><li>例子中为7分钟</li></ul></li><li>连接数 <ul><li>每一个终端算一个连接，例子中为3users</li></ul></li><li>1,5,15分钟内的系统平均负载 <ul><li>运行队列中的平均进程数，例子中为load average: 0.80,0.93,0.50，值越大表示系统负载越重</li></ul></li></ul><h4 id="top" tabindex="-1"><a class="header-anchor" href="#top"><span>top</span></a></h4><p><img src="'+pa+'" alt="image-20220606080750238"></p><h4 id="vmstat" tabindex="-1"><a class="header-anchor" href="#vmstat"><span>vmstat</span></a></h4><ul><li>可以统计系统的CPU，内存，swap，io等情况</li><li>CPU占用率很高，上下文切换频繁，说明系统有线程正在频繁切换</li></ul><p><img src="'+ta+'" alt="image-20220606080928760"></p><blockquote><p>采样频率和采样次数,例子中表示1s一次,采样4条记录</p></blockquote><h4 id="pidstat" tabindex="-1"><a class="header-anchor" href="#pidstat"><span>pidstat</span></a></h4><p>可以细致观察进程，需要安装，监控CPU，监控IO，监控内存</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apt-get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sysstat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+ka+'" alt="image-20220606081229638"></p><p><img src="'+da+'" alt="image-20220606081256030"></p><p>获取到哪个线程有问题，到时候就可以在java中查找哪个线程有问题了</p><p><code>-d</code>显示磁盘IO的情况</p><p><img src="'+ra+'" alt="image-20220606081431416"></p><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows"><span>windows</span></a></h3><h4 id="任务管理器" tabindex="-1"><a class="header-anchor" href="#任务管理器"><span>任务管理器</span></a></h4><p><img src="'+ga+'" alt="image-20220606081544716"></p><p>可以选择列展示</p><p><img src="'+ca+'" alt="image-20220606081555781"></p><h4 id="perfmon" tabindex="-1"><a class="header-anchor" href="#perfmon"><span>Perfmon</span></a></h4><p>Windows自带多功能性能监控工具,cmd命令行可以打开</p><p><img src="'+oa+'" alt="image-20220606081613952"></p><p><img src="'+ya+'" alt="image-20220606081625438"></p><p><img src="'+ma+'" alt="image-20220606081630749"></p><p><img src="'+Aa+'" alt="image-20220606081638015"></p><p>定位到了2368的线程占用了大量的系统资源</p><h4 id="process-explorer" tabindex="-1"><a class="header-anchor" href="#process-explorer"><span>Process Explorer</span></a></h4><p><img src="'+Da+'" alt="image-20220606081654137"></p><blockquote><p>怎么找到系统内最消耗CPU的线程?</p></blockquote><h4 id="pslist" tabindex="-1"><a class="header-anchor" href="#pslist"><span>pslist</span></a></h4><p>命令行工具，可用于自动化数据收集，显示java程序的运行情况</p><p><img src="'+ua+'" alt="image-20220606082300923"></p><p>这里cpu是多核，所以cpu时间大于流逝时间</p><p><img src="'+va+'" alt="image-20220606082334018"></p><h2 id="java自带的工具" tabindex="-1"><a class="header-anchor" href="#java自带的工具"><span>Java自带的工具</span></a></h2><p>查看Java程序运行细节，进一步定位问题</p><p><img src="'+Ba+'" alt="image-20220606082346125"></p><h3 id="jps" tabindex="-1"><a class="header-anchor" href="#jps"><span>jps</span></a></h3><p>列出java进程，类似于ps命令</p><ul><li>参数-q可以指定jps只输出进程ID ，不输出类的短名称</li><li>参数-m可以用于输出传递给Java进程（主函数）的参数</li><li>参数-l可以用于输出主函数的完整路径</li><li>参数-v可以显示传递给JVM的参数</li></ul><p><img src="'+ba+'" alt="image-20220606082620699"></p><p><img src="'+Ca+`" alt="image-20220606082633311"></p><h3 id="jinfo" tabindex="-1"><a class="header-anchor" href="#jinfo"><span>jinfo</span></a></h3><p>可以用来查看正在运行的Java应用程序的扩展参数，甚至支持在运行时，修改部分参数</p><ul><li><code>-flag &lt;name&gt;</code>：打印指定JVM的参数值</li><li><code>-flag [+|-]&lt;name&gt;</code>：设置指定JVM参数的布尔值</li><li><code>-flag &lt;name&gt;=&lt;value&gt;</code>：设置指定JVM参数的值</li></ul><p>显示了新生代对象晋升到老年代对象的最大年龄</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jinfo </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">flag MaxTenuringThreshold </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2972</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MaxTenuringThreshold</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">15</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>显示是否打印GC详细信息</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jinfo </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">flag PrintGCDetails  </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2972</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">PrintGCDetails</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行时修改参数，控制是否输出GC日志</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jinfo </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">flag PrintGCDetails  </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2972</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">PrintGCDetails</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jinfo </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">flag </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">PrintGCDetails  </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2972</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jinfo </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">flag PrintGCDetails  </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2972</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">XX</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">PrintGCDetails</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jmap" tabindex="-1"><a class="header-anchor" href="#jmap"><span>jmap</span></a></h3><blockquote><p>前文有用到jstat对jvm堆内存做统计分析，而jmap可以获取更详细的内存，比如：内存使用情况的汇总、对内存溢出的定位与分析等。</p></blockquote><h4 id="查看内存使用情况" tabindex="-1"><a class="header-anchor" href="#查看内存使用情况"><span>查看内存使用情况</span></a></h4><p><code>jmap -heap 进程ID</code></p><p><img src="`+Ea+`" alt="image-20220830190141761"></p><h4 id="查看内存中对象数量及大小" tabindex="-1"><a class="header-anchor" href="#查看内存中对象数量及大小"><span>查看内存中对象数量及大小</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"># 查看所有对象，包括活跃和非活跃的</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jmap </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">histo </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pid</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> more</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"># 查看活跃对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jmap </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">histo</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">live </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pid</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> more</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+fa+`" alt="image-20220830190632245"></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>#对象说明 </span></span>
<span class="line"><span>B byte </span></span>
<span class="line"><span>C char </span></span>
<span class="line"><span>D double</span></span>
<span class="line"><span>F float </span></span>
<span class="line"><span>I int </span></span>
<span class="line"><span>J long </span></span>
<span class="line"><span>Z boolean </span></span>
<span class="line"><span>[ 数组，如[I表示int[] </span></span>
<span class="line"><span>[L+类名 其他对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成Java应用程序的堆快照和对象的统计信息</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jmap </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">histo </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2972</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">c</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\\</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+_a+`" alt="image-20220606083423253"></p><h4 id="将内存使用情况dump到文件中" tabindex="-1"><a class="header-anchor" href="#将内存使用情况dump到文件中"><span>将内存使用情况Dump到文件中</span></a></h4><p><code>jmap -dump:format=b,file=c:\\heap.hprof 2972</code>,后续可以根据这个文件做进一步的分析。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jmap </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">dump</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">format</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">c</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\\</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">heap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hprof</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2972</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Dumping</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> heap to </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">C</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\\</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">heap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hprof</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ...</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Heap dump file created</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图片效果：</p><p><img src="`+xa+'" alt="image-20220830191111078"></p><p><img src="'+Fa+'" alt="image-20220606083516498"></p><p>对dump文件分析的方法很多</p><h4 id="_1-通过jhat对dump文件进行分析" tabindex="-1"><a class="header-anchor" href="#_1-通过jhat对dump文件进行分析"><span>1.通过jhat对dump文件进行分析</span></a></h4><p>dump文件时二进制的，不方便查看，用jhat就可以： <code>jhat -port &lt;port&gt; &lt;file&gt;</code></p><p><img src="'+ja+'" alt="image-20220830191437756"></p><p>访问：http://localhost:9999/</p><p><img src="'+Sa+'" alt="image-20220830191504682"></p><blockquote><p>比如我们还可以通过OQL查看，生产环境中的dump文件是否有长度很大的。就可以去分析是否合理之类的</p></blockquote><p><img src="'+Xa+`" alt="image-20220830192028935"></p><h4 id="_2-通过mat分析dump文件" tabindex="-1"><a class="header-anchor" href="#_2-通过mat分析dump文件"><span>2.通过MAT分析dump文件</span></a></h4><blockquote><p>见下文JAVA堆分析#MAT使用基础</p></blockquote><h3 id="jstack" tabindex="-1"><a class="header-anchor" href="#jstack"><span>jstack</span></a></h3><blockquote><p>有时候我们需要查看下jvm中的线程执行情况，比如，发现服务的CPU的负载突然增高了，出现了死锁，死循环等。我们该怎么分析?</p><p>由于程序时正常运行的，没有任何的输出，从日志方面也看不出什么问题，所以就需要看下jvm的内部线程的执行情况，然后在进行分析查找出原因。</p><p>这个时候，就需要借助于jstack命令了，jstack的作用是将正在运行的jvm的线程情况进行快照，并且打印出来。</p></blockquote><p>打印线程dump</p><ul><li><p>-l 打印锁信息</p></li><li><p>-m 打印java和native的帧信息</p></li><li><p>-F 强制dump，当jstack没有响应时使用</p></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jstack </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">120</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">C</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\\</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">main</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> #</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> prio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">6</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> os_prio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> tid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0x0831c400</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> nid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0xecc</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> runnable </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0x0018f000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">   java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">State</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> RUNNABLE</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">swt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">internal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">win32</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WaitMessage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Native Method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">swt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">widgets</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4657</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ui</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">application</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">WorkbenchAdvisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">eventLoopIdle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">WorkbenchAdvisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">364</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ui</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">internal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ide</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">application</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">IDEWorkbenchAdvisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">eventLoopIdle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">IDEWorkbenchAdvisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">917</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ui</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">internal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Workbench$3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">eventLoopIdle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Workbench</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">487</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ui</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">internal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">workbench</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">swt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PartRenderingEngine$9</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PartRenderingEngine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1117</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">core</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">databinding</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">observable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Realm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">runWithDefault</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Realm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">332</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ui</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">internal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">workbench</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">swt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PartRenderingEngine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PartRenderingEngine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">997</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ui</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">internal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">workbench</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E4Workbench</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createAndRunUI</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">E4Workbench</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">140</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ui</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">internal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Workbench$5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Workbench</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">611</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">core</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">databinding</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">observable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Realm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">runWithDefault</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Realm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">332</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ui</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">internal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Workbench</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createAndRunWorkbench</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Workbench</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">567</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ui</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PlatformUI</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createAndRunWorkbench</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PlatformUI</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">150</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ui</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">internal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ide</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">application</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">IDEApplication</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">IDEApplication</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">124</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">equinox</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">internal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">app</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EclipseAppHandle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EclipseAppHandle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">196</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">core</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">runtime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">internal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">adaptor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EclipseAppLauncher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">runApplication</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EclipseAppLauncher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">110</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">core</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">runtime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">internal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">adaptor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EclipseAppLauncher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EclipseAppLauncher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">79</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">core</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">runtime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">adaptor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EclipseStarter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EclipseStarter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">354</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">core</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">runtime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">adaptor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EclipseStarter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EclipseStarter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">181</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reflect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">NativeMethodAccessorImpl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">invoke0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Native Method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reflect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">NativeMethodAccessorImpl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">invoke</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Unknown Source</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reflect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">DelegatingMethodAccessorImpl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">invoke</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Unknown Source</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reflect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">invoke</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Unknown Source</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">equinox</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">launcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">invokeFramework</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">636</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">equinox</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">launcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">basicRun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">591</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eclipse</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">equinox</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">launcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1450</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jconsole" tabindex="-1"><a class="header-anchor" href="#jconsole"><span>JConsole</span></a></h3><p>图形化监控工具</p><p>可以查看Java应用程序的运行概况，监控堆信息、永久区使用情况、类加载情况等</p><p><img src="`+Ma+'" alt="image-20220606083624401"></p><p><img src="'+Ga+'" alt="image-20220606083630876"></p><p><img src="'+za+'" alt="image-20220606083638583"></p><p><img src="'+qa+'" alt="image-20220606083649037"></p><h3 id="visual-vmvisual" tabindex="-1"><a class="header-anchor" href="#visual-vmvisual"><span>Visual VMVisual</span></a></h3><p>VM是一个功能强大的多合一故障诊断和性能监控的可视化工具</p><p>VisualVM，能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈(如100个String对象分别由哪几个对象分配出来的)。</p><p>VisualVM使用简单，几乎0配置，功能还是比较丰富的，几乎囊括了其它JDK自带命令的所有功能。</p><ul><li>内存信息</li><li>线程信息</li><li>Dump堆（本地进程）</li><li>Dump线程（本地进程）</li><li>打开堆Dump。堆Dump可以用jmap来生成。</li><li>打开线程Dump</li><li>生成应用快照（包含内存信息、线程信息等等）</li><li>性能分析。CPU分析（各个方法调用时间，检查哪些方法耗时多），内存分析（各类对象占用的内存，检查</li><li>哪些类占用内存多）</li><li>……</li></ul><h4 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span><strong>启动</strong></span></a></h4><p>在jdk的安装目录的bin目录下，找到jvisualvm.exe，双击打开即可。</p><p><img src="'+Ja+'" alt="image-20220915195851918"></p><p><img src="'+Ta+'" alt="image-20220915195903417"></p><h4 id="查看本地进程" tabindex="-1"><a class="header-anchor" href="#查看本地进程"><span><strong>查看本地进程</strong></span></a></h4><p><img src="'+Pa+'" alt="image-20220915195919563"></p><h4 id="查看cpu、内存、类、线程运行信息" tabindex="-1"><a class="header-anchor" href="#查看cpu、内存、类、线程运行信息"><span><strong>查看CPU、内存、类、线程运行信息</strong></span></a></h4><p><img src="'+Oa+'" alt="image-20220915195953453"></p><h4 id="查看线程详情" tabindex="-1"><a class="header-anchor" href="#查看线程详情"><span><strong>查看线程详情</strong></span></a></h4><p><img src="'+wa+'" alt="image-20220915200019581"></p><p>也可以点击右上角Dump按钮，将线程的信息导出，其实就是执行的jstack命令。</p><p><img src="'+Ka+'" alt="image-20220915200032331"></p><p>发现，显示的内容是一样的。</p><h4 id="抽样器" tabindex="-1"><a class="header-anchor" href="#抽样器"><span><strong>抽样器</strong></span></a></h4><p>抽样器可以对CPU、内存在一段时间内进行抽样，以供分析。</p><p><img src="'+Ra+'" alt="image-20220915200052275"></p><p><img src="'+La+'" alt="image-20220606083726599"></p><p><img src="'+Va+'" alt="image-20220606084526922"></p><p><img src="'+Ia+'" alt="image-20220606084502784"></p><blockquote><p>性能监控：找到占用CPU时间最长的方法</p></blockquote><p><img src="'+Na+'" alt="image-20220606083837307"></p><blockquote><p>分析堆Dump</p></blockquote><p><img src="'+Ha+`" alt="image-20220606083856748"></p><blockquote><p>怎么观察Java线程打印？</p></blockquote><h4 id="监控远程的jvm" tabindex="-1"><a class="header-anchor" href="#监控远程的jvm"><span><strong>监控远程的jvm</strong></span></a></h4><p>VisualJVM不仅是可以监控本地jvm进程，还可以监控远程的jvm进程，需要借助于JMX技术实现。</p><p><strong>什么是JMX？</strong></p><p>JMX（Java Management Extensions，即Java管理扩展）是一个为应用程序、设备、系统等植入管理功能的框架。</p><p>JMX可以跨越一系列异构操作系统平台、系统体系结构和网络传输协议，灵活的开发无缝集成的系统、网络和服务管理应用。</p><p><strong>监控远程的tomcat</strong></p><p>想要监控远程的tomcat，就需要在远程的tomcat进行对JMX配置，方法如下：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#在tomcat的bin目录下，修改catalina.sh，添加如下的参数 </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">JAVA_OPTS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9999 - </span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Dcom.sun.management.jmxremote.authenticate=false - </span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Dcom.sun.management.jmxremote.ssl=false</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#这几个参数的意思是： </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#-Dcom.sun.management.jmxremote ：允许使用JMX远程管理 </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#-Dcom.sun.management.jmxremote.port=9999 ：JMX远程连接端口 </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#-Dcom.sun.management.jmxremote.authenticate=false ：不进行身份认证，任何用户都可以连接 </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#-Dcom.sun.management.jmxremote.ssl=false ：不使用ssl</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存退出，重启tomcat。</p><p><strong>使用VisualJVM连接远程tomcat</strong></p><p>添加远程主机：</p><p><img src="`+Ua+'" alt="image-20220915200227524"></p><p>在一个主机下可能会有很多的jvm需要监控，所以接下来要在该主机上添加需要监控的jvm：</p><p><img src="'+Wa+'" alt="image-20220915200243057"></p><p><img src="'+Za+'" alt="image-20220915200254116"></p><p>连接成功。使用方法和前面就一样了，就可以和监控本地jvm进程一样，监控远程的tomcat进程。</p><h2 id="实战分析" tabindex="-1"><a class="header-anchor" href="#实战分析"><span>实战分析</span></a></h2><p>案例问题</p><h3 id="普通分析" tabindex="-1"><a class="header-anchor" href="#普通分析"><span>普通分析</span></a></h3><p>运行一程序ThreadBlockMain，期望输出Hello,World ，结果在程序运行后，程序卡死，没有预期输出</p><p><img src="'+Ya+'" alt="image-20220606084817434"></p><p>Java程序HoldCPUMain运行后，发现占用CPU很高，希望能找到原因。</p><p><img src="'+$a+'" alt="image-20220606083946248"></p><p><img src="'+Qa+'" alt="image-20220606083952669"></p><blockquote><p>3467占用资源比较多，要转成16进制,到jstack里面找。线程的ID号在jstack中是使用16进制表示的。即0xd8b</p></blockquote><p><img src="'+sn+'" alt="image-20220606084000260"></p><blockquote><p>定位到代码了,去HoldxxxTask.run 第8行去看它代码做的操作是什么,导致CPU高</p></blockquote><h3 id="死锁分析" tabindex="-1"><a class="header-anchor" href="#死锁分析"><span>死锁分析</span></a></h3><p><img src="'+an+'" alt="image-20220606084037591"></p><p>如何从jstack的输出中找出死锁</p><p><img src="'+nn+'" alt="image-20220606084732456"></p><p><img src="'+ln+`" alt="image-20220606084714400"></p><h1 id="_9、java堆分析" tabindex="-1"><a class="header-anchor" href="#_9、java堆分析"><span>9、Java堆分析</span></a></h1><h2 id="内存溢出-oom-的原因" tabindex="-1"><a class="header-anchor" href="#内存溢出-oom-的原因"><span>内存溢出(OOM)的原因</span></a></h2><p>在JVM中，有哪些内存区间？堆、永久区、线程栈、直接内存</p><h3 id="堆溢出" tabindex="-1"><a class="header-anchor" href="#堆溢出"><span>堆溢出</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]){</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ArrayList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">byte</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ArrayList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">byte</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]&gt;();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> byte</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 占用大量堆空间，直接溢出</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception in thread </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">main</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OutOfMemoryError</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Java heap space</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">at </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">geym</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ch8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">oom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">SimpleHeapOOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">SimpleHeapOOM</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">14</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>解决方法：增大堆空间(xmx)，及时释放内存</p></blockquote><h3 id="永久区" tabindex="-1"><a class="header-anchor" href="#永久区"><span>永久区</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">生成大量的类</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">100000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        CglibBean</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> bean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> CglibBean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">geym.jvm.ch3.perm.bean</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> HashMap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Caused</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> by</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OutOfMemoryError</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> PermGen space</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Full</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> GC</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">Tenured</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> 2523K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">2523</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">10944K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0.0125610</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> 2523K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">2523</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">15936K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">Perm </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> 4095K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">4095</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">4096K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)],</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0.0125868</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> secs] </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">Times</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.02</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> sys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.00</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> real</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.01</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> secs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Heap</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> def </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> generation   total 4992K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> used 89K </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0x28280000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x287e0000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x2d7d0000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">)</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  eden space 4480K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> used </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0x28280000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x282966d0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x286e0000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">)</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  from space 512K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> used </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0x286e0000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x286e0000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x28760000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">)</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  to   space 512K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> used </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0x28760000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x28760000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x287e0000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">)</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> tenured generation   total 10944K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> used 2523K </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0x2d7d0000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x2e280000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x38280000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">)</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">   the space 10944K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  23</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> used </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0x2d7d0000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x2da46cf0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x2da46e00</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x2e280000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">)</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> compacting perm gen  total 4096K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> used 4095K </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0x38280000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x38680000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x38680000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">)</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">   the space 4096K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  99</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> used </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0x38280000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x3867fff0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x38680000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x38680000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 永久区满了</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    ro space 10240K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  44</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> used </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0x38680000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x38af73f0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x38af7400</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x39080000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">)</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    rw space 12288K</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">  52</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> used </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0x39080000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x396cdd28</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x396cde00</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x39c80000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>解决方法：增大Perm区,允许Class回收</p></blockquote><h3 id="java栈溢出" tabindex="-1"><a class="header-anchor" href="#java栈溢出"><span>Java栈溢出</span></a></h3><p>这里的栈溢出指，在创建线程的时候，需要为线程分配栈空间，这个栈空间是向操作系统请求的，如果操作系统无法给出足够的空间，就会抛出OOM</p><p><img src="`+hn+`" alt="image-20220606163743486"></p><p>比如这里<code>-Xmx1g -Xss1m</code>，堆设置1G,栈设置1M</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> SleepThread</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> implements</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Runnable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10000000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">InterruptedException </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printStackTrace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> SleepThread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Thread</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Thread</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> created</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception in thread </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">main</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OutOfMemoryError</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">unable to create </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> native thread</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>解决方法：减少堆内存,减少线程栈大小</p></blockquote><h3 id="直接内存溢出" tabindex="-1"><a class="header-anchor" href="#直接内存溢出"><span>直接内存溢出</span></a></h3><p>ByteBuffer.allocateDirect()无法从操作系统获得足够的空间</p><p><img src="`+en+'" alt="image-20220606165142149"></p><p><img src="'+pn+'" alt="image-20220606165212147"></p><blockquote><p>遇到内存溢出后，应该如何思考和处理问题？</p></blockquote><h2 id="mat使用基础" tabindex="-1"><a class="header-anchor" href="#mat使用基础"><span>MAT使用基础</span></a></h2><p>基于Eclipse的软件: http://www.eclipse.org/mat/</p><p>下载地址：https://www.eclipse.org/mat/downloads.php</p><p><img src="'+tn+'" alt="image-20230928164211501"></p><p><strong>解压后打开使用</strong></p><p><img src="'+kn+'" alt="SouthEast"></p><h3 id="柱状图显示" tabindex="-1"><a class="header-anchor" href="#柱状图显示"><span>柱状图显示</span></a></h3><p>显示每个类的使用情况，比如类的数量，所占空间等</p><p><img src="'+dn+'" alt="image-20220606170033631"></p><h3 id="显示支配树" tabindex="-1"><a class="header-anchor" href="#显示支配树"><span>显示支配树</span></a></h3><p><img src="'+rn+'" alt="image-20220606170053073"></p><h3 id="支配树的概念" tabindex="-1"><a class="header-anchor" href="#支配树的概念"><span>支配树的概念</span></a></h3><ul><li>在对象引用图中，所有指向对象B的路径都经过对象A，则认为对象A支配对象B</li><li>如果对象A是离对象B最近的一个支配对象，则认为对象A为对象B的直接支配者</li></ul><p>对象引用图转为支配树的图：</p><p><img src="'+gn+'" alt="image-20220606170126633"></p><blockquote><p>支配者被回收，被支配对象也被回收</p></blockquote><h3 id="显示线程信息" tabindex="-1"><a class="header-anchor" href="#显示线程信息"><span>显示线程信息</span></a></h3><p><img src="'+cn+'" alt="image-20220606170259604"></p><h3 id="显示堆总体信息" tabindex="-1"><a class="header-anchor" href="#显示堆总体信息"><span>显示堆总体信息</span></a></h3><p>比如消耗最大的一些对象等</p><p><img src="'+on+'" alt="image-20220606170318998"></p><p><img src="'+yn+'" alt="image-20220606170342853"></p><h3 id="浅堆-shallow-heap-与深堆-retained-heap" tabindex="-1"><a class="header-anchor" href="#浅堆-shallow-heap-与深堆-retained-heap"><span>浅堆(Shallow Heap)与深堆(Retained Heap)</span></a></h3><p><img src="'+mn+'" alt="image-20220606170405414"></p><p>浅堆:</p><ul><li>一个对象结构所占用的内存大小</li></ul><p><img src="'+An+'" alt="image-20220606170506060"></p><blockquote><p>JDK7后，String结构发生变化</p></blockquote><ul><li>3个int类型以及一个引用类型合计占用内存3*4+4=16个字节。再加上对象头的8个字节，因此String对象占用的空间，即浅堆的大小是16+8=24字节</li><li>对象大小按照8字节对齐</li><li>浅堆大小和对象的内容无关，只和对象的结构有关</li></ul><p>深堆</p><ul><li>一个对象被GC回收后，可以真实释放的内存大小</li><li>只能通过对象访问到的（直接或者间接）所有对象的浅堆之和 （支配树）</li></ul><p><img src="'+Dn+'" alt="image-20220606170644174"></p><p><img src="'+un+'" alt="image-20220606170655137"></p><p><img src="'+vn+'" alt="image-20220606170705947"></p><h2 id="使用visual-vm分析堆" tabindex="-1"><a class="header-anchor" href="#使用visual-vm分析堆"><span>使用Visual VM分析堆</span></a></h2><p>java自带的多功能分析工具，可以用来分析堆Dump</p><p><img src="'+Bn+'" alt="image-20220606170738109"></p><p><img src="'+bn+'" alt="image-20220606170751054"></p><p><img src="'+Cn+'" alt="image-20220606170801125"></p><p>使用OOL查询</p><p><img src="'+En+'" alt="image-20220606170822629"></p><p>返回引用了(0,0)这个点的所有对象</p><p><img src="'+fn+`" alt="image-20220606170838535"></p><h2 id="tomcat-oom分析案例" tabindex="-1"><a class="header-anchor" href="#tomcat-oom分析案例"><span>Tomcat OOM分析案例</span></a></h2><h3 id="模拟oom案例例子" tabindex="-1"><a class="header-anchor" href="#模拟oom案例例子"><span>模拟OOM案例例子</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>测视案例可以设置参数: -Xms8m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError </span></span>
<span class="line"><span>8M时为了测试案例快速填满内存,这样内存溢出时会输出到dump文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+_n+'" alt="image-20220915193819177"></p><h3 id="tomcat-oom" tabindex="-1"><a class="header-anchor" href="#tomcat-oom"><span>Tomcat OOM</span></a></h3><p>​ Tomcat 在接收大量请求时发生OOM，获取堆Dump文件，进行分析。分析目的：</p><ul><li>找出OOM的原因</li><li>推测系统OOM时的状态</li><li>给出解决这个OOM的方法</li></ul><h3 id="使用mat打开堆" tabindex="-1"><a class="header-anchor" href="#使用mat打开堆"><span>使用MAT打开堆</span></a></h3><p><img src="'+xn+'" alt="image-20220606170913027"></p><blockquote><p>可以看到StandardManager占用了大量的空间</p></blockquote><p>我们这里关心它引用了哪些对象,outgoing references</p><p><img src="'+Fn+'" alt="image-20220606171003239"></p><p><img src="'+jn+'" alt="image-20220606171016873"></p><blockquote><p>可以看到ConcurrentHashMap占用了大量空间</p></blockquote><p><img src="'+Sn+'" alt="image-20220606171030117"></p><p>打开sessions查看内容</p><p><img src="'+Xn+'" alt="image-20220606171038705"></p><p>确认是否有大量session</p><p><img src="'+Mn+'" alt="image-20220606171049525"></p><blockquote><p>可以看到有9963个对象,每个对象1.5k左右</p></blockquote><p>选中任意session查看详细信息</p><p><img src="'+Gn+'" alt="image-20220606171109911"></p><blockquote><p>这里20分钟session对象才过期</p></blockquote><p><img src="'+zn+'" alt="image-20220606171123052"></p><blockquote><p>这里最后一个session-第一个session的创建时间,就是持续的时间。创建的频率为：320次/s</p></blockquote><p>解决方法：</p><ol><li>OOM由于保存session过多引起，可以考虑增加堆大小</li><li>如果应用允许，缩短session的过期时间，使得session可以及时过期，并回收</li></ol><h1 id="_10、tomcat8优化" tabindex="-1"><a class="header-anchor" href="#_10、tomcat8优化"><span>10、tomcat8优化</span></a></h1><p>tomcat服务器在JavaEE项目中使用率非常高，所以在生产环境对tomcat的优化也变得非常重要了。</p><p>对于tomcat的优化，主要是从2个方面入手，一是，tomcat自身的配置，另一个是tomcat所运行的jvm虚拟机的调优。</p><p>下面我们将从这2个方面进行讲解。</p><h2 id="tomcat配置优化" tabindex="-1"><a class="header-anchor" href="#tomcat配置优化"><span>tomcat配置优化</span></a></h2><h3 id="部署安装tomcat8" tabindex="-1"><a class="header-anchor" href="#部署安装tomcat8"><span>部署安装tomcat8</span></a></h3><p>下载并安装：</p><p>https://tomcat.apache.or/download-80.cgi</p><p><img src="'+qn+`" alt="image-20220915214032806"></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /tmp</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">wget</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.34/bin/apache-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tomcat-8.5.34.tar.gz</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tar</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -xvf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apache-tomcat-8.5.34.tar.gz</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apache-tomcat-8.5.34/conf</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#修改配置文件，配置tomcat的管理用户 </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">vim</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tomcat-users.xml</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#写入如下内容： </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">role </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">rolename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">manager</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">role </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">rolename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">manager-gui</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">role </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">rolename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">admin</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">role </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">rolename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">admin-gui</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">user </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">username</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">tomcat</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> password</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">tomcat</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> roles</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">admin-gui,admin,manager-gui,manager</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#保存退出 </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#如果是tomcat7，配置了tomcat用户就可以登录系统了，但是tomcat8中不行，还需要修改另一个配置文件，否则访 问不了，提示403 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">vim</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> webapps/manager/META-INF/context.xml</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#将&lt;Valve的内容注释掉 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Context </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">antiResourceLocking</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">false</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> privileged</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> &gt; </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;!</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">--</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Valve</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> className=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">org.apache.catalina.valves.RemoteAddrValve</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">			allow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> /</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt; </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">--</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">			&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Manager</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sessionAttributeValueClassNameFilter=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java\\.lang\\. (?:Boolean|Integer|Long|Number|String)|org\\.apache\\.catalina\\.filters\\.CsrfPreventionFilter</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">LruCache(?:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1)?|java\\.util\\.(?:Linked)?HashMap</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/Context</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#保存退出即可 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#启动tomcat </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /tmp/apache-tomcat-8.5.34/bin/</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">./startup.sh</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> tail</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ../logs/catalina.out</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#打开浏览器进行测试访问 </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">http://192.168.40.133:8080/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Jn+'" alt="image-20220915214236019"></p><p>点击“Server Status”，输入用户名、密码进行登录，tomcat/tomcat</p><p><img src="'+Tn+'" alt="image-20220915214252993"></p><p><img src="'+Pn+'" alt="image-20220915214302866"></p><p>进入之后即可看到服务的信息。</p><h3 id="禁用ajp连接" tabindex="-1"><a class="header-anchor" href="#禁用ajp连接"><span><strong>禁用AJP连接</strong></span></a></h3><p>在服务状态页面中可以看到，默认状态下会启用AJP服务，并且占用8009端口。</p><p><img src="'+On+'" alt="image-20220915214333870"></p><p>什么是AJP呢？</p><p>AJP（Apache JServer Protocol） AJPv13协议是面向包的。WEB服务器和Servlet容器通过TCP连接来交互；为了节省SOCKET创建的昂贵代价，WEB服务器会尝试维护一个永久TCP连接到servlet容器，并且在多个请求和响应周期过程会重用连接。</p><p><img src="'+wn+'" alt="image-20220915214346775"></p><p>我们一般是使用Nginx+tomcat的架构，所以用不着AJP协议(apache的才能用)，所以把AJP连接器禁用。</p><p>修改conf下的server.xml文件，将AJP服务禁用掉即可。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Connector </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">port</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">8009</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> protocol</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">AJP/1.3</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> redirectPort</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">8443</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> /</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+Kn+'" alt="image-20220915214405866"></p><p>重启tomcat，查看效果。</p><p><img src="'+Rn+`" alt="image-20220915214453339"></p><p>可以看到AJP服务以及不存在了。</p><h3 id="执行器-线程池" tabindex="-1"><a class="header-anchor" href="#执行器-线程池"><span><strong>执行器（线程池）</strong></span></a></h3><p>在tomcat中每一个用户请求都是一个线程，所以可以使用线程池提高性能。</p><p>修改server.xml文件：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!--将注释打开--&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">Executor</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">tomcatThreadPool</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> namePrefix</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">catalina-exec-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">		maxThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">500</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> minSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">50</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> prestartminSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">		maxQueueSize</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">100</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!-- </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">参数说明： </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">maxThreads：最大并发数，默认设置 200，一般建议在 500 ~ 1000，根据硬件设施和业务来判断 </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">minSpareThreads：Tomcat 初始化时创建的线程数，默认设置 25 </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">prestartminSpareThreads： 在 Tomcat 初始化的时候就初始化 minSpareThreads 的参数值，如果不等于 true，minSpareThreads 的值就没啥效果了 </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">maxQueueSize，最大的等待队列数，超过则拒绝请求 </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">--&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!--在Connector中设置executor属性指向上面的执行器--&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">Connector</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> executor</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">tomcatThreadPool</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> port</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">8080</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> protocol</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">HTTP/1.1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">		connectionTimeout</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">20000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">		redirectPort</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">8443</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存退出，重启tomcat，查看效果。</p><p><img src="`+Ln+`" alt="image-20220915214833821"></p><p>在页面中显示最大线程数为-1，这个是正常的，仅仅是显示的问题，实际使用的指定的值。</p><p>也有人遇到这样的问题：https://blog.csdn.net/weixin_38278878/article/details/80144397</p><h3 id="_3种运行模式" tabindex="-1"><a class="header-anchor" href="#_3种运行模式"><span><strong>3种运行模式</strong></span></a></h3><p>tomcat的运行模式有3种：</p><ol><li><p>bio 默认的模式,性能非常低下,没有经过任何优化处理和支持.</p></li><li><p>nio nio(new I/O)，是Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。Java nio是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，因此nio也被看成是non-blocking I/O的缩写。它拥有比传统I/O操作(bio)更好的并发运行性能。</p></li><li><p>apr 安装起来最困难,但是从操作系统级别来解决异步的IO问题,大幅度的提高性能.</p></li></ol><p>推荐使用nio，不过，在tomcat8中有最新的nio2，速度更快，建议使用nio2.</p><p>设置nio2：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">Connector</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> executor</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">tomcatThreadPool</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> port</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">8080</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">	protocol</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">org.apache.coyote.http11.Http11Nio2Protocol</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">	connectionTimeout</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">20000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">	redirectPort</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">8443</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Vn+'" alt="image-20220915214941286"></p><p>可以看到已经设置为nio2了。</p><h2 id="部署测试用的java-web项目" tabindex="-1"><a class="header-anchor" href="#部署测试用的java-web项目"><span><strong>部署测试用的java web项目</strong></span></a></h2><p>为了方便测试性能，我们将部署一个java web项目，这个项目本身和本套课程没有什么关系，仅仅用于测试。</p><p>注意：这里在测试时，我们使用一个新的tomcat，进行测试，后面再对其进行优化调整，再测试。</p><h3 id="创建dashboard数据库" tabindex="-1"><a class="header-anchor" href="#创建dashboard数据库"><span><strong>创建dashboard数据库</strong></span></a></h3><p>在资料中找到sql脚本文件dashboard.sql，在linux服务器上执行。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>cat dashboard.sql | mysql -uroot -proot</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建完成后，可以看到有3张表。</p><p><img src="'+In+`" alt="image-20220915215118778"></p><h3 id="部署web应用" tabindex="-1"><a class="header-anchor" href="#部署web应用"><span><strong>部署web应用</strong></span></a></h3><p>在资料中找到itcat-dashboard-web.war，上传到linux服务器，进行部署安装。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /tmp/apache-tomcat-8.5.34/webapps</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rf</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mkdir</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ROOT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ROOT/</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rz上传war包</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">jar</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -xvf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> itcat-dashboard-web.war</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> itcat-dashboard-web.war</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#修改数据库配置文件 </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /tmp/apache-tomcat-8.5.34/webapps/ROOT/WEB-INF/classes</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">vim</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> jdbc.properties</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#这里根据自己的实际情况进行配置 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">jdbc.driverClassName</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=com.mysql.jdbc.Driver</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">jdbc.url</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=jdbc:mysql://node01:3306/dashboard?</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">useUnicode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">characterEncoding</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">utf8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">autoReconnect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">allowMultiQueries</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">jdbc.username</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=root</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">jdbc.password</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=root</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新启动tomcat。</p><p>访问首页，查看是否已经启动成功：http://192.168.40.133:8080/index</p><p><img src="`+Nn+'" alt="image-20220915215234078"></p><h2 id="使用apache-jmeter进行测试" tabindex="-1"><a class="header-anchor" href="#使用apache-jmeter进行测试"><span><strong>使用Apache JMeter进行测试</strong></span></a></h2><p>Apache Jmeter是开源的压力测试工具，我们借助于此工具进行测试，将测试出tomcat的吞吐量等信息。</p><h3 id="下载安装" tabindex="-1"><a class="header-anchor" href="#下载安装"><span><strong>下载安装</strong></span></a></h3><p>下载地址：http://jmeter.apache.org/download_jmeter.cgi</p><p><img src="'+Hn+'" alt="image-20220915215315023"></p><p>安装：直接将下载好的zip压缩包进行解压即可。</p><p><img src="'+Un+'" alt="image-20220915215326081"></p><p>进入bin目录，找到jmeter.bat文件，双机打开即可启动。</p><p><img src="'+Wn+'" alt="image-20220915215338170"></p><p><img src="'+Zn+'" alt="image-20220915215342581"></p><p><img src="'+Yn+'" alt="image-20220915215346952"></p><h3 id="修改主题和语言" tabindex="-1"><a class="header-anchor" href="#修改主题和语言"><span><strong>修改主题和语言</strong></span></a></h3><p>默认的主题是黑色风格的主题并且语言是英语，这样不太方便使用，所以需要修改下主题和中文语言。</p><p><img src="'+$n+'" alt="image-20220915215358344"></p><p><img src="'+Qn+'" alt="image-20220915215402078"></p><p><img src="'+sl+'" alt="image-20220915215406268"></p><p>主题修改完成。</p><p>接下来设置语言为简体中文</p><p><img src="'+il+'" alt="image-20220915215415667"></p><p>语言修改完成</p><p><img src="'+al+'" alt="image-20220915215424924"></p><h3 id="创建首页的测试用例" tabindex="-1"><a class="header-anchor" href="#创建首页的测试用例"><span><strong>创建首页的测试用例</strong></span></a></h3><p>第一步：保存测试用例</p><p><img src="'+nl+'" alt="image-20220915215439536"></p><p>第二步：添加线程组，使用线程模拟用户的并发</p><p><img src="'+ll+'" alt="image-20220915215448563"></p><p><img src="'+hl+'" alt="image-20220915215454259"></p><p>1000个线程，每个线程循环10次，也就是tomcat会接收到10000个请求。</p><p>第三步：添加http请求</p><p><img src="'+el+'" alt="image-20220915215503575"></p><p><img src="'+pl+'" alt="image-20220915215509298"></p><p>第四步：添加请求监控</p><p><img src="'+tl+'" alt="image-20220915215519057"></p><p><img src="'+kl+'" alt="image-20220915215524845"></p><h3 id="启动、进行测试" tabindex="-1"><a class="header-anchor" href="#启动、进行测试"><span><strong>启动、进行测试</strong></span></a></h3><p><img src="'+dl+'" alt="image-20220915215538130"></p><h3 id="聚合报告" tabindex="-1"><a class="header-anchor" href="#聚合报告"><span><strong>聚合报告</strong></span></a></h3><p>在聚合报告中，重点看吞吐量。</p><p><img src="'+rl+'" alt="image-20220915215549376"></p><p>12s还是比较慢的。吞吐量每s有73。错误率并不是要保证为0。3个数据应该均衡考量。</p><h2 id="调整tomcat参数进行优化" tabindex="-1"><a class="header-anchor" href="#调整tomcat参数进行优化"><span><strong>调整tomcat参数进行优化</strong></span></a></h2><p>通过上面测试可以看出，tomcat在不做任何调整时，吞吐量为73次/秒。</p><h3 id="禁用ajp服务" tabindex="-1"><a class="header-anchor" href="#禁用ajp服务"><span><strong>禁用AJP服务</strong></span></a></h3><p>编辑Tomcat的config/server.xml文件</p><p><img src="'+gl+'" alt="image-20220915215617009"></p><p><img src="'+cl+'" alt="image-20220915215621819"></p><p>可以看到，禁用AJP服务后，吞吐量会有所提升。</p><p>当然了，测试不一定准确，需要多测试几次才能看出是否有提升</p><h3 id="设置线程池" tabindex="-1"><a class="header-anchor" href="#设置线程池"><span><strong>设置线程池</strong></span></a></h3><p>通过设置线程池，调整线程池相关的参数进行测试tomcat的性能。</p><h4 id="最大线程数为500-初始为50" tabindex="-1"><a class="header-anchor" href="#最大线程数为500-初始为50"><span><strong>最大线程数为500，初始为50</strong></span></a></h4><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">Executor</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">tomcatThreadPool</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> namePrefix</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">catalina-exec-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> maxThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">500</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> minSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">50</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> prestartminSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+ol+'" alt="image-20220915220840055"></p><p>测试结果：</p><p><img src="'+yl+'" alt="image-20220915215703916"></p><p>吞吐量为128次/秒，性能有所提升。</p><h4 id="最大线程数为1000-初始为200" tabindex="-1"><a class="header-anchor" href="#最大线程数为1000-初始为200"><span><strong>最大线程数为1000，初始为200</strong></span></a></h4><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">Executor</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">tomcatThreadPool</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> namePrefix</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">catalina-exec-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> maxThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> minSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">200</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> prestartminSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+ml+'" alt="image-20220915215735978"></p><p>吞吐量为151，性能有所提升</p><h4 id="最大线程数为5000-初始为1000" tabindex="-1"><a class="header-anchor" href="#最大线程数为5000-初始为1000"><span><strong>最大线程数为5000，初始为1000</strong></span></a></h4><p>是否是线程数最多，速度越快呢？ 我们来测试下。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">Executor</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">tomcatThreadPool</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> namePrefix</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">catalina-exec-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> maxThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">5000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> minSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> prestartminSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+Al+`" alt="image-20220915215808314"></p><p>可以看到，虽然最大线程已经设置到5000，但是实际测试效果并不理想，并且平均的响应时间也边长了，所以单纯靠提升线程数量是不能一直得到性能提升的。</p><h3 id="设置最大等待队列数" tabindex="-1"><a class="header-anchor" href="#设置最大等待队列数"><span><strong>设置最大等待队列数</strong></span></a></h3><p>默认情况下，请求发送到tomcat，如果tomcat正忙，那么该请求会一直等待。这样虽然可以保证每个请求都能请求到，但是请求时间就会边长。</p><p>有些时候，我们也不一定要求请求一定等待，可以设置最大等待队列大小，如果超过就不等待了。这样虽然有些请求是失败的，但是请求时间会缩短。典型的应用：12306。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!--最大等待数为100--&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">Executor</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">tomcatThreadPool</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> namePrefix</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">catalina-exec-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> maxThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">500</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> minSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">100</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> prestartminSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">maxQueueSize</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">100</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Dl+`" alt="image-20220915215843384"></p><p>测试结果：</p><ul><li>平均响应时间：3.1秒 <ul><li>响应时间明显缩短</li></ul></li><li>错误率：49.88% <ul><li>错误率提升到一半，也可以理解，最大线程为500，测试的并发为1000</li></ul></li><li>吞吐量：238次/秒 <ul><li>吞吐量明显提升</li></ul></li></ul><p>这样对参数调整、取到Tomcat的最佳状态（响应时间短，吞吐量高），至于错误率可以通过Tomcat集群规避。</p><p>结论：响应时间、吞吐量这2个指标需要找到平衡才能达到更好的性能。</p><h3 id="设置nio2的运行模式" tabindex="-1"><a class="header-anchor" href="#设置nio2的运行模式"><span><strong>设置nio2的运行模式</strong></span></a></h3><p>将最大线程设置为500进行测试：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">Executor</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">tomcatThreadPool</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> namePrefix</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">catalina-exec-</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> maxThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">500</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> minSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">50</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> prestartminSpareThreads</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!-- 设置nio2 --&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">Connector</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> executor</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">tomcatThreadPool</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> port</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">8080</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> protocol</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">org.apache.coyote.http11.Http11Nio2Protocol</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> connectionTimeout</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">20000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> redirectPort</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">8443</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+ul+`" alt="image-20220915215932563"></p><p>可以看到，平均响应时间有缩短，吞吐量有提升，可以得出结论：nio2的性能要高于nio</p><h2 id="调整jvm参数进行优化" tabindex="-1"><a class="header-anchor" href="#调整jvm参数进行优化"><span><strong>调整JVM参数进行优化</strong></span></a></h2><p>接下来，测试通过jvm参数进行优化，为了测试一致性，依然将最大线程数设置为500，启用nio2运行模式。</p><h3 id="设置并行垃圾回收器" tabindex="-1"><a class="header-anchor" href="#设置并行垃圾回收器"><span><strong>设置并行垃圾回收器</strong></span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#年轻代、老年代均使用并行收集器，初始堆内存64M，最大堆内存512M </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">JAVA_OPTS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-XX:+UseParallelGC -XX:+UseParallelOldGC -Xms64m -Xmx512m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:../logs/gc.log</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+vl+'" alt="image-20220915221641646"></p><p>测试结果与默认的JVM参数结果接近。（执行了2次测试，结果是第二次测试的结果）</p><h3 id="查看gc日志文件" tabindex="-1"><a class="header-anchor" href="#查看gc日志文件"><span><strong>查看gc日志文件</strong></span></a></h3><p>将gc.log文件上传到gceasy.io查看gc中是否存在问题。</p><p>问题一：</p><p><img src="'+Bl+'" alt="image-20220915221712247"></p><p>在报告中显示，在5次GC时，系统所消耗的时间大于用户时间，这反应出的服务器的性能存在瓶颈，调度CPU等资源所消耗的时间要长一些。</p><p>问题二：</p><p><img src="'+bl+'" alt="image-20220915221724999"></p><p>可以关键指标中可以看出，吞吐量表现不错，但是gc时，线程的暂停时间稍有点长。</p><p>问题三：</p><p><img src="'+Cl+'" alt="image-20220915221735595"></p><p>通过GC的统计可以看出：</p><ul><li>年轻代的gc有74次，次数稍有多，说明年轻代设置的大小不合适需要调整</li><li>FullGC有8次，说明堆内存的大小不合适，需要调整</li></ul><p>问题四：</p><p><img src="'+El+'" alt="image-20220915221752545"></p><p>从GC原因的可以看出，年轻代大小设置不合理，导致了多次GC。</p><h3 id="调整年轻代大小" tabindex="-1"><a class="header-anchor" href="#调整年轻代大小"><span>调整年轻代大小</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">JAVA_OPTS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-XX:+UseParallelGC -XX:+UseParallelOldGC -Xms128m -Xmx1024m -XX:NewSize=64m -XX:MaxNewSize=256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:../logs/gc.log</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将初始堆大小设置为128m，最大为1024m</p><p>初始年轻代大小64m，年轻代最大256m</p><p><img src="'+fl+'" alt="image-20220915221833571"></p><p>从测试结果来看，吞吐量以及响应时间均有提升。</p><p>查看gc日志：</p><p><img src="'+_l+'" alt="image-20220915221842901"></p><p><img src="'+xl+`" alt="image-20220915221847115"></p><p>可以看到GC次数要明显减少，说明调整是有效的。</p><h3 id="设置g1垃圾回收器" tabindex="-1"><a class="header-anchor" href="#设置g1垃圾回收器"><span><strong>设置G1垃圾回收器</strong></span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#设置了最大停顿时间100毫秒，初始堆内存128m，最大堆内存1024m </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">JAVA_OPTS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-XX:+UseG1GC -XX:MaxGCPauseMillis=100 -Xms128m -Xmx1024m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:../logs/gc.log</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果：</p><p><img src="`+Fl+'" alt="image-20220915221928684"></p><p><img src="'+jl+`" alt="image-20220915221932888"></p><p>可以看到，吞吐量有所提升，评价响应时间也有所缩短。</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span><strong>小结</strong></span></a></h3><p>通过上述的测试，可以总结出，对tomcat性能优化就是需要不断的进行调整参数，然后测试结果，可能会调优也可能会调差，这时就需要借助于gc的可视化工具来看gc的情况。再帮我我们做出决策应该调整哪些参数。</p><h1 id="_11、从字节码角度验证代码优化" tabindex="-1"><a class="header-anchor" href="#_11、从字节码角度验证代码优化"><span>11、从字节码角度验证代码优化</span></a></h1><p>前面我们通过tomcat本身的参数以及jvm的参数对tomcat做了优化，其实要想将应用程序跑的更快、效率更高，除了对tomcat容器以及jvm优化外，应用程序代码本身如果写的效率不高的，那么也是不行的，所以，对于程序本身的优化也就很重要了。</p><p>对于程序本身的优化，可以借鉴很多前辈们的经验，但是有些时候，在从源码角度方面分析的话，不好鉴别出哪个效率高，如对字符串拼接的操作，是直接“+”号拼接效率高还是使用StringBuilder效率高？</p><p>这个时候，就需要通过查看编译好的class文件中字节码，就可以找到答案。</p><p>我们都知道，java编写应用，需要先通过javac命令编译成class文件，再通过jvm执行，jvm执行时是需要将class文件中的字节码载入到jvm进行运行的。</p><h2 id="通过javap命令查看class文件的字节码内容" tabindex="-1"><a class="header-anchor" href="#通过javap命令查看class文件的字节码内容"><span>通过javap命令查看class文件的字节码内容</span></a></h2><p>首先，看一个简单的Test1类的代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">itcast</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Test1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过javap命令查看class文件中的字节码内容：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">javap</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Test1.class</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Test1.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+Sl+'" alt="image-20220915223204417"></p><p>查看Test1.txt文件，内容如下：</p><p><img src="'+Xl+'" alt="image-20220915223337036"></p><p><img src="'+Ml+'" alt="image-20220915223340666"></p><p>内容大致分为4个部分：</p><p>第一部分：显示了生成这个class的java源文件、版本信息、生成时间等。</p><p>第二部分：显示了该类中所涉及到常量池，共35个常量。</p><p>第三部分：显示该类的构造器，编译器自动插入的。</p><p>第四部分：显示了main方的信息。（这个是需要我们重点关注的）</p><h2 id="常量池" tabindex="-1"><a class="header-anchor" href="#常量池"><span><strong>常量池</strong></span></a></h2><p>官网文档：</p><p>https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4-140</p><p><img src="'+Gl+'" alt="image-20220915223510008"></p><h2 id="描述符" tabindex="-1"><a class="header-anchor" href="#描述符"><span>描述符</span></a></h2><p>字段描述符 官网：https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.3.2</p><p><img src="'+zl+'" alt="image-20220915223725266"></p><h2 id="方法描述符" tabindex="-1"><a class="header-anchor" href="#方法描述符"><span>方法描述符</span></a></h2><p>官网：https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.3.3 示例：</p><p>The method descriptor for the method</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Object m(int i, double d, Thread t) {...}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>is:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>(IDLjava/lang/Thread;)Ljava/lang/Object;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="解读方法字节码" tabindex="-1"><a class="header-anchor" href="#解读方法字节码"><span>解读方法字节码</span></a></h2><p><img src="'+ql+'" alt="image-20220915223833230"></p><p><strong>图解</strong></p><p><img src="'+Jl+'" alt="image-20220915223853427"></p><p><img src="'+Tl+'" alt="image-20220915223857345"></p><p><img src="'+Pl+`" alt="image-20220915223904353"></p><h2 id="研究-i-与-i-的不同" tabindex="-1"><a class="header-anchor" href="#研究-i-与-i-的不同"><span><strong>研究</strong> <strong>i++</strong> <strong>与</strong> <strong>++i</strong> <strong>的不同</strong></span></a></h2><p>我们都知道，i++表示，先返回再+1，++i表示，先+1再返回。它的底层是怎么样的呢? 我们一起探究下。</p><p>编写测试代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Test2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">method1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">method2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> method1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //打印1 </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> method2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//打印2 </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看class字节码" tabindex="-1"><a class="header-anchor" href="#查看class字节码"><span><strong>查看class字节码</strong></span></a></h3><p><img src="`+Ol+'" alt="image-20220915224152947"></p><p><img src="'+wl+'" alt="image-20220915224157923"></p><p><img src="'+Kl+'" alt="image-20220915224201382"></p><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span><strong>对比</strong></span></a></h3><p>i++：</p><p><img src="'+Rl+'" alt="image-20220915224243764"></p><p>++i：</p><p><img src="'+Ll+`" alt="image-20220915224255030"></p><p>区别：</p><p>i++</p><ul><li>只是在本地变量中对数字做了相加，并没有将数据压入到操作栈</li><li>将前面拿到的数字1，再次从操作栈中拿到，压入到本地变量中</li></ul><p>++i</p><ul><li>将本地变量中的数字做了相加，并且将数据压入到操作栈</li><li>将操作栈中的数据，再次压入到本地变量中</li></ul><p>小结：可以通过查看字节码的方式对代码的底层做研究，探究其原理。</p><h2 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span><strong>字符串拼接</strong></span></a></h2><p>字符串的拼接在开发过程中使用是非常频繁的，常用的方式有三种：</p><ul><li>+号拼接： str+&quot;456&quot;</li><li>StringBuilder拼接</li><li>StringBuffer拼接</li></ul><p>StringBuffer是保证线程安全的，效率是比较低的，我们更多的是使用场景是不会涉及到线程安全的问题的，所以更多的时候会选择StringBuilder，效率会高一些。</p><p>那么，问题来了，StringBuilder和“+”号拼接，哪个效率高呢？接下来我们通过字节码的方式进行探究。</p><p>首先，编写个示例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">itcast</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Test3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">m1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">m2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> m1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">123</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">456</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> s2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> m2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">123</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">456</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        StringBuilder</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> StringBuilder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        sb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">append</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        sb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">append</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看Test3.class的字节码</p><p><img src="`+Vl+'" alt="image-20220915224426867"></p><p><img src="'+Il+'" alt="image-20220915224441718"></p><p><img src="'+Nl+'" alt="image-20220915224513988"></p><p><img src="'+Hl+'" alt="image-20220915224528841"></p><p><img src="'+Ul+'" alt="image-20220915224556272"></p><p><img src="'+Wl+`" alt="image-20220915224637051"></p><p>从解字节码中可以看出，m1()方法源码中是使用+号拼接，但是在字节码中也被编译成了StringBuilder方式。</p><p>所以，可以得出结论，字符串拼接，+号和StringBuilder是相等的，效率一样。</p><p>接下来，我们再看一个案例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">itcast</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">jvm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Test4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">m1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">m2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> m1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            str </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> str </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> m2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        StringBuilder</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> StringBuilder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            sb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">append</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>m1() 与 m2() 哪个方法的效率高？</p><p>依然是通过字节码的方式进行探究。</p><p><img src="`+Zl+'" alt="image-20220915224744560"></p><p><img src="'+Yl+'" alt="image-20220915224812494"></p><p><img src="'+$l+'" alt="image-20220915224856682"></p><p><img src="'+Ql+`" alt="image-20220915224959101"></p><p>可以看到，m1()方法中的循环体内，每一次循环都会创建StringBuilder对象，效率低于m2()方法。</p><p><strong>小结</strong></p><p>使用字节码的方式可以很好查看代码底层的执行，从而可以看出哪些实现效率高，哪些实现效率低。可以更好的对我们的代码做优化。让程序执行效率更高。</p><h1 id="_12、代码优化" tabindex="-1"><a class="header-anchor" href="#_12、代码优化"><span>12、代码优化</span></a></h1><p>优化，不仅仅是在运行环境进行优化，还需要在代码本身做优化，如果代码本身存在性能问题，那么在其他方面再怎么优化也不可能达到效果最优的。</p><h2 id="尽可能使用局部变量" tabindex="-1"><a class="header-anchor" href="#尽可能使用局部变量"><span>尽可能使用局部变量</span></a></h2><p>调用方法时传递的参数以及在调用中创建的临时变量都保存在栈中速度较快，其他变量，如静态变量、实例变量等，都在堆中创建，速度较慢。另外，栈中创建的变量，随着方法的运行结束，这些内容就没了，不需要额外的垃圾回收。</p><h2 id="尽量减少对变量的重复计算" tabindex="-1"><a class="header-anchor" href="#尽量减少对变量的重复计算"><span>尽量减少对变量的重复计算</span></a></h2><p>明确一个概念，对方法的调用，即使方法中只有一句语句，也是有消耗的。所以例如下面的操作：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {...}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>建议替换为：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {...}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，在list.size()很大的时候，就减少了很多的消耗。</p><h2 id="尽量采用懒加载的策略-即在需要的时候才创建" tabindex="-1"><a class="header-anchor" href="#尽量采用懒加载的策略-即在需要的时候才创建"><span>尽量采用懒加载的策略，即在需要的时候才创建</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">aaa</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//建议替换成 </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">aaa</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常不应该用来控制程序流程" tabindex="-1"><a class="header-anchor" href="#异常不应该用来控制程序流程"><span><strong>异常不应该用来控制程序流程</strong></span></a></h2><p>异常对性能不利。抛出异常首先要创建一个新的对象，Throwable接口的构造函数调用名为fillInStackTrace()的本地同步方法，fillInStackTrace()方法检查堆栈，收集调用跟踪信息。只要有异常被抛出，Java虚拟机就必须调整调用堆栈，因为在处理过程中创建了一个新的对象。异常只能用于错误处理，不应该用来控制程序流程。</p><h2 id="不要将数组声明为public-static-final" tabindex="-1"><a class="header-anchor" href="#不要将数组声明为public-static-final"><span>不要将数组声明为public static final</span></a></h2><p>因为这毫无意义，这样只是定义了引用为static final，数组的内容还是可以随意改变的，将数组声明为public更是一个安全漏洞，这意味着这个数组可以被外部类所改变。</p><h2 id="不要创建一些不使用的对象-不要导入一些不使用的类" tabindex="-1"><a class="header-anchor" href="#不要创建一些不使用的对象-不要导入一些不使用的类"><span>不要创建一些不使用的对象，不要导入一些不使用的类</span></a></h2><p>这毫无意义，如果代码中出现&quot;The value of the local variable i is not used&quot;、&quot;The import java.util is never used&quot;，那么请删除这些无用的内容</p><h2 id="程序运行过程中避免使用反射" tabindex="-1"><a class="header-anchor" href="#程序运行过程中避免使用反射"><span>程序运行过程中避免使用反射</span></a></h2><p>反射是Java提供给用户一个很强大的功能，功能强大往往意味着效率不高。不建议在程序运行过程中使用尤其是频繁使用反射机制，特别是 Method的invoke方法。 如果确实有必要，一种建议性的做法是将那些需要通过反射加载的类在项目启动的时候通过反射实例化出一个对象并放入内存。</p><h2 id="使用数据库连接池和线程池" tabindex="-1"><a class="header-anchor" href="#使用数据库连接池和线程池"><span>使用数据库连接池和线程池</span></a></h2><p>这两个池都是用于重用对象的，前者可以避免频繁地打开和关闭连接，后者可以避免频繁地创建和销毁线程。</p><h2 id="容器初始化时尽可能指定长度" tabindex="-1"><a class="header-anchor" href="#容器初始化时尽可能指定长度"><span>容器初始化时尽可能指定长度</span></a></h2><p>容器初始化时尽可能指定长度，如：new ArrayList&lt;&gt;(10); new HashMap&lt;&gt;(32); 避免容器长度不足时，扩容带来的性能损耗。</p><h2 id="arraylist随机遍历快-linkedlist添加删除快" tabindex="-1"><a class="header-anchor" href="#arraylist随机遍历快-linkedlist添加删除快"><span>ArrayList随机遍历快，LinkedList添加删除快</span></a></h2><h2 id="使用entry遍历map" tabindex="-1"><a class="header-anchor" href="#使用entry遍历map"><span>使用Entry遍历Map</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> HashMap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&gt;();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Entry</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> entry</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> :</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">entrySet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> entry</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getKey</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> entry</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>避免使用下面这种方式：（遍历了2次）</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> HashMap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&gt;();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> :</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">keySet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="不要手动调用system-gc" tabindex="-1"><a class="header-anchor" href="#不要手动调用system-gc"><span>不要手动调用System.gc();</span></a></h2><h2 id="string尽量少用正则表达式" tabindex="-1"><a class="header-anchor" href="#string尽量少用正则表达式"><span>String尽量少用正则表达式</span></a></h2><p>正则表达式虽然功能强大，但是其效率较低，除非是有需要，否则尽可能少用。 replace() 不支持正则 replaceAll() 支持正则 如果仅仅是字符的替换建议使用replace()。</p><h2 id="日志的输出要注意级别" tabindex="-1"><a class="header-anchor" href="#日志的输出要注意级别"><span>日志的输出要注意级别</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 当前的日志级别是error </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">LOGGER</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">保存出错！</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对资源的close-建议分开操作" tabindex="-1"><a class="header-anchor" href="#对资源的close-建议分开操作"><span>对资源的close()建议分开操作</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    XXX</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    YYY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ...</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 建议改为 </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    XXX</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ...</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    YYY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ...</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1741)]))}const lh=i(sh,[["render",ih]]),hh=JSON.parse('{"path":"/chuxin/07_%E6%96%B9%E5%90%91/06_%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01_JVM/","title":"【深入代码系列】手牵手一起学JVM","lang":"zh-CN","frontmatter":{"typora-root-url":"../../../.vuepress/public","title":"【深入代码系列】手牵手一起学JVM","id":"code-deep-concurrency-jvm.html","tags":["方向","并发","JVM"],"categories":["编程"],"keywords":"语法,基础,Java,微服务,编程,数据存储","description":"并发编程","date":"2024-11-13T11:47:25.000Z","createTime":"2025/08/23 15:49:32","permalink":"/chuxin/07_方向/06_并发编程/01_JVM/","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【深入代码系列】手牵手一起学JVM\\",\\"image\\":[\\"https://zuoer96.github.io/docs/docs/images/image-20230928164130440.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20230928164138957.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210322103040674.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220604163905645.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220604164221952.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220604164549468.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220604165145141.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220604165525384.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210322133820431.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210322135008844.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605081910952.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605082130838.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605082248826.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605082403503.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605082528328.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605082625624.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605081532806.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605083227428.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605083513690.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605083715043.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605084247101.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605084406430.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605084450167.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606182947329.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210322174708164.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20230928164236853.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210322175549121.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210322175609021.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606183542274.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210322172801851.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210322175628817.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210329105800328.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210329105546453.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606183820312.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606184302779.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606184358909.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210329104743038.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606184050633.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606184820692.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606184610285.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606184637200.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606184659735.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606184716425.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210329114350327.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210329114932971.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606185129410.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606185153807.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606185211781.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606185227953.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210325135403075.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210329093556986.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210324101225120.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210324103100187.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210324104530470.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210324105125093.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20200421111048271.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210325104219429.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20200421114248164.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830183650282.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830184731968.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830185043741.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830185209013.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210325135056497.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210330111421370.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210326141144524.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210326141912946.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210326141956360.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210330111458021.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210330143017610.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210326152043324.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210401175034807.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20230928164252806.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210331111333565.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210330161050813.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210330164000447.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210331100234007.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210331091443372.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606075858080.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210331153504656.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210331160410760.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210331164644697.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20230928164306371.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210331114434625.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210331114645139.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830175025468.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830180020170.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830175226283.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830175317648.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830180208969.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830180550626.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830181511968.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830181222212.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830182151723.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830183048287.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830182708026.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830182854330.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830183016790.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605092936434.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605093119151.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20200429102816516.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915201654499.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915201753250.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915201850728.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20200429235159875.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20200429235422031.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20200430001554975.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20200430001725601.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210406165830911.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210406170434507.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915204744944.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210406173628609.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210406174157937.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210407085100468.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915205359020.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210407084211962.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915205958150.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210402154906657.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210402160801656.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915210947125.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20230928164203175.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20230928164148445.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210407153159222.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20200506191455510.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210407180815914.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210402114507424.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915212651198.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915212341529.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915212353523.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915212359521.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915212403718.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605090010628.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605085953282.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605085929352.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605085843642.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220605085816651.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408162538333.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408163439858.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408163653183.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408163949306.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408164152924.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408172308650.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408172408015.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408172501063.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408172628499.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408173001294.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408173408882.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408173756291.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408173912968.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408180257479.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408180340673.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408180429177.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408180505228.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408180546815.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408180621878.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408180647712.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408180717968.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408180822553.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408181044095.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408181203637.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408182302407.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408182416738.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408185109798.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20210408185136455.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606080320531.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606080750238.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606080928760.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606081229638.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606081256030.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606081431416.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606081544716.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606081555781.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606081613952.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606081625438.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606081630749.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606081638015.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606081654137.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606082300923.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606082334018.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606082346125.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606082620699.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606082633311.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830190141761.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830190632245.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606083423253.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830191111078.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606083516498.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830191437756.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830191504682.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830192028935.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606083624401.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606083630876.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606083638583.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606083649037.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915195851918.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915195903417.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915195919563.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915195953453.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915200019581.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915200032331.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915200052275.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606083726599.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606084526922.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606084502784.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606083837307.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606083856748.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915200227524.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915200243057.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915200254116.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606084817434.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606083946248.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606083952669.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606084000260.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606084037591.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606084732456.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606084714400.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606163743486.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606165142149.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606165212147.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20230928164211501.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220830192823115.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170033631.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170053073.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170126633.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170259604.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170318998.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170342853.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170405414.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170506060.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170644174.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170655137.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170705947.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170738109.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170751054.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170801125.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170822629.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170838535.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915193819177.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606170913027.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606171003239.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606171016873.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606171030117.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606171038705.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606171049525.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606171109911.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220606171123052.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915214032806.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915214236019.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915214252993.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915214302866.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915214333870.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915214346775.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915214405866.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915214453339.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915214833821.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915214941286.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215118778.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215234078.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215315023.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215326081.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215338170.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215342581.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215346952.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215358344.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215402078.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215406268.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215415667.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215424924.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215439536.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215448563.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215454259.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215503575.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215509298.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215519057.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215524845.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215538130.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215549376.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215617009.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215621819.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915220840055.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215703916.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215735978.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215808314.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215843384.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915215932563.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915221641646.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915221712247.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915221724999.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915221735595.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915221752545.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915221833571.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915221842901.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915221847115.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915221928684.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915221932888.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915223204417.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915223337036.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915223340666.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915223510008.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915223725266.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915223833230.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915223853427.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915223857345.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915223904353.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224152947.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224157923.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224201382.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224243764.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224255030.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224426867.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224441718.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224513988.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224528841.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224556272.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224637051.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224744560.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224812494.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224856682.png\\",\\"https://zuoer96.github.io/docs/docs/images/image-20220915224959101.png\\"],\\"datePublished\\":\\"2024-11-13T11:47:25.000Z\\",\\"dateModified\\":\\"2025-09-03T02:00:28.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://zuoer96.github.io/docs/docs/chuxin/07_%E6%96%B9%E5%90%91/06_%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01_JVM/"}],["meta",{"property":"og:site_name","content":"编程备忘录"}],["meta",{"property":"og:title","content":"【深入代码系列】手牵手一起学JVM"}],["meta",{"property":"og:description","content":"并发编程"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://zuoer96.github.io/docs/docs/images/image-20230928164130440.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-03T02:00:28.000Z"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:tag","content":"方向"}],["meta",{"property":"article:published_time","content":"2024-11-13T11:47:25.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-03T02:00:28.000Z"}]]},"readingTime":{"minutes":144.36,"words":43308},"git":{"createdTime":1755938647000,"updatedTime":1756864828000,"contributors":[{"name":"zuoer96","username":"zuoer96","email":"31268184+zuoer96@users.noreply.github.com","commits":2,"avatar":"https://avatars.githubusercontent.com/zuoer96?v=4","url":"https://github.com/zuoer96"}]},"filePathRelative":"notes/00-方向/06_并发编程/01_JVM.md","headers":[],"bulletin":true}');export{lh as comp,hh as data};
