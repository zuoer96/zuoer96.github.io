import{_ as i,c as a,e as n,o as h}from"./app-CSZEpVl5.js";const e={};function l(t,s){return h(),a("div",null,s[0]||(s[0]=[n(`<p>在日常开发中，Spring事务处理看似简单，实则隐藏着不少容易忽略的细节。 尤其是<strong>异常处理</strong>，关系到事务是否真正回滚！ 本篇笔记带你系统掌握<strong>事务异常处理</strong>的正确打开方式，避免踩坑！</p><hr><h2 id="_1-spring事务依赖异常传播" tabindex="-1"><a class="header-anchor" href="#_1-spring事务依赖异常传播"><span>1. Spring事务依赖异常传播</span></a></h2><p>Spring事务（<code>@Transactional</code>）是通过<strong>AOP代理</strong>实现的，它的工作机制很简单：</p><table><thead><tr><th>场景</th><th>Spring事务行为</th></tr></thead><tbody><tr><td>方法正常返回</td><td>提交事务</td></tr><tr><td>方法抛出异常（满足规则）</td><td>回滚事务</td></tr></tbody></table><p>✅ <strong>重点</strong>： 事务回滚的判断依据是——<strong>方法执行时有没有真正抛出异常</strong>！</p><hr><h2 id="_2-为什么不能直接catch异常" tabindex="-1"><a class="header-anchor" href="#_2-为什么不能直接catch异常"><span>2. 为什么不能直接catch异常？</span></a></h2><p>如果你在事务方法内部<strong>catch了异常</strong>但<strong>没有再抛出去</strong>，就会出现这种情况：</p><ul><li>Spring感知不到异常</li><li>以为一切正常</li><li>✅ 正常提交事务（哪怕业务逻辑早已出错）</li></ul><h3 id="示例-错误示范" tabindex="-1"><a class="header-anchor" href="#示例-错误示范"><span>示例：错误示范</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> save</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Emp emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        empMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">insert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 这里模拟出问题了，你是不想要继续执行后面的逻辑的！！！</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 其他操作，比如修改逻辑</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">出异常了</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 什么都不做</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⛔ 结果：事务不会回滚，数据库产生脏数据！</p><hr><h2 id="_3-rollbackfor-exception-class能解决吗" tabindex="-1"><a class="header-anchor" href="#_3-rollbackfor-exception-class能解决吗"><span>3. <code>rollbackFor = Exception.class</code>能解决吗？</span></a></h2><p>有些人以为可以这么写来兜底：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Transactional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">rollbackFor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Exception</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但是！！！ <strong><code>rollbackFor</code>的本质是：告诉Spring，如果遇到&quot;异常冒出来&quot;，并且异常类型是Exception，也回滚。</strong></p><p>⚠️ <strong>如果catch住异常并吃掉，异常根本没冒出去，rollbackFor压根不会触发。</strong></p><hr><p>✅ <strong>小总结：</strong></p><table><thead><tr><th>问题</th><th>是否解决？</th><th>说明</th></tr></thead><tbody><tr><td>加 <code>rollbackFor</code> 后 <code>catch</code> 住异常不抛出</td><td>❌</td><td>异常感知不到，事务提交</td></tr><tr><td>不<code>catch</code>，直接抛出异常</td><td>✅</td><td>异常冒泡，事务回滚</td></tr><tr><td><code>catch</code>后重新抛出 <code>RuntimeException</code></td><td>✅</td><td>异常冒泡，事务回滚</td></tr></tbody></table><h2 id="_4-为什么不直接抛出-exception-而是推荐抛-runtimeexception" tabindex="-1"><a class="header-anchor" href="#_4-为什么不直接抛出-exception-而是推荐抛-runtimeexception"><span>4. 为什么不直接抛出 Exception，而是推荐抛 RuntimeException？</span></a></h2><p>如果你<code>catch</code>了异常后想重新抛，可以直接抛<code>Exception</code>吗？ <strong>理论上可以</strong>，但是从工程实践来看，这么做非常不推荐，原因有三：</p><h3 id="_4-1-污染方法签名" tabindex="-1"><a class="header-anchor" href="#_4-1-污染方法签名"><span>4.1 污染方法签名</span></a></h3><ul><li>抛出受检异常（<code>Exception</code>）意味着你的方法必须显式声明<code>throws Exception</code>。</li><li>连锁反应：调用者也要加<code>throws Exception</code>，一层一层传递，<strong>方法签名越来越脏。</strong></li></ul><h3 id="_4-2-破坏调用方逻辑" tabindex="-1"><a class="header-anchor" href="#_4-2-破坏调用方逻辑"><span>4.2 破坏调用方逻辑</span></a></h3><ul><li>调用方必须处理异常，不然编译器不放过。</li><li>明明只是内部服务层异常，结果搞得上层代码到处try-catch，<strong>非常恶心。</strong></li></ul><h3 id="_4-3-spring默认只回滚runtimeexception" tabindex="-1"><a class="header-anchor" href="#_4-3-spring默认只回滚runtimeexception"><span>4.3 Spring默认只回滚RuntimeException</span></a></h3><ul><li>Spring事务默认遇到<strong>RuntimeException</strong>才回滚。</li><li>抛Exception，即使冒泡出来，如果没有指定<code>rollbackFor</code>，事务也<strong>不会回滚</strong>！</li><li>写错一个地方，悲剧！</li></ul><p>✅ <strong>最佳实践是</strong>：</p><ol><li>catch住异常</li><li>log下来</li><li>抛出<strong>自定义RuntimeException</strong></li></ol><h2 id="_5-最优雅的事务异常处理范式" tabindex="-1"><a class="header-anchor" href="#_5-最优雅的事务异常处理范式"><span>5. 最优雅的事务异常处理范式</span></a></h2><h3 id="_5-1-自定义业务异常类" tabindex="-1"><a class="header-anchor" href="#_5-1-自定义业务异常类"><span>5.1 自定义业务异常类</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ServiceException</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RuntimeException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ServiceException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        super</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ServiceException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Throwable </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cause</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        super</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cause</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-service层写法" tabindex="-1"><a class="header-anchor" href="#_5-2-service层写法"><span>5.2 Service层写法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> save</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Emp emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        empMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">insert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">保存员工失败</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ServiceException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">保存员工出错</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ catch异常是为了记录日志， ✅ 抛出自定义RuntimeException是为了让事务回滚。</p><h2 id="_6-实战演练小案例" tabindex="-1"><a class="header-anchor" href="#_6-实战演练小案例"><span>6. 实战演练小案例</span></a></h2><blockquote><p>模拟几个常见的事务处理场景，展示实际运行时的行为，并通过日志来验证<strong>事务回滚</strong>或<strong>提交</strong>的结果。</p></blockquote><h3 id="案例1-异常未抛出-事务提交-错误示范" tabindex="-1"><a class="header-anchor" href="#案例1-异常未抛出-事务提交-错误示范"><span>案例1：异常未抛出，事务提交（错误示范）</span></a></h3><h4 id="场景描述" tabindex="-1"><a class="header-anchor" href="#场景描述"><span><strong>场景描述：</strong></span></a></h4><ul><li><strong>模拟方法</strong>中，发生了一个异常，但被catch住了。</li><li><strong>事务</strong>依然<strong>提交</strong>，并没有回滚。</li></ul><h4 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span><strong>代码实现：</strong></span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> saveEmployee</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Emp emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        empMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">insert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 正常插入</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 故意触发异常</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">发生异常，但没有重新抛出，事务不会回滚</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 异常被catch住了，什么也不做，事务提交</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="预期结果" tabindex="-1"><a class="header-anchor" href="#预期结果"><span><strong>预期结果：</strong></span></a></h4><ul><li>日志会输出异常信息，但事务<strong>不会回滚</strong>。</li><li>你会看到数据表里可能已经插入了数据（假设<code>empMapper.insert(emp)</code>成功）。</li></ul><h4 id="验证步骤" tabindex="-1"><a class="header-anchor" href="#验证步骤"><span><strong>验证步骤：</strong></span></a></h4><ol><li>运行代码。</li><li>查看数据库，发现<code>emp</code>表的记录已经被插入。</li><li>通过日志可以确认异常被捕获，但事务没有回滚。</li></ol><hr><h3 id="案例2-抛出-runtimeexception-事务回滚-正确示范" tabindex="-1"><a class="header-anchor" href="#案例2-抛出-runtimeexception-事务回滚-正确示范"><span>案例2：抛出 RuntimeException，事务回滚（正确示范）</span></a></h3><h4 id="场景描述-1" tabindex="-1"><a class="header-anchor" href="#场景描述-1"><span><strong>场景描述：</strong></span></a></h4><ul><li>当发生异常时，我们<strong>直接抛出一个 RuntimeException</strong>。</li><li>Spring会感知到这个异常，并回滚事务。</li></ul><h4 id="代码实现-1" tabindex="-1"><a class="header-anchor" href="#代码实现-1"><span><strong>代码实现：</strong></span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> saveEmployee</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Emp emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        empMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">insert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 正常插入</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 故意触发异常</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">发生异常，抛出RuntimeException，事务会回滚</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RuntimeException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">保存员工失败，事务回滚</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="预期结果-1" tabindex="-1"><a class="header-anchor" href="#预期结果-1"><span><strong>预期结果：</strong></span></a></h4><ul><li>异常会被捕获并且重新抛出 <code>RuntimeException</code>。</li><li>事务<strong>回滚</strong>，<code>emp</code>表的记录不会被插入。</li></ul><h4 id="验证步骤-1" tabindex="-1"><a class="header-anchor" href="#验证步骤-1"><span><strong>验证步骤：</strong></span></a></h4><ol><li>运行代码。</li><li>查看数据库，确认<code>emp</code>表中的记录<strong>没有插入</strong>。</li><li>通过日志可以确认异常被捕获并重新抛出 <code>RuntimeException</code>，事务已经回滚。</li></ol><hr><h3 id="案例3-指定-rollbackfor-exception-class-事务回滚-指定回滚策略" tabindex="-1"><a class="header-anchor" href="#案例3-指定-rollbackfor-exception-class-事务回滚-指定回滚策略"><span>案例3：指定 rollbackFor = Exception.class，事务回滚（指定回滚策略）</span></a></h3><h4 id="场景描述-2" tabindex="-1"><a class="header-anchor" href="#场景描述-2"><span><strong>场景描述：</strong></span></a></h4><ul><li>使用<code>@Transactional(rollbackFor = Exception.class)</code>，让Spring回滚<strong>所有Exception</strong>，包括普通的受检异常（Checked Exception）。</li><li>即使我们抛出了<code>Exception</code>，事务也能回滚。</li></ul><h4 id="代码实现-2" tabindex="-1"><a class="header-anchor" href="#代码实现-2"><span><strong>代码实现：</strong></span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Transactional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">rollbackFor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Exception</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> saveEmployee</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Emp emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> throws Exception </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        empMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">insert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 正常插入</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 故意触发异常</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">发生异常，抛出Exception，事务会回滚</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Exception</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">保存员工失败，事务回滚</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="预期结果-2" tabindex="-1"><a class="header-anchor" href="#预期结果-2"><span><strong>预期结果：</strong></span></a></h4><ul><li><code>Exception</code>被抛出，事务会回滚。</li><li><code>emp</code>表中的记录不会被插入。</li></ul><h4 id="验证步骤-2" tabindex="-1"><a class="header-anchor" href="#验证步骤-2"><span><strong>验证步骤：</strong></span></a></h4><ol><li>运行代码。</li><li>查看数据库，确认<code>emp</code>表中的记录<strong>没有插入</strong>。</li><li>通过日志可以确认异常被捕获并重新抛出 <code>Exception</code>，事务已经回滚。</li></ol><hr><h3 id="案例4-catch异常后重新抛出自定义runtimeexception-事务回滚-优雅方案" tabindex="-1"><a class="header-anchor" href="#案例4-catch异常后重新抛出自定义runtimeexception-事务回滚-优雅方案"><span>案例4：catch异常后重新抛出自定义RuntimeException，事务回滚（优雅方案）</span></a></h3><h4 id="场景描述-3" tabindex="-1"><a class="header-anchor" href="#场景描述-3"><span><strong>场景描述：</strong></span></a></h4><ul><li>使用<code>RuntimeException</code>自定义异常来重新抛出异常。</li><li>Spring感知到异常后，事务会回滚。</li></ul><h4 id="代码实现-3" tabindex="-1"><a class="header-anchor" href="#代码实现-3"><span><strong>代码实现：</strong></span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> saveEmployee</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Emp emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        empMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">insert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 正常插入</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 故意触发异常</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">发生异常，抛出自定义的RuntimeException，事务会回滚</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ServiceException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">保存员工失败，事务回滚</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 自定义异常</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ServiceException</code>是自定义的<code>RuntimeException</code>，如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ServiceException</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RuntimeException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ServiceException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Throwable </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cause</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        super</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cause</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="预期结果-3" tabindex="-1"><a class="header-anchor" href="#预期结果-3"><span><strong>预期结果：</strong></span></a></h4><ul><li>异常被捕获并重新抛出自定义的<code>RuntimeException</code>。</li><li>事务<strong>回滚</strong>，<code>emp</code>表中的记录不会被插入。</li></ul><h4 id="验证步骤-3" tabindex="-1"><a class="header-anchor" href="#验证步骤-3"><span><strong>验证步骤：</strong></span></a></h4><ol><li>运行代码。</li><li>查看数据库，确认<code>emp</code>表中的记录<strong>没有插入</strong>。</li><li>通过日志可以确认异常被捕获并重新抛出<code>ServiceException</code>，事务已经回滚。</li></ol><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>这些案例可以帮助你理解不同情况下事务的行为：</p><ol><li><strong>未抛出异常时</strong>，事务提交。</li><li><strong>抛出 <code>RuntimeException</code> 或 <code>Exception</code>时</strong>，事务回滚（<code>Exception</code>需指定 <code>rollbackFor</code>）。</li><li><strong>捕获异常后重新抛出</strong>，事务会回滚。</li></ol><p>通过这些实战演练，你可以清晰地看到Spring事务的回滚机制和如何优雅地控制事务回滚。 这样，你就能在实际开发中灵活应用，避免事务处理中的常见问题！</p><h2 id="_7-一句话记住" tabindex="-1"><a class="header-anchor" href="#_7-一句话记住"><span>7. 一句话记住</span></a></h2><blockquote><p><strong>事务是否回滚，不是看你catch了什么异常，是看异常最后有没有&quot;活着冒出去&quot;！</strong></p></blockquote><table><thead><tr><th>场景</th><th>Spring行为</th><th>推荐做法</th></tr></thead><tbody><tr><td><strong>抛出 RuntimeException</strong></td><td>事务会回滚</td><td>✅ 推荐做法：抛出 <code>RuntimeException</code>（或其子类），事务会回滚。这是默认行为。</td></tr><tr><td><strong>抛出 Checked Exception（普通 Exception）</strong></td><td>默认不回滚（除非指定 <code>rollbackFor</code>）</td><td>❌ 不推荐：<code>Checked Exception</code> 默认不会回滚，除非使用 <code>@Transactional(rollbackFor = Exception.class)</code> 明确指定回滚。</td></tr><tr><td><strong>catch 异常但不重新抛出</strong></td><td>事务会提交（错误行为）</td><td>❌ 严禁：如果你在 catch 块中捕获异常并且没有重新抛出，事务会被认为正常结束并提交，<strong>导致数据不一致</strong>。</td></tr><tr><td><strong>catch 异常并重新抛出 <code>RuntimeException</code></strong></td><td>事务会回滚</td><td>✅ 最优雅做法：捕获异常后，重新抛出一个 <code>RuntimeException</code>（或者自定义的继承自 <code>RuntimeException</code> 的异常），Spring 会感知到这个异常并回滚事务。</td></tr></tbody></table><h2 id="附-事务异常处理决策流程图" tabindex="-1"><a class="header-anchor" href="#附-事务异常处理决策流程图"><span>附：事务异常处理决策流程图</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>业务代码</span></span>
<span class="line"><span>   ↓</span></span>
<span class="line"><span>发生异常？</span></span>
<span class="line"><span>   ↓</span></span>
<span class="line"><span>  是</span></span>
<span class="line"><span>   ↓</span></span>
<span class="line"><span>catch异常了？</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>是 ➔ 再抛出 RuntimeException？ </span></span>
<span class="line"><span>         ↓</span></span>
<span class="line"><span>      是 ➔ Spring感知异常，回滚事务</span></span>
<span class="line"><span>      否 ➔ Spring以为正常，提交事务 ❌</span></span>
<span class="line"><span>  否</span></span>
<span class="line"><span>  直接冒泡 ➔ Spring感知异常，回滚事务</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🧠 到这里，你就掌握了<strong>事务异常处理的完整套路</strong>！ 以后不管是简单CRUD，还是复杂业务链路，都可以写出又优雅又可靠的事务代码啦～🚀</p><h2 id="拓展-事务传播行为" tabindex="-1"><a class="header-anchor" href="#拓展-事务传播行为"><span>拓展：事务传播行为</span></a></h2><blockquote><p>能不用传播就不用，事务设计<strong>越简单越好</strong></p></blockquote><h3 id="_90-业务-默认-required" tabindex="-1"><a class="header-anchor" href="#_90-业务-默认-required"><span>90%业务：默认 <code>REQUIRED</code></span></a></h3><ul><li>正常的增删改操作都是默认的。</li><li>有事务复用，没有事务新建。</li></ul><h3 id="特殊场景-用-requires-new" tabindex="-1"><a class="header-anchor" href="#特殊场景-用-requires-new"><span>特殊场景：用 <code>REQUIRES_NEW</code></span></a></h3><ul><li>需要<strong>保证独立提交</strong>，<strong>不受外部事务回滚影响</strong>。</li><li>最典型的就是「记录审计日志」。</li></ul><p>比如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Transactional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">propagation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Propagation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">REQUIRES_NEW</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> saveAuditLog</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">AuditLog log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ 主业务失败也要记录日志。 ✅ 事务挂起，单独提交，互不干扰。</p><h3 id="✨-关于「关键业务操作记录日志」是不是用-requires-new-的解决方案" tabindex="-1"><a class="header-anchor" href="#✨-关于「关键业务操作记录日志」是不是用-requires-new-的解决方案"><span>✨ 关于「关键业务操作记录日志」是不是用 REQUIRES_NEW 的解决方案？</span></a></h3><p>答案是：<strong>通常是，但也要分场景</strong>。</p><h3 id="✅-为什么「关键日志」用-requires-new-是合适的" tabindex="-1"><a class="header-anchor" href="#✅-为什么「关键日志」用-requires-new-是合适的"><span>✅ 为什么「关键日志」用 <code>REQUIRES_NEW</code> 是合适的？</span></a></h3><p>因为日志（比如操作日志、审计日志、安全日志等）本身的<strong>重要性独立于业务主流程</strong>，通常我们希望：</p><ul><li><strong>即使业务失败回滚</strong>（比如插入员工失败了），</li><li><strong>日志仍然必须保存下来</strong>（比如记录是谁操作了，发生了什么异常）。</li></ul><p>而<strong>事务默认是嵌套的</strong>，如果不特别声明，父事务回滚会把子事务（日志保存）也一起回滚。 所以，为了确保日志一定成功，我们就让它自己起个新的事务，跟父事务断开关系：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Transactional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">propagation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Propagation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">REQUIRES_NEW</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> saveLog</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">OperationLog log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    operationLogMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">insert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就算主事务 <code>saveEmployee</code> 出问题，日志事务也能单独提交 ✅。</p><hr><h3 id="📌-但不是所有日志都必须-requires-new" tabindex="-1"><a class="header-anchor" href="#📌-但不是所有日志都必须-requires-new"><span>📌 但不是所有日志都必须 <code>REQUIRES_NEW</code></span></a></h3><p>要分情况：</p><table><thead><tr><th>日志类型</th><th>事务要求</th><th>是否用 REQUIRES_NEW</th></tr></thead><tbody><tr><td><strong>审计日志/操作日志</strong></td><td>无论主业务成功还是失败都要记录</td><td>用 ✅</td></tr><tr><td><strong>调试日志/普通系统日志</strong></td><td>仅供排查用，不要求写数据库或强一致性</td><td>不用 ❌</td></tr><tr><td><strong>关联业务数据的日志</strong></td><td>如果主业务失败，这条日志也应该回滚</td><td>不用 ❌（和主事务同生共死）</td></tr></tbody></table><p><strong>总结一句话</strong>： 🔹 <strong>需要独立保存，不受主业务失败影响的日志 ➔ 用 <code>REQUIRES_NEW</code>。</strong> 🔹 <strong>跟主业务成败强关联的数据 ➔ 跟随主事务，不需要新事务。</strong></p><hr><h3 id="🔥-再用你之前「保存员工」的案例举个对比" tabindex="-1"><a class="header-anchor" href="#🔥-再用你之前「保存员工」的案例举个对比"><span>🔥 再用你之前「保存员工」的案例举个对比：</span></a></h3><h4 id="_1-审计日志-需要独立保存-记录谁操作了员工保存" tabindex="-1"><a class="header-anchor" href="#_1-审计日志-需要独立保存-记录谁操作了员工保存"><span>1. 审计日志（需要独立保存，记录谁操作了员工保存）</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Transactional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">propagation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Propagation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">REQUIRES_NEW</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> saveAuditLog</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Emp emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    AuditLog</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> AuditLog</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setAction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Create employee</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setEmployeeId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setOperator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">admin</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setTimestamp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">LocalDateTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">now</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    auditLogMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">insert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✔️ 即使 <code>saveEmployee</code> 失败，<code>saveAuditLog</code> 也会单独成功提交。</p><h4 id="_2-业务日志-比如记录员工入职信息-入职失败了当然不能留记录" tabindex="-1"><a class="header-anchor" href="#_2-业务日志-比如记录员工入职信息-入职失败了当然不能留记录"><span>2. 业务日志（比如记录员工入职信息，入职失败了当然不能留记录）</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> saveBusinessLog</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Emp emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    BusinessLog</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> BusinessLog</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setContent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Employee joined on </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getJoinDate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setEmployeeId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">emp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    businessLogMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">insert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✔️ 这里跟着主事务走，如果员工保存失败，日志也应该一起回滚。</p><hr><h3 id="🛠-所以你问的核心点可以总结为" tabindex="-1"><a class="header-anchor" href="#🛠-所以你问的核心点可以总结为"><span>🛠 所以你问的核心点可以总结为：</span></a></h3><ul><li><strong>关键审计日志</strong>（尤其是安全、合规相关的）➡️ 推荐使用 <code>REQUIRES_NEW</code>。</li><li><strong>普通业务相关日志</strong>（跟主数据状态强绑定）➡️ 不要单独事务，跟主事务绑定。</li></ul><p>这样用才真正合理、优雅、专业！</p>`,126)]))}const p=i(e,[["render",l]]),r=JSON.parse('{"path":"/chuxin/07_%E6%96%B9%E5%90%91/08_%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E7%A2%8E%E7%89%87%E7%9F%A5%E8%AF%86%E7%82%B9/001.%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/","title":"001.你不知道的事务异常处理","lang":"zh-CN","frontmatter":{"typora-root-url":"../../../.vuepress/public","title":"001.你不知道的事务异常处理","createTime":"2025/08/23 15:49:34","permalink":"/chuxin/07_方向/08_有意思的碎片知识点/001.你不知道的事务异常处理/","description":"在日常开发中，Spring事务处理看似简单，实则隐藏着不少容易忽略的细节。 尤其是异常处理，关系到事务是否真正回滚！ 本篇笔记带你系统掌握事务异常处理的正确打开方式，避免踩坑！ 1. Spring事务依赖异常传播 Spring事务（@Transactional）是通过AOP代理实现的，它的工作机制很简单： ✅ 重点： 事务回滚的判断依据是——方法执行时...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"001.你不知道的事务异常处理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-03T02:00:28.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://zuoer96.github.io/docs/docs/chuxin/07_%E6%96%B9%E5%90%91/08_%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E7%A2%8E%E7%89%87%E7%9F%A5%E8%AF%86%E7%82%B9/001.%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"}],["meta",{"property":"og:site_name","content":"编程备忘录"}],["meta",{"property":"og:title","content":"001.你不知道的事务异常处理"}],["meta",{"property":"og:description","content":"在日常开发中，Spring事务处理看似简单，实则隐藏着不少容易忽略的细节。 尤其是异常处理，关系到事务是否真正回滚！ 本篇笔记带你系统掌握事务异常处理的正确打开方式，避免踩坑！ 1. Spring事务依赖异常传播 Spring事务（@Transactional）是通过AOP代理实现的，它的工作机制很简单： ✅ 重点： 事务回滚的判断依据是——方法执行时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-03T02:00:28.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-03T02:00:28.000Z"}]]},"readingTime":{"minutes":9.9,"words":2970},"git":{"createdTime":1755938647000,"updatedTime":1756864828000,"contributors":[{"name":"zuoer96","username":"zuoer96","email":"31268184+zuoer96@users.noreply.github.com","commits":2,"avatar":"https://avatars.githubusercontent.com/zuoer96?v=4","url":"https://github.com/zuoer96"}]},"autoDesc":true,"filePathRelative":"notes/00-方向/08_有意思的碎片知识点/001_你不知道的事务异常处理.md","headers":[],"bulletin":true}');export{p as comp,r as data};
