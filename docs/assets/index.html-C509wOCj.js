import{_ as s,c as e,a as n,o as i}from"./app-D9na5qdx.js";const t={};function o(r,a){return i(),e("div",null,a[0]||(a[0]=[n(`<h2 id="异常场景" tabindex="-1"><a class="header-anchor" href="#异常场景"><span>异常场景</span></a></h2><p>前端传字符串给后台， 后台实体类中字段为<code>LocalDateTime</code>类型，接收的时候报错了。</p><p>错误如下：</p><p><code>Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text &#39;2025-03-01 10:52:03&#39; could not be parsed at index 10</code></p><h2 id="分析原因" tabindex="-1"><a class="header-anchor" href="#分析原因"><span>分析原因</span></a></h2><p>这个问题的根本原因是 <strong>Jackson 不能直接将 <code>yyyy-MM-dd HH:mm:ss</code> 格式的字符串解析为 <code>LocalDateTime</code></strong>。</p><p>默认情况下，<code>LocalDateTime</code> 需要 <strong><code>yyyy-MM-dd&#39;T&#39;HH:mm:ss</code></strong> 这种格式，例如： ✅ <code>2025-03-01T10:52:03</code> ❌ <code>2025-03-01 10:52:03</code>（你的前端传输的格式）</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><h2 id="解决方案-1" tabindex="-1"><a class="header-anchor" href="#解决方案-1"><span><strong>解决方案</strong></span></a></h2><h3 id="方案-1-使用-jsonformat-让-jackson-识别-yyyy-mm-dd-hh-mm-ss" tabindex="-1"><a class="header-anchor" href="#方案-1-使用-jsonformat-让-jackson-识别-yyyy-mm-dd-hh-mm-ss"><span><strong>方案 1：使用 <code>@JsonFormat</code> 让 Jackson 识别 <code>&quot;yyyy-MM-dd HH:mm:ss&quot;</code></strong></span></a></h3><p>在你的 <strong>实体类</strong> 中，给 <code>LocalDateTime</code> 字段加上 <code>@JsonFormat</code>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>import com.fasterxml.jackson.annotation.JsonFormat;</span></span>
<span class="line"><span>import java.time.LocalDateTime;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class SavePlanForm {</span></span>
<span class="line"><span>    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span>
<span class="line"><span>    private LocalDateTime startDate;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ <strong>适用于单个字段，简单易用。</strong></p><hr><h3 id="方案-2-使用-datetimeformat-仅对-requestparam-生效" tabindex="-1"><a class="header-anchor" href="#方案-2-使用-datetimeformat-仅对-requestparam-生效"><span><strong>方案 2：使用 <code>@DateTimeFormat</code>（仅对 <code>@RequestParam</code> 生效）</strong></span></a></h3><p>如果 <code>startDate</code> 是 <code>@RequestParam</code>（如 <code>GET</code> 请求参数），你需要用 <code>@DateTimeFormat</code>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>import org.springframework.format.annotation.DateTimeFormat;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@RestController</span></span>
<span class="line"><span>@RequestMapping(&quot;/api&quot;)</span></span>
<span class="line"><span>public class SavePlanController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @GetMapping(&quot;/savePlan&quot;)</span></span>
<span class="line"><span>    public String getPlan(@RequestParam @DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;) LocalDateTime startDate) {</span></span>
<span class="line"><span>        return &quot;Received date: &quot; + startDate;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ <strong>适用于 <code>@RequestParam</code>，但不适用于 <code>@RequestBody</code></strong>。</p><hr><h3 id="方案-3-全局配置-jackson-解析规则" tabindex="-1"><a class="header-anchor" href="#方案-3-全局配置-jackson-解析规则"><span><strong>方案 3：全局配置 Jackson 解析规则</strong></span></a></h3><p>如果你想让所有的 <code>LocalDateTime</code> 统一支持 <code>&quot;yyyy-MM-dd HH:mm:ss&quot;</code>，可以 <strong>全局配置 Jackson</strong>：</p><h4 id="_1️⃣-创建-jackson-配置类" tabindex="-1"><a class="header-anchor" href="#_1️⃣-创建-jackson-配置类"><span><strong>1️⃣ 创建 Jackson 配置类</strong></span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>import com.fasterxml.jackson.databind.ObjectMapper;</span></span>
<span class="line"><span>import com.fasterxml.jackson.databind.SerializationFeature;</span></span>
<span class="line"><span>import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;</span></span>
<span class="line"><span>import org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span>import org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Configuration</span></span>
<span class="line"><span>public class JacksonConfig {</span></span>
<span class="line"><span>    @Bean</span></span>
<span class="line"><span>    public ObjectMapper objectMapper() {</span></span>
<span class="line"><span>        ObjectMapper objectMapper = new ObjectMapper();</span></span>
<span class="line"><span>        objectMapper.registerModule(new JavaTimeModule());</span></span>
<span class="line"><span>        objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span></span>
<span class="line"><span>        return objectMapper;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2️⃣-在-application-yml-添加-jackson-配置" tabindex="-1"><a class="header-anchor" href="#_2️⃣-在-application-yml-添加-jackson-配置"><span><strong>2️⃣ 在 <code>application.yml</code> 添加 Jackson 配置</strong></span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>spring:</span></span>
<span class="line"><span>  jackson:</span></span>
<span class="line"><span>    date-format: yyyy-MM-dd HH:mm:ss</span></span>
<span class="line"><span>    time-zone: Asia/Shanghai</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ <strong>适用于整个项目，不需要每个实体类都加 <code>@JsonFormat</code>。</strong></p><hr><h3 id="方案-4-前端修改传输的时间格式" tabindex="-1"><a class="header-anchor" href="#方案-4-前端修改传输的时间格式"><span><strong>方案 4：前端修改传输的时间格式</strong></span></a></h3><p>如果你可以修改前端代码，建议前端使用 <strong><code>yyyy-MM-dd&#39;T&#39;HH:mm:ss</code></strong> 这种格式：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>const startDate = new Date().toISOString(); // 2025-03-01T10:52:03.000Z</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>✅ <strong>根本解决问题，不需要后端做特殊处理。</strong></p><hr><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span><strong>最佳实践</strong></span></a></h2><ul><li>如果 <strong>仅一个字段</strong> 需要处理：<strong>方案 1 (<code>@JsonFormat</code>)</strong></li><li>如果 <strong>是 <code>@RequestParam</code></strong>：<strong>方案 2 (<code>@DateTimeFormat</code>)</strong></li><li>如果 <strong>想让整个项目都支持 <code>yyyy-MM-dd HH:mm:ss</code></strong>：<strong>方案 3（全局配置）</strong></li><li>如果 <strong>可以修改前端</strong>：<strong>方案 4（前端改格式）</strong></li></ul>`,34)]))}const d=s(t,[["render",o]]),p=JSON.parse(`{"path":"/chuxin/zisyssuu/","title":"002_SpringBoot实体类LocalDateTime接收不了时间字符串","lang":"zh-CN","frontmatter":{"typora-root-url":"../../../.vuepress/public","title":"002_SpringBoot实体类LocalDateTime接收不了时间字符串","createTime":"2025/09/04 16:10:26","permalink":"/chuxin/zisyssuu/","description":"异常场景 前端传字符串给后台， 后台实体类中字段为LocalDateTime类型，接收的时候报错了。 错误如下： Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text '2025-03-01 10:52:03' coul...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"002_SpringBoot实体类LocalDateTime接收不了时间字符串\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-09T07:40:44.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://zuoer96.github.io/docs/docs/chuxin/zisyssuu/"}],["meta",{"property":"og:site_name","content":"编程备忘录"}],["meta",{"property":"og:title","content":"002_SpringBoot实体类LocalDateTime接收不了时间字符串"}],["meta",{"property":"og:description","content":"异常场景 前端传字符串给后台， 后台实体类中字段为LocalDateTime类型，接收的时候报错了。 错误如下： Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text '2025-03-01 10:52:03' coul..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-09T07:40:44.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-09T07:40:44.000Z"}]]},"readingTime":{"minutes":1.85,"words":554},"git":{"createdTime":1757403644000,"updatedTime":1757403644000,"contributors":[{"name":"zuoer96","username":"zuoer96","email":"31268184+zuoer96@users.noreply.github.com","commits":1,"avatar":"https://avatars.githubusercontent.com/zuoer96?v=4","url":"https://github.com/zuoer96"}]},"autoDesc":true,"filePathRelative":"notes/00-方向/08_有意思的碎片知识点/002_SpringBoot实体类LocalDateTime接收不了时间字符串.md","headers":[],"bulletin":true}`);export{d as comp,p as data};
